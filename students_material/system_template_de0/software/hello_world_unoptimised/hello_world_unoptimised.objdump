
hello_world_unoptimised.elf:     file format elf32-littlenios2
hello_world_unoptimised.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00009278 memsz 0x00009278 flags r-x
    LOAD off    0x0000a298 vaddr 0x00019298 paddr 0x0001998c align 2**12
         filesz 0x000006f4 memsz 0x000006f4 flags rw-
    LOAD off    0x0000b080 vaddr 0x0001a080 paddr 0x0001a080 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008e18  000101b4  000101b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002cc  00018fcc  00018fcc  00009fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000006f4  00019298  0001998c  0000a298  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  0001a080  0001a080  0000b080  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000a98c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ad8  00000000  00000000  0000a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000fbe  00000000  00000000  0000b488  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016343  00000000  00000000  0000c446  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006504  00000000  00000000  00022789  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ef39  00000000  00000000  00028c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001478  00000000  00000000  00037bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001782  00000000  00000000  00039040  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000088aa  00000000  00000000  0003a7c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0004306c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000660  00000000  00000000  00043090  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00045e12  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00045e15  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00045e18  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00045e19  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00045e1a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00045e1e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00045e22  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00045e26  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00045e2f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00045e38  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00045e41  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000037  00000000  00000000  00045e53  2**0
                  CONTENTS, READONLY
 29 .jdi          00004fae  00000000  00000000  00045e8a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00034e37  00000000  00000000  0004ae38  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b4 l    d  .text	00000000 .text
00018fcc l    d  .rodata	00000000 .rodata
00019298 l    d  .rwdata	00000000 .rwdata
0001a080 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
000104c8 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00010bbc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 impure.c
00019298 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 ecvtbuf.c
00011f34 l     F .text	00000204 print_e
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 mprec.c
0001924c l     O .rodata	0000000c p05.2496
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
0001434c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0001726c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_load.c
00017500 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00019964 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00017798 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0001791c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00019780 l     O .rwdata	0000002c jtag_uart
000179f8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00017c88 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00017e88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00017f04 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00017fe4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00018340 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00018490 l     F .text	000000f8 alt_file_locked
00018714 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00018da8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00018f68 l     F .text	00000040 alt_sim_halt
00012ea0 g     F .text	00000094 _mprec_log10
00012f8c g     F .text	00000088 __any_on
00019224 g     O .rodata	00000028 __mprec_tinytens
0001756c g     F .text	0000005c alt_main
000141ec g     F .text	00000020 strcpy
00011e70 g     F .text	00000090 _puts_r
0001a0d0 g     O .bss	00000100 alt_irq
0001998c g       *ABS*	00000000 __flash_rwdata_start
00016e64 g     F .text	00000088 __eqdf2
0001a1d0 g       *ABS*	00000000 __alt_heap_start
00012858 g     F .text	000001a8 fcvtbuf
000175e8 g     F .text	00000020 __malloc_unlock
00010960 g     F .text	00000174 __divsf3
00016758 g     F .text	00000060 memmove
0001308c g     F .text	000000f0 _Balloc
00010ad4 g     F .text	00000094 __fixsfsi
00017608 g     F .text	00000040 alt_putstr
00016f74 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00017704 g     F .text	00000094 times
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001a080 g     O .bss	00000004 errno
000111b8 g     F .text	00000038 __make_dp
000117c4 g     F .text	0000002c __make_fp
0001a094 g     O .bss	00000004 alt_argv
00021954 g       *ABS*	00000000 _gp
000106ac g     F .text	00000070 __subsf3
000197d4 g     O .rwdata	00000180 alt_fd_list
000189b0 g     F .text	00000094 alt_find_dev
0001672c g     F .text	0000002c memcpy
000110c0 g     F .text	000000f8 __floatsidf
00018418 g     F .text	00000078 alt_io_redirect
00017084 g     F .text	00000088 __ltdf2
00011f00 g     F .text	00000014 puts
00012df0 g     F .text	000000b0 __ratio
00017ae0 g     F .text	00000104 altera_avalon_jtag_uart_read
00015fd8 g     F .text	00000014 malloc
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000173a8 g     F .text	00000008 __udivsi3
00019134 g     O .rodata	000000c8 __mprec_tens
00011d40 g     F .text	00000040 gcvtf
00018c34 g     F .text	00000090 alt_icache_flush
0001a084 g     O .bss	00000004 __malloc_top_pad
00013824 g     F .text	0000003c __i2b
000167d8 g     F .text	00000070 _sbrk_r
00019978 g     O .rwdata	00000004 alt_max_fd
00011b04 g     F .text	00000138 __unpack_d
0001a088 g     O .bss	00000004 __malloc_max_sbrked_mem
00010b68 g     F .text	00000054 __extendsfdf2
0001104c g     F .text	00000074 __adddf3
00012cd0 g     F .text	00000120 __b2d
00019958 g     O .rwdata	00000004 _global_impure_ptr
00013bf8 g     F .text	000005f4 _realloc_r
0001a1d0 g       *ABS*	00000000 __bss_end
00018248 g     F .text	000000f8 alt_iic_isr_register
00018884 g     F .text	0000010c alt_tick
000191fc g     O .rodata	00000028 __mprec_bigtens
00013ad8 g     F .text	00000120 __s2b
00011264 g     F .text	00000194 __floatunsidf
00012bf0 g     F .text	00000060 __mcmp
00018200 g     F .text	00000048 alt_ic_irq_enabled
000187ec g     F .text	00000098 alt_alarm_stop
0001a09c g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000c8 alt_irq_handler
000197ac g     O .rwdata	00000028 alt_dev_null
000116fc g     F .text	000000c8 __unpack_f
00017ee8 g     F .text	0000001c alt_dcache_flush_all
00012abc g     F .text	00000070 __hi0bits
00017194 g     F .text	000000d8 __fixdfsi
0001998c g       *ABS*	00000000 __ram_rwdata_end
00019970 g     O .rwdata	00000008 alt_dev_list
000177f8 g     F .text	00000124 write
00019298 g       *ABS*	00000000 __ram_rodata_end
0001710c g     F .text	00000088 __ledf2
0001398c g     F .text	0000014c __pow5mult
000173b0 g     F .text	00000008 __umodsi3
0001a1d0 g       *ABS*	00000000 end
0001159c g     F .text	00000160 __pack_f
0001afc8 g       *ABS*	00000000 __alt_stack_pointer
00012418 g     F .text	000002f8 _dcvt
00017cf8 g     F .text	00000090 alt_avalon_timer_sc_init
0001151c g     F .text	00000080 __clzsi2
00017be4 g     F .text	000000a4 altera_avalon_jtag_uart_write
00015cb0 g     F .text	00000314 _free_r
00018dac g     F .text	000001bc __call_exitprocs
00019960 g     O .rwdata	00000004 __malloc_sbrk_base
000101b4 g     F .text	0000003c _start
0001a0a0 g     O .bss	00000004 _alt_tick_rate
00012138 g     F .text	000002e0 _gcvt
00013484 g     F .text	0000014c __lshift
0001a0a4 g     O .bss	00000004 _alt_nticks
000179b0 g     F .text	00000048 alt_sys_init
000135d0 g     F .text	00000254 __multiply
00011c3c g     F .text	00000038 __mulsi3
00019298 g       *ABS*	00000000 __ram_rwdata_start
00018fcc g       *ABS*	00000000 __ram_rodata_start
0001a0a8 g     O .bss	00000028 __malloc_current_mallinfo
0001317c g     F .text	0000017c __d2b
00017a30 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00018b64 g     F .text	000000d0 alt_get_fd
000173b8 g     F .text	000000c8 __fpcmp_parts_d
000101f0 g     F .text	000000e0 generateVector
00018d6c g     F .text	0000003c memcmp
0001a1d0 g       *ABS*	00000000 __alt_stack_base
00016c0c g     F .text	00000258 __divdf3
00012f34 g     F .text	00000058 __copybits
00019378 g     O .rwdata	00000408 __malloc_av_
00016848 g     F .text	000003c4 __muldf3
0001900c g     O .rodata	00000010 __thenan_sf
00018a44 g     F .text	00000120 alt_find_file
00017f30 g     F .text	000000b4 alt_dev_llist_insert
000175c8 g     F .text	00000020 __malloc_lock
00017648 g     F .text	000000bc sbrk
00014284 g     F .text	000000c8 _calloc_r
00012a00 g     F .text	000000bc __sfvwrite_small_dev
0001a080 g       *ABS*	00000000 __bss_start
000167b8 g     F .text	00000020 memset
000103a8 g     F .text	00000120 main
00011df8 g     F .text	00000024 fcvt
0001a098 g     O .bss	00000004 alt_envp
0001a08c g     O .bss	00000004 __malloc_max_total_mem
00017a88 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00012710 g     F .text	00000148 ecvtbuf
0001afc8 g       *ABS*	00000000 __alt_heap_limit
000111f0 g     F .text	00000074 __truncdfsf2
00014590 g     F .text	000015f4 _dtoa_r
00015fec g     F .text	00000740 _malloc_r
0001997c g     O .rwdata	00000004 alt_errno
00011da4 g     F .text	00000054 ecvtf
000172e8 g     F .text	00000060 __divsi3
0001901c g     O .rodata	00000014 __thenan_df
00015b84 g     F .text	0000012c _malloc_trim_r
00010780 g     F .text	000001e0 __mulsf3
00018fcc g       *ABS*	00000000 __flash_rodata_start
00016eec g     F .text	00000088 __nedf2
0001797c g     F .text	00000034 alt_irq_init
00018774 g     F .text	00000078 alt_release_fd
00019030 g     O .rodata	00000100 __clz_tab
000102d0 g     F .text	000000d8 sumVector
0001420c g     F .text	00000078 _write_r
00019954 g     O .rwdata	00000004 _impure_ptr
0001a090 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00012c50 g     F .text	00000080 __ulp
00011d80 g     F .text	00000024 ecvt
00019968 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00018074 g     F .text	00000050 alt_ic_isr_register
0001998c g       *ABS*	00000000 _edata
0001a1d0 g       *ABS*	00000000 _end
000101b4 g       *ABS*	00000000 __ram_exceptions_end
00018160 g     F .text	000000a0 alt_ic_irq_disable
0001995c g     O .rwdata	00000004 __malloc_trim_threshold
00011e1c g     F .text	00000054 fcvtf
00018990 g     F .text	00000020 altera_nios2_qsys_irq_init
00018cc4 g     F .text	00000020 exit
000132f8 g     F .text	0000018c __mdiff
00017348 g     F .text	00000060 __modsi3
0001afc8 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011c74 g     F .text	000000cc gcvt
00018fa8 g     F .text	00000020 _exit
000113f8 g     F .text	00000124 __muldi3
00011f14 g     F .text	00000020 strlen
00018588 g     F .text	0000018c open
00016ffc g     F .text	00000088 __gedf2
00018044 g     F .text	00000030 alt_icache_flush_all
00018ce4 g     F .text	00000088 fputs
00019980 g     O .rwdata	00000004 alt_priority_mask
000180c4 g     F .text	0000009c alt_ic_irq_enable
00010fcc g     F .text	00000080 __subdf3
00012b2c g     F .text	000000c4 __lo0bits
00019984 g     O .rwdata	00000008 alt_alarm_list
00017d88 g     F .text	00000100 close
0001071c g     F .text	00000064 __addsf3
00017480 g     F .text	00000080 alt_load
000117f0 g     F .text	00000314 __pack_d
00015fc4 g     F .text	00000014 free
00013860 g     F .text	0000012c __multadd
00013014 g     F .text	00000078 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406d14 	ori	at,at,436
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100fc:	0005313a 	rdctl	r2,ipending
   10100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   1010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10110:	00800044 	movi	r2,1
   10114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10118:	e0ffff17 	ldw	r3,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	1884703a 	and	r2,r3,r2
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000161e 	bne	r2,zero,10184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	00c000b4 	movhi	r3,2
   10134:	18e83404 	addi	r3,r3,-24368
   10138:	100490fa 	slli	r2,r2,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	11400017 	ldw	r5,0(r2)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c000b4 	movhi	r3,2
   1014c:	18e83404 	addi	r3,r3,-24368
   10150:	100490fa 	slli	r2,r2,3
   10154:	10c5883a 	add	r2,r2,r3
   10158:	10800104 	addi	r2,r2,4
   1015c:	11000017 	ldw	r4,0(r2)
   10160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10164:	0005313a 	rdctl	r2,ipending
   10168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	1004c03a 	cmpne	r2,r2,zero
   1017c:	103fe31e 	bne	r2,zero,1010c <alt_irq_handler+0x20>
   10180:	00000706 	br	101a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   1019c:	003fde06 	br	10118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

Disassembly of section .text:

000101b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   101b8:	deebf214 	ori	sp,sp,45000

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101bc:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   101c0:	d6865514 	ori	gp,gp,6484
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101c8:	10a82014 	ori	r2,r2,41088

    movhi r3, %hi(__bss_end)
   101cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d0:	18e87414 	ori	r3,r3,41424

    beq r2, r3, 1f
   101d4:	10c00326 	beq	r2,r3,101e4 <_start+0x30>

0:
    stw zero, (r2)
   101d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e0:	10fffd36 	bltu	r2,r3,101d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e4:	00174800 	call	17480 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101e8:	001756c0 	call	1756c <alt_main>

000101ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101ec:	003fff06 	br	101ec <alt_after_alt_main>

000101f0 <generateVector>:
//#define step 0.001
//#define N 255001

// generate the vector x and stores it in the memory
void generateVector (float x[N])
{
   101f0:	defffb04 	addi	sp,sp,-20
   101f4:	dfc00415 	stw	ra,16(sp)
   101f8:	df000315 	stw	fp,12(sp)
   101fc:	dc000215 	stw	r16,8(sp)
   10200:	df000204 	addi	fp,sp,8
   10204:	e13fff15 	stw	r4,-4(fp)
	int i;
	x[0] = 0;
   10208:	e0bfff17 	ldw	r2,-4(fp)
   1020c:	10000015 	stw	zero,0(r2)
	for (i=1;i<N;i++) {
   10210:	00800044 	movi	r2,1
   10214:	e0bffe15 	stw	r2,-8(fp)
   10218:	00002406 	br	102ac <generateVector+0xbc>
		x[i] = x[i-1] + step;
   1021c:	e0bffe17 	ldw	r2,-8(fp)
   10220:	1085883a 	add	r2,r2,r2
   10224:	1085883a 	add	r2,r2,r2
   10228:	1007883a 	mov	r3,r2
   1022c:	e0bfff17 	ldw	r2,-4(fp)
   10230:	18a1883a 	add	r16,r3,r2
   10234:	e0bffe17 	ldw	r2,-8(fp)
   10238:	1085883a 	add	r2,r2,r2
   1023c:	1085883a 	add	r2,r2,r2
   10240:	1007883a 	mov	r3,r2
   10244:	e0bfff17 	ldw	r2,-4(fp)
   10248:	1885883a 	add	r2,r3,r2
   1024c:	10bfff04 	addi	r2,r2,-4
   10250:	10800017 	ldw	r2,0(r2)
   10254:	1009883a 	mov	r4,r2
   10258:	0010b680 	call	10b68 <__extendsfdf2>
   1025c:	100b883a 	mov	r5,r2
   10260:	180d883a 	mov	r6,r3
   10264:	2809883a 	mov	r4,r5
   10268:	300b883a 	mov	r5,r6
   1026c:	01a666b4 	movhi	r6,39322
   10270:	31a66684 	addi	r6,r6,-26214
   10274:	01cfeeb4 	movhi	r7,16314
   10278:	39e66644 	addi	r7,r7,-26215
   1027c:	001104c0 	call	1104c <__adddf3>
   10280:	1009883a 	mov	r4,r2
   10284:	180b883a 	mov	r5,r3
   10288:	2005883a 	mov	r2,r4
   1028c:	2807883a 	mov	r3,r5
   10290:	1009883a 	mov	r4,r2
   10294:	180b883a 	mov	r5,r3
   10298:	00111f00 	call	111f0 <__truncdfsf2>
   1029c:	80800015 	stw	r2,0(r16)
// generate the vector x and stores it in the memory
void generateVector (float x[N])
{
	int i;
	x[0] = 0;
	for (i=1;i<N;i++) {
   102a0:	e0bffe17 	ldw	r2,-8(fp)
   102a4:	10800044 	addi	r2,r2,1
   102a8:	e0bffe15 	stw	r2,-8(fp)
   102ac:	e0bffe17 	ldw	r2,-8(fp)
   102b0:	10827dd0 	cmplti	r2,r2,2551
   102b4:	103fd91e 	bne	r2,zero,1021c <generateVector+0x2c>
		x[i] = x[i-1] + step;
	}
}
   102b8:	e037883a 	mov	sp,fp
   102bc:	dfc00217 	ldw	ra,8(sp)
   102c0:	df000117 	ldw	fp,4(sp)
   102c4:	dc000017 	ldw	r16,0(sp)
   102c8:	dec00304 	addi	sp,sp,12
   102cc:	f800283a 	ret

000102d0 <sumVector>:
float sumVector (float x[], int M){
   102d0:	defff904 	addi	sp,sp,-28
   102d4:	dfc00615 	stw	ra,24(sp)
   102d8:	df000515 	stw	fp,20(sp)
   102dc:	dc000415 	stw	r16,16(sp)
   102e0:	df000404 	addi	fp,sp,16
   102e4:	e13ffe15 	stw	r4,-8(fp)
   102e8:	e17fff15 	stw	r5,-4(fp)
	float y = 0;
   102ec:	e03ffd15 	stw	zero,-12(fp)
	int i;
	for (i=0; i<N; i++) {
   102f0:	e03ffc15 	stw	zero,-16(fp)
   102f4:	00002206 	br	10380 <sumVector+0xb0>
		y = y + x[i] + x[i] * x[i];
   102f8:	e0bffc17 	ldw	r2,-16(fp)
   102fc:	1085883a 	add	r2,r2,r2
   10300:	1085883a 	add	r2,r2,r2
   10304:	1007883a 	mov	r3,r2
   10308:	e0bffe17 	ldw	r2,-8(fp)
   1030c:	1885883a 	add	r2,r3,r2
   10310:	10800017 	ldw	r2,0(r2)
   10314:	1009883a 	mov	r4,r2
   10318:	e17ffd17 	ldw	r5,-12(fp)
   1031c:	001071c0 	call	1071c <__addsf3>
   10320:	1021883a 	mov	r16,r2
   10324:	e0bffc17 	ldw	r2,-16(fp)
   10328:	1085883a 	add	r2,r2,r2
   1032c:	1085883a 	add	r2,r2,r2
   10330:	1007883a 	mov	r3,r2
   10334:	e0bffe17 	ldw	r2,-8(fp)
   10338:	1885883a 	add	r2,r3,r2
   1033c:	11000017 	ldw	r4,0(r2)
   10340:	e0bffc17 	ldw	r2,-16(fp)
   10344:	1085883a 	add	r2,r2,r2
   10348:	1085883a 	add	r2,r2,r2
   1034c:	1007883a 	mov	r3,r2
   10350:	e0bffe17 	ldw	r2,-8(fp)
   10354:	1885883a 	add	r2,r3,r2
   10358:	10800017 	ldw	r2,0(r2)
   1035c:	100b883a 	mov	r5,r2
   10360:	00107800 	call	10780 <__mulsf3>
   10364:	8009883a 	mov	r4,r16
   10368:	100b883a 	mov	r5,r2
   1036c:	001071c0 	call	1071c <__addsf3>
   10370:	e0bffd15 	stw	r2,-12(fp)
	}
}
float sumVector (float x[], int M){
	float y = 0;
	int i;
	for (i=0; i<N; i++) {
   10374:	e0bffc17 	ldw	r2,-16(fp)
   10378:	10800044 	addi	r2,r2,1
   1037c:	e0bffc15 	stw	r2,-16(fp)
   10380:	e0bffc17 	ldw	r2,-16(fp)
   10384:	10827dd0 	cmplti	r2,r2,2551
   10388:	103fdb1e 	bne	r2,zero,102f8 <sumVector+0x28>
		y = y + x[i] + x[i] * x[i];
	}
	return y;
   1038c:	e0bffd17 	ldw	r2,-12(fp)
}
   10390:	e037883a 	mov	sp,fp
   10394:	dfc00217 	ldw	ra,8(sp)
   10398:	df000117 	ldw	fp,4(sp)
   1039c:	dc000017 	ldw	r16,0(sp)
   103a0:	dec00304 	addi	sp,sp,12
   103a4:	f800283a 	ret

000103a8 <main>:

int main()
{
   103a8:	def5f604 	addi	sp,sp,-10280
   103ac:	dfca0915 	stw	ra,10276(sp)
   103b0:	df0a0815 	stw	fp,10272(sp)
   103b4:	df0a0804 	addi	fp,sp,10272
	printf("Task 2! \n");
   103b8:	010000b4 	movhi	r4,2
   103bc:	2123f304 	addi	r4,r4,-28724
   103c0:	0011f000 	call	11f00 <puts>

	float x[N];
	float y;

	generateVector(x);
   103c4:	e135fc04 	addi	r4,fp,-10256
   103c8:	00101f00 	call	101f0 <generateVector>

	// timing
	char buf[50];
	clock_t exec_t1, exec_t2;

	exec_t1 = times(NULL); // get system time before starting the process
   103cc:	0009883a 	mov	r4,zero
   103d0:	00177040 	call	17704 <times>
   103d4:	e0b5fa15 	stw	r2,-10264(fp)

	// code START
	y = sumVector (x, N);
   103d8:	e135fc04 	addi	r4,fp,-10256
   103dc:	01427dc4 	movi	r5,2551
   103e0:	00102d00 	call	102d0 <sumVector>
   103e4:	e0b5fb15 	stw	r2,-10260(fp)

	//code END

	exec_t2 = times(NULL); // get system time after finishing the process
   103e8:	0009883a 	mov	r4,zero
   103ec:	00177040 	call	17704 <times>
   103f0:	e0b5f915 	stw	r2,-10268(fp)
	gcvt((exec_t2 - exec_t1), 10, buf);
   103f4:	e0f5f917 	ldw	r3,-10268(fp)
   103f8:	e0b5fa17 	ldw	r2,-10264(fp)
   103fc:	1889c83a 	sub	r4,r3,r2
   10400:	00112640 	call	11264 <__floatunsidf>
   10404:	100b883a 	mov	r5,r2
   10408:	180d883a 	mov	r6,r3
   1040c:	e1fff304 	addi	r7,fp,-52
   10410:	2809883a 	mov	r4,r5
   10414:	300b883a 	mov	r5,r6
   10418:	01800284 	movi	r6,10
   1041c:	0011c740 	call	11c74 <gcvt>
	// gcvt convert a number to a string with decimal including a point, gcvt(value,number of digits,buffer)
	// buffer 8,9 character longer than number, this is the memory block that stores the number
	alt_putstr("proc time = "); 	alt_putstr(buf);	alt_putstr("ticks\n");
   10420:	010000b4 	movhi	r4,2
   10424:	2123f604 	addi	r4,r4,-28712
   10428:	00176080 	call	17608 <alt_putstr>
   1042c:	e13ff304 	addi	r4,fp,-52
   10430:	00176080 	call	17608 <alt_putstr>
   10434:	010000b4 	movhi	r4,2
   10438:	2123fa04 	addi	r4,r4,-28696
   1043c:	00176080 	call	17608 <alt_putstr>
	//printf could be used if memory is enough
	int i;
	for (i=0; i<10; i++)
   10440:	e035f815 	stw	zero,-10272(fp)
   10444:	00000706 	br	10464 <main+0xbc>
		y = y/2.0;
   10448:	e135fb17 	ldw	r4,-10260(fp)
   1044c:	01500034 	movhi	r5,16384
   10450:	00109600 	call	10960 <__divsf3>
   10454:	e0b5fb15 	stw	r2,-10260(fp)
	// gcvt convert a number to a string with decimal including a point, gcvt(value,number of digits,buffer)
	// buffer 8,9 character longer than number, this is the memory block that stores the number
	alt_putstr("proc time = "); 	alt_putstr(buf);	alt_putstr("ticks\n");
	//printf could be used if memory is enough
	int i;
	for (i=0; i<10; i++)
   10458:	e0b5f817 	ldw	r2,-10272(fp)
   1045c:	10800044 	addi	r2,r2,1
   10460:	e0b5f815 	stw	r2,-10272(fp)
   10464:	e0b5f817 	ldw	r2,-10272(fp)
   10468:	10800290 	cmplti	r2,r2,10
   1046c:	103ff61e 	bne	r2,zero,10448 <main+0xa0>
		y = y/2.0;
	gcvt((int)y, 10, buf);
   10470:	e135fb17 	ldw	r4,-10260(fp)
   10474:	0010ad40 	call	10ad4 <__fixsfsi>
   10478:	1009883a 	mov	r4,r2
   1047c:	00110c00 	call	110c0 <__floatsidf>
   10480:	100b883a 	mov	r5,r2
   10484:	180d883a 	mov	r6,r3
   10488:	e1fff304 	addi	r7,fp,-52
   1048c:	2809883a 	mov	r4,r5
   10490:	300b883a 	mov	r5,r6
   10494:	01800284 	movi	r6,10
   10498:	0011c740 	call	11c74 <gcvt>
	alt_putstr("Result (divided by 1014) = "); alt_putstr(buf);
   1049c:	010000b4 	movhi	r4,2
   104a0:	2123fc04 	addi	r4,r4,-28688
   104a4:	00176080 	call	17608 <alt_putstr>
   104a8:	e13ff304 	addi	r4,fp,-52
   104ac:	00176080 	call	17608 <alt_putstr>
	return 0;
   104b0:	0005883a 	mov	r2,zero
}
   104b4:	e037883a 	mov	sp,fp
   104b8:	dfc00117 	ldw	ra,4(sp)
   104bc:	df000017 	ldw	fp,0(sp)
   104c0:	dec00204 	addi	sp,sp,8
   104c4:	f800283a 	ret

000104c8 <_fpadd_parts>:
   104c8:	21c00017 	ldw	r7,0(r4)
   104cc:	02000044 	movi	r8,1
   104d0:	41c0332e 	bgeu	r8,r7,105a0 <_fpadd_parts+0xd8>
   104d4:	28800017 	ldw	r2,0(r5)
   104d8:	4080462e 	bgeu	r8,r2,105f4 <_fpadd_parts+0x12c>
   104dc:	00c00104 	movi	r3,4
   104e0:	38c06b26 	beq	r7,r3,10690 <_fpadd_parts+0x1c8>
   104e4:	10c04326 	beq	r2,r3,105f4 <_fpadd_parts+0x12c>
   104e8:	00c00084 	movi	r3,2
   104ec:	10c02e26 	beq	r2,r3,105a8 <_fpadd_parts+0xe0>
   104f0:	38c04026 	beq	r7,r3,105f4 <_fpadd_parts+0x12c>
   104f4:	22800217 	ldw	r10,8(r4)
   104f8:	28c00217 	ldw	r3,8(r5)
   104fc:	23000317 	ldw	r12,12(r4)
   10500:	2a400317 	ldw	r9,12(r5)
   10504:	50cfc83a 	sub	r7,r10,r3
   10508:	3817883a 	mov	r11,r7
   1050c:	38004f16 	blt	r7,zero,1064c <_fpadd_parts+0x184>
   10510:	008007c4 	movi	r2,31
   10514:	11c03316 	blt	r2,r7,105e4 <_fpadd_parts+0x11c>
   10518:	02c0540e 	bge	zero,r11,1066c <_fpadd_parts+0x1a4>
   1051c:	41c4983a 	sll	r2,r8,r7
   10520:	49c6d83a 	srl	r3,r9,r7
   10524:	10bfffc4 	addi	r2,r2,-1
   10528:	4884703a 	and	r2,r9,r2
   1052c:	1004c03a 	cmpne	r2,r2,zero
   10530:	1892b03a 	or	r9,r3,r2
   10534:	20c00117 	ldw	r3,4(r4)
   10538:	28800117 	ldw	r2,4(r5)
   1053c:	18803c26 	beq	r3,r2,10630 <_fpadd_parts+0x168>
   10540:	18002f26 	beq	r3,zero,10600 <_fpadd_parts+0x138>
   10544:	4b05c83a 	sub	r2,r9,r12
   10548:	10004216 	blt	r2,zero,10654 <_fpadd_parts+0x18c>
   1054c:	32800215 	stw	r10,8(r6)
   10550:	30800315 	stw	r2,12(r6)
   10554:	30000115 	stw	zero,4(r6)
   10558:	31000317 	ldw	r4,12(r6)
   1055c:	01d00034 	movhi	r7,16384
   10560:	39ffff84 	addi	r7,r7,-2
   10564:	20bfffc4 	addi	r2,r4,-1
   10568:	2007883a 	mov	r3,r4
   1056c:	38800836 	bltu	r7,r2,10590 <_fpadd_parts+0xc8>
   10570:	31400217 	ldw	r5,8(r6)
   10574:	18c9883a 	add	r4,r3,r3
   10578:	20bfffc4 	addi	r2,r4,-1
   1057c:	297fffc4 	addi	r5,r5,-1
   10580:	2007883a 	mov	r3,r4
   10584:	38bffb2e 	bgeu	r7,r2,10574 <_fpadd_parts+0xac>
   10588:	31400215 	stw	r5,8(r6)
   1058c:	31000315 	stw	r4,12(r6)
   10590:	008000c4 	movi	r2,3
   10594:	30800015 	stw	r2,0(r6)
   10598:	20001b16 	blt	r4,zero,10608 <_fpadd_parts+0x140>
   1059c:	3009883a 	mov	r4,r6
   105a0:	2005883a 	mov	r2,r4
   105a4:	f800283a 	ret
   105a8:	38fffd1e 	bne	r7,r3,105a0 <_fpadd_parts+0xd8>
   105ac:	31c00015 	stw	r7,0(r6)
   105b0:	20800117 	ldw	r2,4(r4)
   105b4:	30800115 	stw	r2,4(r6)
   105b8:	20c00217 	ldw	r3,8(r4)
   105bc:	30c00215 	stw	r3,8(r6)
   105c0:	20800317 	ldw	r2,12(r4)
   105c4:	30800315 	stw	r2,12(r6)
   105c8:	20c00117 	ldw	r3,4(r4)
   105cc:	28800117 	ldw	r2,4(r5)
   105d0:	3009883a 	mov	r4,r6
   105d4:	1886703a 	and	r3,r3,r2
   105d8:	2005883a 	mov	r2,r4
   105dc:	30c00115 	stw	r3,4(r6)
   105e0:	f800283a 	ret
   105e4:	1a801716 	blt	r3,r10,10644 <_fpadd_parts+0x17c>
   105e8:	1815883a 	mov	r10,r3
   105ec:	0019883a 	mov	r12,zero
   105f0:	003fd006 	br	10534 <_fpadd_parts+0x6c>
   105f4:	2809883a 	mov	r4,r5
   105f8:	2005883a 	mov	r2,r4
   105fc:	f800283a 	ret
   10600:	6245c83a 	sub	r2,r12,r9
   10604:	003fd006 	br	10548 <_fpadd_parts+0x80>
   10608:	30800217 	ldw	r2,8(r6)
   1060c:	2006d07a 	srli	r3,r4,1
   10610:	2100004c 	andi	r4,r4,1
   10614:	10800044 	addi	r2,r2,1
   10618:	1906b03a 	or	r3,r3,r4
   1061c:	3009883a 	mov	r4,r6
   10620:	30800215 	stw	r2,8(r6)
   10624:	2005883a 	mov	r2,r4
   10628:	30c00315 	stw	r3,12(r6)
   1062c:	f800283a 	ret
   10630:	4b09883a 	add	r4,r9,r12
   10634:	30c00115 	stw	r3,4(r6)
   10638:	32800215 	stw	r10,8(r6)
   1063c:	31000315 	stw	r4,12(r6)
   10640:	003fd306 	br	10590 <_fpadd_parts+0xc8>
   10644:	0013883a 	mov	r9,zero
   10648:	003fba06 	br	10534 <_fpadd_parts+0x6c>
   1064c:	01cfc83a 	sub	r7,zero,r7
   10650:	003faf06 	br	10510 <_fpadd_parts+0x48>
   10654:	0089c83a 	sub	r4,zero,r2
   10658:	00800044 	movi	r2,1
   1065c:	30800115 	stw	r2,4(r6)
   10660:	32800215 	stw	r10,8(r6)
   10664:	31000315 	stw	r4,12(r6)
   10668:	003fbb06 	br	10558 <_fpadd_parts+0x90>
   1066c:	583fb126 	beq	r11,zero,10534 <_fpadd_parts+0x6c>
   10670:	41c4983a 	sll	r2,r8,r7
   10674:	61c6d83a 	srl	r3,r12,r7
   10678:	51d5883a 	add	r10,r10,r7
   1067c:	10bfffc4 	addi	r2,r2,-1
   10680:	6084703a 	and	r2,r12,r2
   10684:	1004c03a 	cmpne	r2,r2,zero
   10688:	1898b03a 	or	r12,r3,r2
   1068c:	003fa906 	br	10534 <_fpadd_parts+0x6c>
   10690:	11ffc31e 	bne	r2,r7,105a0 <_fpadd_parts+0xd8>
   10694:	28c00117 	ldw	r3,4(r5)
   10698:	20800117 	ldw	r2,4(r4)
   1069c:	10ffc026 	beq	r2,r3,105a0 <_fpadd_parts+0xd8>
   106a0:	010000b4 	movhi	r4,2
   106a4:	21240304 	addi	r4,r4,-28660
   106a8:	003fbd06 	br	105a0 <_fpadd_parts+0xd8>

000106ac <__subsf3>:
   106ac:	deffef04 	addi	sp,sp,-68
   106b0:	dcc00f15 	stw	r19,60(sp)
   106b4:	dcc00204 	addi	r19,sp,8
   106b8:	dc400e15 	stw	r17,56(sp)
   106bc:	d9000015 	stw	r4,0(sp)
   106c0:	d9400115 	stw	r5,4(sp)
   106c4:	d809883a 	mov	r4,sp
   106c8:	980b883a 	mov	r5,r19
   106cc:	dc400604 	addi	r17,sp,24
   106d0:	dfc01015 	stw	ra,64(sp)
   106d4:	00116fc0 	call	116fc <__unpack_f>
   106d8:	d9000104 	addi	r4,sp,4
   106dc:	880b883a 	mov	r5,r17
   106e0:	00116fc0 	call	116fc <__unpack_f>
   106e4:	d8800717 	ldw	r2,28(sp)
   106e8:	9809883a 	mov	r4,r19
   106ec:	880b883a 	mov	r5,r17
   106f0:	d9800a04 	addi	r6,sp,40
   106f4:	1080005c 	xori	r2,r2,1
   106f8:	d8800715 	stw	r2,28(sp)
   106fc:	00104c80 	call	104c8 <_fpadd_parts>
   10700:	1009883a 	mov	r4,r2
   10704:	001159c0 	call	1159c <__pack_f>
   10708:	dfc01017 	ldw	ra,64(sp)
   1070c:	dcc00f17 	ldw	r19,60(sp)
   10710:	dc400e17 	ldw	r17,56(sp)
   10714:	dec01104 	addi	sp,sp,68
   10718:	f800283a 	ret

0001071c <__addsf3>:
   1071c:	deffef04 	addi	sp,sp,-68
   10720:	dcc00f15 	stw	r19,60(sp)
   10724:	dcc00204 	addi	r19,sp,8
   10728:	dc400e15 	stw	r17,56(sp)
   1072c:	d9000015 	stw	r4,0(sp)
   10730:	d9400115 	stw	r5,4(sp)
   10734:	d809883a 	mov	r4,sp
   10738:	980b883a 	mov	r5,r19
   1073c:	dc400604 	addi	r17,sp,24
   10740:	dfc01015 	stw	ra,64(sp)
   10744:	00116fc0 	call	116fc <__unpack_f>
   10748:	d9000104 	addi	r4,sp,4
   1074c:	880b883a 	mov	r5,r17
   10750:	00116fc0 	call	116fc <__unpack_f>
   10754:	d9800a04 	addi	r6,sp,40
   10758:	9809883a 	mov	r4,r19
   1075c:	880b883a 	mov	r5,r17
   10760:	00104c80 	call	104c8 <_fpadd_parts>
   10764:	1009883a 	mov	r4,r2
   10768:	001159c0 	call	1159c <__pack_f>
   1076c:	dfc01017 	ldw	ra,64(sp)
   10770:	dcc00f17 	ldw	r19,60(sp)
   10774:	dc400e17 	ldw	r17,56(sp)
   10778:	dec01104 	addi	sp,sp,68
   1077c:	f800283a 	ret

00010780 <__mulsf3>:
   10780:	deffef04 	addi	sp,sp,-68
   10784:	dc400f15 	stw	r17,60(sp)
   10788:	dc400204 	addi	r17,sp,8
   1078c:	dc000e15 	stw	r16,56(sp)
   10790:	d9000015 	stw	r4,0(sp)
   10794:	d9400115 	stw	r5,4(sp)
   10798:	d809883a 	mov	r4,sp
   1079c:	880b883a 	mov	r5,r17
   107a0:	dc000604 	addi	r16,sp,24
   107a4:	dfc01015 	stw	ra,64(sp)
   107a8:	00116fc0 	call	116fc <__unpack_f>
   107ac:	d9000104 	addi	r4,sp,4
   107b0:	800b883a 	mov	r5,r16
   107b4:	00116fc0 	call	116fc <__unpack_f>
   107b8:	d9000217 	ldw	r4,8(sp)
   107bc:	00800044 	movi	r2,1
   107c0:	01400104 	movi	r5,4
   107c4:	1100142e 	bgeu	r2,r4,10818 <__mulsf3+0x98>
   107c8:	d8c00617 	ldw	r3,24(sp)
   107cc:	10c0052e 	bgeu	r2,r3,107e4 <__mulsf3+0x64>
   107d0:	21400f26 	beq	r4,r5,10810 <__mulsf3+0x90>
   107d4:	19405d26 	beq	r3,r5,1094c <__mulsf3+0x1cc>
   107d8:	00800084 	movi	r2,2
   107dc:	20800e26 	beq	r4,r2,10818 <__mulsf3+0x98>
   107e0:	1880181e 	bne	r3,r2,10844 <__mulsf3+0xc4>
   107e4:	d8c00717 	ldw	r3,28(sp)
   107e8:	d8800317 	ldw	r2,12(sp)
   107ec:	8009883a 	mov	r4,r16
   107f0:	10c4c03a 	cmpne	r2,r2,r3
   107f4:	d8800715 	stw	r2,28(sp)
   107f8:	001159c0 	call	1159c <__pack_f>
   107fc:	dfc01017 	ldw	ra,64(sp)
   10800:	dc400f17 	ldw	r17,60(sp)
   10804:	dc000e17 	ldw	r16,56(sp)
   10808:	dec01104 	addi	sp,sp,68
   1080c:	f800283a 	ret
   10810:	00800084 	movi	r2,2
   10814:	18804f26 	beq	r3,r2,10954 <__mulsf3+0x1d4>
   10818:	d8800317 	ldw	r2,12(sp)
   1081c:	d8c00717 	ldw	r3,28(sp)
   10820:	8809883a 	mov	r4,r17
   10824:	10c4c03a 	cmpne	r2,r2,r3
   10828:	d8800315 	stw	r2,12(sp)
   1082c:	001159c0 	call	1159c <__pack_f>
   10830:	dfc01017 	ldw	ra,64(sp)
   10834:	dc400f17 	ldw	r17,60(sp)
   10838:	dc000e17 	ldw	r16,56(sp)
   1083c:	dec01104 	addi	sp,sp,68
   10840:	f800283a 	ret
   10844:	d8800517 	ldw	r2,20(sp)
   10848:	da000917 	ldw	r8,36(sp)
   1084c:	0013883a 	mov	r9,zero
   10850:	0007883a 	mov	r3,zero
   10854:	480f883a 	mov	r7,r9
   10858:	180b883a 	mov	r5,r3
   1085c:	400d883a 	mov	r6,r8
   10860:	1009883a 	mov	r4,r2
   10864:	00113f80 	call	113f8 <__muldi3>
   10868:	da800417 	ldw	r10,16(sp)
   1086c:	d9800817 	ldw	r6,32(sp)
   10870:	da400317 	ldw	r9,12(sp)
   10874:	52800084 	addi	r10,r10,2
   10878:	3295883a 	add	r10,r6,r10
   1087c:	d9800717 	ldw	r6,28(sp)
   10880:	180b883a 	mov	r5,r3
   10884:	180f883a 	mov	r7,r3
   10888:	4992c03a 	cmpne	r9,r9,r6
   1088c:	da400b15 	stw	r9,44(sp)
   10890:	1007883a 	mov	r3,r2
   10894:	da800c15 	stw	r10,48(sp)
   10898:	2800070e 	bge	r5,zero,108b8 <__mulsf3+0x138>
   1089c:	2880004c 	andi	r2,r5,1
   108a0:	1005003a 	cmpeq	r2,r2,zero
   108a4:	500d883a 	mov	r6,r10
   108a8:	10001e26 	beq	r2,zero,10924 <__mulsf3+0x1a4>
   108ac:	380ed07a 	srli	r7,r7,1
   108b0:	31800044 	addi	r6,r6,1
   108b4:	d9800c15 	stw	r6,48(sp)
   108b8:	01100034 	movhi	r4,16384
   108bc:	213fffc4 	addi	r4,r4,-1
   108c0:	21c00b36 	bltu	r4,r7,108f0 <__mulsf3+0x170>
   108c4:	d8800c17 	ldw	r2,48(sp)
   108c8:	00000206 	br	108d4 <__mulsf3+0x154>
   108cc:	18c7883a 	add	r3,r3,r3
   108d0:	21c00636 	bltu	r4,r7,108ec <__mulsf3+0x16c>
   108d4:	10bfffc4 	addi	r2,r2,-1
   108d8:	39cf883a 	add	r7,r7,r7
   108dc:	183ffb0e 	bge	r3,zero,108cc <__mulsf3+0x14c>
   108e0:	39c00054 	ori	r7,r7,1
   108e4:	18c7883a 	add	r3,r3,r3
   108e8:	21fffa2e 	bgeu	r4,r7,108d4 <__mulsf3+0x154>
   108ec:	d8800c15 	stw	r2,48(sp)
   108f0:	39001fcc 	andi	r4,r7,127
   108f4:	00801004 	movi	r2,64
   108f8:	20800d26 	beq	r4,r2,10930 <__mulsf3+0x1b0>
   108fc:	008000c4 	movi	r2,3
   10900:	d9000a04 	addi	r4,sp,40
   10904:	d9c00d15 	stw	r7,52(sp)
   10908:	d8800a15 	stw	r2,40(sp)
   1090c:	001159c0 	call	1159c <__pack_f>
   10910:	dfc01017 	ldw	ra,64(sp)
   10914:	dc400f17 	ldw	r17,60(sp)
   10918:	dc000e17 	ldw	r16,56(sp)
   1091c:	dec01104 	addi	sp,sp,68
   10920:	f800283a 	ret
   10924:	1804d07a 	srli	r2,r3,1
   10928:	10e00034 	orhi	r3,r2,32768
   1092c:	003fdf06 	br	108ac <__mulsf3+0x12c>
   10930:	3880200c 	andi	r2,r7,128
   10934:	103ff11e 	bne	r2,zero,108fc <__mulsf3+0x17c>
   10938:	183ff026 	beq	r3,zero,108fc <__mulsf3+0x17c>
   1093c:	3907883a 	add	r3,r7,r4
   10940:	00bfe004 	movi	r2,-128
   10944:	188e703a 	and	r7,r3,r2
   10948:	003fec06 	br	108fc <__mulsf3+0x17c>
   1094c:	00800084 	movi	r2,2
   10950:	20bfa41e 	bne	r4,r2,107e4 <__mulsf3+0x64>
   10954:	010000b4 	movhi	r4,2
   10958:	21240304 	addi	r4,r4,-28660
   1095c:	003fb306 	br	1082c <__mulsf3+0xac>

00010960 <__divsf3>:
   10960:	defff304 	addi	sp,sp,-52
   10964:	dc400b15 	stw	r17,44(sp)
   10968:	dc400204 	addi	r17,sp,8
   1096c:	dc000a15 	stw	r16,40(sp)
   10970:	d9000015 	stw	r4,0(sp)
   10974:	d9400115 	stw	r5,4(sp)
   10978:	d809883a 	mov	r4,sp
   1097c:	880b883a 	mov	r5,r17
   10980:	dc000604 	addi	r16,sp,24
   10984:	dfc00c15 	stw	ra,48(sp)
   10988:	00116fc0 	call	116fc <__unpack_f>
   1098c:	d9000104 	addi	r4,sp,4
   10990:	800b883a 	mov	r5,r16
   10994:	00116fc0 	call	116fc <__unpack_f>
   10998:	d9000217 	ldw	r4,8(sp)
   1099c:	00800044 	movi	r2,1
   109a0:	01800104 	movi	r6,4
   109a4:	11000a2e 	bgeu	r2,r4,109d0 <__divsf3+0x70>
   109a8:	d9400617 	ldw	r5,24(sp)
   109ac:	1140432e 	bgeu	r2,r5,10abc <__divsf3+0x15c>
   109b0:	d8800317 	ldw	r2,12(sp)
   109b4:	d8c00717 	ldw	r3,28(sp)
   109b8:	10c4f03a 	xor	r2,r2,r3
   109bc:	d8800315 	stw	r2,12(sp)
   109c0:	21800226 	beq	r4,r6,109cc <__divsf3+0x6c>
   109c4:	00800084 	movi	r2,2
   109c8:	2080101e 	bne	r4,r2,10a0c <__divsf3+0xac>
   109cc:	29000726 	beq	r5,r4,109ec <__divsf3+0x8c>
   109d0:	8809883a 	mov	r4,r17
   109d4:	001159c0 	call	1159c <__pack_f>
   109d8:	dfc00c17 	ldw	ra,48(sp)
   109dc:	dc400b17 	ldw	r17,44(sp)
   109e0:	dc000a17 	ldw	r16,40(sp)
   109e4:	dec00d04 	addi	sp,sp,52
   109e8:	f800283a 	ret
   109ec:	010000b4 	movhi	r4,2
   109f0:	21240304 	addi	r4,r4,-28660
   109f4:	001159c0 	call	1159c <__pack_f>
   109f8:	dfc00c17 	ldw	ra,48(sp)
   109fc:	dc400b17 	ldw	r17,44(sp)
   10a00:	dc000a17 	ldw	r16,40(sp)
   10a04:	dec00d04 	addi	sp,sp,52
   10a08:	f800283a 	ret
   10a0c:	29802d26 	beq	r5,r6,10ac4 <__divsf3+0x164>
   10a10:	28801a26 	beq	r5,r2,10a7c <__divsf3+0x11c>
   10a14:	d8c00417 	ldw	r3,16(sp)
   10a18:	d8800817 	ldw	r2,32(sp)
   10a1c:	d9000517 	ldw	r4,20(sp)
   10a20:	d9800917 	ldw	r6,36(sp)
   10a24:	1885c83a 	sub	r2,r3,r2
   10a28:	d8800415 	stw	r2,16(sp)
   10a2c:	2180032e 	bgeu	r4,r6,10a3c <__divsf3+0xdc>
   10a30:	10bfffc4 	addi	r2,r2,-1
   10a34:	d8800415 	stw	r2,16(sp)
   10a38:	2109883a 	add	r4,r4,r4
   10a3c:	01500034 	movhi	r5,16384
   10a40:	0007883a 	mov	r3,zero
   10a44:	0005883a 	mov	r2,zero
   10a48:	01c007c4 	movi	r7,31
   10a4c:	10800044 	addi	r2,r2,1
   10a50:	21800236 	bltu	r4,r6,10a5c <__divsf3+0xfc>
   10a54:	1946b03a 	or	r3,r3,r5
   10a58:	2189c83a 	sub	r4,r4,r6
   10a5c:	280ad07a 	srli	r5,r5,1
   10a60:	2109883a 	add	r4,r4,r4
   10a64:	11fff91e 	bne	r2,r7,10a4c <__divsf3+0xec>
   10a68:	19401fcc 	andi	r5,r3,127
   10a6c:	00801004 	movi	r2,64
   10a70:	28800a26 	beq	r5,r2,10a9c <__divsf3+0x13c>
   10a74:	d8c00515 	stw	r3,20(sp)
   10a78:	003fd506 	br	109d0 <__divsf3+0x70>
   10a7c:	8809883a 	mov	r4,r17
   10a80:	d9800215 	stw	r6,8(sp)
   10a84:	001159c0 	call	1159c <__pack_f>
   10a88:	dfc00c17 	ldw	ra,48(sp)
   10a8c:	dc400b17 	ldw	r17,44(sp)
   10a90:	dc000a17 	ldw	r16,40(sp)
   10a94:	dec00d04 	addi	sp,sp,52
   10a98:	f800283a 	ret
   10a9c:	1880200c 	andi	r2,r3,128
   10aa0:	103ff41e 	bne	r2,zero,10a74 <__divsf3+0x114>
   10aa4:	203ff326 	beq	r4,zero,10a74 <__divsf3+0x114>
   10aa8:	1947883a 	add	r3,r3,r5
   10aac:	00bfe004 	movi	r2,-128
   10ab0:	1886703a 	and	r3,r3,r2
   10ab4:	d8c00515 	stw	r3,20(sp)
   10ab8:	003fc506 	br	109d0 <__divsf3+0x70>
   10abc:	8009883a 	mov	r4,r16
   10ac0:	003fc406 	br	109d4 <__divsf3+0x74>
   10ac4:	8809883a 	mov	r4,r17
   10ac8:	d8000515 	stw	zero,20(sp)
   10acc:	d8000415 	stw	zero,16(sp)
   10ad0:	003fc006 	br	109d4 <__divsf3+0x74>

00010ad4 <__fixsfsi>:
   10ad4:	defffa04 	addi	sp,sp,-24
   10ad8:	d9000015 	stw	r4,0(sp)
   10adc:	d9400104 	addi	r5,sp,4
   10ae0:	d809883a 	mov	r4,sp
   10ae4:	dfc00515 	stw	ra,20(sp)
   10ae8:	00116fc0 	call	116fc <__unpack_f>
   10aec:	d8c00117 	ldw	r3,4(sp)
   10af0:	00800084 	movi	r2,2
   10af4:	1880041e 	bne	r3,r2,10b08 <__fixsfsi+0x34>
   10af8:	0005883a 	mov	r2,zero
   10afc:	dfc00517 	ldw	ra,20(sp)
   10b00:	dec00604 	addi	sp,sp,24
   10b04:	f800283a 	ret
   10b08:	00800044 	movi	r2,1
   10b0c:	10fffa2e 	bgeu	r2,r3,10af8 <__fixsfsi+0x24>
   10b10:	00800104 	movi	r2,4
   10b14:	18800426 	beq	r3,r2,10b28 <__fixsfsi+0x54>
   10b18:	d8800317 	ldw	r2,12(sp)
   10b1c:	103ff616 	blt	r2,zero,10af8 <__fixsfsi+0x24>
   10b20:	00c00784 	movi	r3,30
   10b24:	1880070e 	bge	r3,r2,10b44 <__fixsfsi+0x70>
   10b28:	d8800217 	ldw	r2,8(sp)
   10b2c:	10000c1e 	bne	r2,zero,10b60 <__fixsfsi+0x8c>
   10b30:	00a00034 	movhi	r2,32768
   10b34:	10bfffc4 	addi	r2,r2,-1
   10b38:	dfc00517 	ldw	ra,20(sp)
   10b3c:	dec00604 	addi	sp,sp,24
   10b40:	f800283a 	ret
   10b44:	1885c83a 	sub	r2,r3,r2
   10b48:	d9000217 	ldw	r4,8(sp)
   10b4c:	d8c00417 	ldw	r3,16(sp)
   10b50:	1884d83a 	srl	r2,r3,r2
   10b54:	203fe926 	beq	r4,zero,10afc <__fixsfsi+0x28>
   10b58:	0085c83a 	sub	r2,zero,r2
   10b5c:	003fe706 	br	10afc <__fixsfsi+0x28>
   10b60:	00a00034 	movhi	r2,32768
   10b64:	003fe506 	br	10afc <__fixsfsi+0x28>

00010b68 <__extendsfdf2>:
   10b68:	defff904 	addi	sp,sp,-28
   10b6c:	d9000115 	stw	r4,4(sp)
   10b70:	d9400204 	addi	r5,sp,8
   10b74:	d9000104 	addi	r4,sp,4
   10b78:	dfc00615 	stw	ra,24(sp)
   10b7c:	00116fc0 	call	116fc <__unpack_f>
   10b80:	d9c00517 	ldw	r7,20(sp)
   10b84:	0011883a 	mov	r8,zero
   10b88:	400697ba 	slli	r3,r8,30
   10b8c:	3812d0ba 	srli	r9,r7,2
   10b90:	380497ba 	slli	r2,r7,30
   10b94:	d9000217 	ldw	r4,8(sp)
   10b98:	d9400317 	ldw	r5,12(sp)
   10b9c:	d9800417 	ldw	r6,16(sp)
   10ba0:	48c6b03a 	or	r3,r9,r3
   10ba4:	100f883a 	mov	r7,r2
   10ba8:	d8c00015 	stw	r3,0(sp)
   10bac:	00111b80 	call	111b8 <__make_dp>
   10bb0:	dfc00617 	ldw	ra,24(sp)
   10bb4:	dec00704 	addi	sp,sp,28
   10bb8:	f800283a 	ret

00010bbc <_fpadd_parts>:
   10bbc:	defff804 	addi	sp,sp,-32
   10bc0:	dcc00315 	stw	r19,12(sp)
   10bc4:	2027883a 	mov	r19,r4
   10bc8:	21000017 	ldw	r4,0(r4)
   10bcc:	00c00044 	movi	r3,1
   10bd0:	dd400515 	stw	r21,20(sp)
   10bd4:	dd000415 	stw	r20,16(sp)
   10bd8:	ddc00715 	stw	r23,28(sp)
   10bdc:	dd800615 	stw	r22,24(sp)
   10be0:	dc800215 	stw	r18,8(sp)
   10be4:	dc400115 	stw	r17,4(sp)
   10be8:	dc000015 	stw	r16,0(sp)
   10bec:	282b883a 	mov	r21,r5
   10bf0:	3029883a 	mov	r20,r6
   10bf4:	1900632e 	bgeu	r3,r4,10d84 <_fpadd_parts+0x1c8>
   10bf8:	28800017 	ldw	r2,0(r5)
   10bfc:	1880812e 	bgeu	r3,r2,10e04 <_fpadd_parts+0x248>
   10c00:	00c00104 	movi	r3,4
   10c04:	20c0dc26 	beq	r4,r3,10f78 <_fpadd_parts+0x3bc>
   10c08:	10c07e26 	beq	r2,r3,10e04 <_fpadd_parts+0x248>
   10c0c:	00c00084 	movi	r3,2
   10c10:	10c06726 	beq	r2,r3,10db0 <_fpadd_parts+0x1f4>
   10c14:	20c07b26 	beq	r4,r3,10e04 <_fpadd_parts+0x248>
   10c18:	9dc00217 	ldw	r23,8(r19)
   10c1c:	28c00217 	ldw	r3,8(r5)
   10c20:	9c400317 	ldw	r17,12(r19)
   10c24:	2bc00317 	ldw	r15,12(r5)
   10c28:	b8cdc83a 	sub	r6,r23,r3
   10c2c:	9c800417 	ldw	r18,16(r19)
   10c30:	2c000417 	ldw	r16,16(r5)
   10c34:	3009883a 	mov	r4,r6
   10c38:	30009716 	blt	r6,zero,10e98 <_fpadd_parts+0x2dc>
   10c3c:	00800fc4 	movi	r2,63
   10c40:	11806b16 	blt	r2,r6,10df0 <_fpadd_parts+0x234>
   10c44:	0100a40e 	bge	zero,r4,10ed8 <_fpadd_parts+0x31c>
   10c48:	35bff804 	addi	r22,r6,-32
   10c4c:	b000bc16 	blt	r22,zero,10f40 <_fpadd_parts+0x384>
   10c50:	8596d83a 	srl	r11,r16,r22
   10c54:	0019883a 	mov	r12,zero
   10c58:	0013883a 	mov	r9,zero
   10c5c:	01000044 	movi	r4,1
   10c60:	0015883a 	mov	r10,zero
   10c64:	b000be16 	blt	r22,zero,10f60 <_fpadd_parts+0x3a4>
   10c68:	2590983a 	sll	r8,r4,r22
   10c6c:	000f883a 	mov	r7,zero
   10c70:	00bfffc4 	movi	r2,-1
   10c74:	3889883a 	add	r4,r7,r2
   10c78:	408b883a 	add	r5,r8,r2
   10c7c:	21cd803a 	cmpltu	r6,r4,r7
   10c80:	314b883a 	add	r5,r6,r5
   10c84:	7904703a 	and	r2,r15,r4
   10c88:	8146703a 	and	r3,r16,r5
   10c8c:	10c4b03a 	or	r2,r2,r3
   10c90:	10000226 	beq	r2,zero,10c9c <_fpadd_parts+0xe0>
   10c94:	02400044 	movi	r9,1
   10c98:	0015883a 	mov	r10,zero
   10c9c:	5a5eb03a 	or	r15,r11,r9
   10ca0:	62a0b03a 	or	r16,r12,r10
   10ca4:	99400117 	ldw	r5,4(r19)
   10ca8:	a8800117 	ldw	r2,4(r21)
   10cac:	28806e26 	beq	r5,r2,10e68 <_fpadd_parts+0x2ac>
   10cb0:	28006626 	beq	r5,zero,10e4c <_fpadd_parts+0x290>
   10cb4:	7c45c83a 	sub	r2,r15,r17
   10cb8:	7889803a 	cmpltu	r4,r15,r2
   10cbc:	8487c83a 	sub	r3,r16,r18
   10cc0:	1909c83a 	sub	r4,r3,r4
   10cc4:	100d883a 	mov	r6,r2
   10cc8:	200f883a 	mov	r7,r4
   10ccc:	38007716 	blt	r7,zero,10eac <_fpadd_parts+0x2f0>
   10cd0:	a5c00215 	stw	r23,8(r20)
   10cd4:	a1c00415 	stw	r7,16(r20)
   10cd8:	a0000115 	stw	zero,4(r20)
   10cdc:	a1800315 	stw	r6,12(r20)
   10ce0:	a2000317 	ldw	r8,12(r20)
   10ce4:	a2400417 	ldw	r9,16(r20)
   10ce8:	00bfffc4 	movi	r2,-1
   10cec:	408b883a 	add	r5,r8,r2
   10cf0:	2a09803a 	cmpltu	r4,r5,r8
   10cf4:	488d883a 	add	r6,r9,r2
   10cf8:	01c40034 	movhi	r7,4096
   10cfc:	39ffffc4 	addi	r7,r7,-1
   10d00:	218d883a 	add	r6,r4,r6
   10d04:	39801736 	bltu	r7,r6,10d64 <_fpadd_parts+0x1a8>
   10d08:	31c06526 	beq	r6,r7,10ea0 <_fpadd_parts+0x2e4>
   10d0c:	a3000217 	ldw	r12,8(r20)
   10d10:	4209883a 	add	r4,r8,r8
   10d14:	00bfffc4 	movi	r2,-1
   10d18:	220f803a 	cmpltu	r7,r4,r8
   10d1c:	4a4b883a 	add	r5,r9,r9
   10d20:	394f883a 	add	r7,r7,r5
   10d24:	2095883a 	add	r10,r4,r2
   10d28:	3897883a 	add	r11,r7,r2
   10d2c:	510d803a 	cmpltu	r6,r10,r4
   10d30:	6099883a 	add	r12,r12,r2
   10d34:	32d7883a 	add	r11,r6,r11
   10d38:	00840034 	movhi	r2,4096
   10d3c:	10bfffc4 	addi	r2,r2,-1
   10d40:	2011883a 	mov	r8,r4
   10d44:	3813883a 	mov	r9,r7
   10d48:	a1000315 	stw	r4,12(r20)
   10d4c:	a1c00415 	stw	r7,16(r20)
   10d50:	a3000215 	stw	r12,8(r20)
   10d54:	12c00336 	bltu	r2,r11,10d64 <_fpadd_parts+0x1a8>
   10d58:	58bfed1e 	bne	r11,r2,10d10 <_fpadd_parts+0x154>
   10d5c:	00bfff84 	movi	r2,-2
   10d60:	12bfeb2e 	bgeu	r2,r10,10d10 <_fpadd_parts+0x154>
   10d64:	a2800417 	ldw	r10,16(r20)
   10d68:	008000c4 	movi	r2,3
   10d6c:	00c80034 	movhi	r3,8192
   10d70:	18ffffc4 	addi	r3,r3,-1
   10d74:	a2400317 	ldw	r9,12(r20)
   10d78:	a0800015 	stw	r2,0(r20)
   10d7c:	1a802336 	bltu	r3,r10,10e0c <_fpadd_parts+0x250>
   10d80:	a027883a 	mov	r19,r20
   10d84:	9805883a 	mov	r2,r19
   10d88:	ddc00717 	ldw	r23,28(sp)
   10d8c:	dd800617 	ldw	r22,24(sp)
   10d90:	dd400517 	ldw	r21,20(sp)
   10d94:	dd000417 	ldw	r20,16(sp)
   10d98:	dcc00317 	ldw	r19,12(sp)
   10d9c:	dc800217 	ldw	r18,8(sp)
   10da0:	dc400117 	ldw	r17,4(sp)
   10da4:	dc000017 	ldw	r16,0(sp)
   10da8:	dec00804 	addi	sp,sp,32
   10dac:	f800283a 	ret
   10db0:	20fff41e 	bne	r4,r3,10d84 <_fpadd_parts+0x1c8>
   10db4:	31000015 	stw	r4,0(r6)
   10db8:	98800117 	ldw	r2,4(r19)
   10dbc:	30800115 	stw	r2,4(r6)
   10dc0:	98c00217 	ldw	r3,8(r19)
   10dc4:	30c00215 	stw	r3,8(r6)
   10dc8:	98800317 	ldw	r2,12(r19)
   10dcc:	30800315 	stw	r2,12(r6)
   10dd0:	98c00417 	ldw	r3,16(r19)
   10dd4:	30c00415 	stw	r3,16(r6)
   10dd8:	98800117 	ldw	r2,4(r19)
   10ddc:	28c00117 	ldw	r3,4(r5)
   10de0:	3027883a 	mov	r19,r6
   10de4:	10c4703a 	and	r2,r2,r3
   10de8:	30800115 	stw	r2,4(r6)
   10dec:	003fe506 	br	10d84 <_fpadd_parts+0x1c8>
   10df0:	1dc02616 	blt	r3,r23,10e8c <_fpadd_parts+0x2d0>
   10df4:	0023883a 	mov	r17,zero
   10df8:	182f883a 	mov	r23,r3
   10dfc:	0025883a 	mov	r18,zero
   10e00:	003fa806 	br	10ca4 <_fpadd_parts+0xe8>
   10e04:	a827883a 	mov	r19,r21
   10e08:	003fde06 	br	10d84 <_fpadd_parts+0x1c8>
   10e0c:	01800044 	movi	r6,1
   10e10:	500497fa 	slli	r2,r10,31
   10e14:	4808d07a 	srli	r4,r9,1
   10e18:	518ad83a 	srl	r5,r10,r6
   10e1c:	a2000217 	ldw	r8,8(r20)
   10e20:	1108b03a 	or	r4,r2,r4
   10e24:	0007883a 	mov	r3,zero
   10e28:	4984703a 	and	r2,r9,r6
   10e2c:	208cb03a 	or	r6,r4,r2
   10e30:	28ceb03a 	or	r7,r5,r3
   10e34:	42000044 	addi	r8,r8,1
   10e38:	a027883a 	mov	r19,r20
   10e3c:	a1c00415 	stw	r7,16(r20)
   10e40:	a2000215 	stw	r8,8(r20)
   10e44:	a1800315 	stw	r6,12(r20)
   10e48:	003fce06 	br	10d84 <_fpadd_parts+0x1c8>
   10e4c:	8bc5c83a 	sub	r2,r17,r15
   10e50:	8889803a 	cmpltu	r4,r17,r2
   10e54:	9407c83a 	sub	r3,r18,r16
   10e58:	1909c83a 	sub	r4,r3,r4
   10e5c:	100d883a 	mov	r6,r2
   10e60:	200f883a 	mov	r7,r4
   10e64:	003f9906 	br	10ccc <_fpadd_parts+0x110>
   10e68:	7c45883a 	add	r2,r15,r17
   10e6c:	13c9803a 	cmpltu	r4,r2,r15
   10e70:	8487883a 	add	r3,r16,r18
   10e74:	20c9883a 	add	r4,r4,r3
   10e78:	a1400115 	stw	r5,4(r20)
   10e7c:	a5c00215 	stw	r23,8(r20)
   10e80:	a0800315 	stw	r2,12(r20)
   10e84:	a1000415 	stw	r4,16(r20)
   10e88:	003fb606 	br	10d64 <_fpadd_parts+0x1a8>
   10e8c:	001f883a 	mov	r15,zero
   10e90:	0021883a 	mov	r16,zero
   10e94:	003f8306 	br	10ca4 <_fpadd_parts+0xe8>
   10e98:	018dc83a 	sub	r6,zero,r6
   10e9c:	003f6706 	br	10c3c <_fpadd_parts+0x80>
   10ea0:	00bfff84 	movi	r2,-2
   10ea4:	117faf36 	bltu	r2,r5,10d64 <_fpadd_parts+0x1a8>
   10ea8:	003f9806 	br	10d0c <_fpadd_parts+0x150>
   10eac:	0005883a 	mov	r2,zero
   10eb0:	1189c83a 	sub	r4,r2,r6
   10eb4:	1105803a 	cmpltu	r2,r2,r4
   10eb8:	01cbc83a 	sub	r5,zero,r7
   10ebc:	2885c83a 	sub	r2,r5,r2
   10ec0:	01800044 	movi	r6,1
   10ec4:	a1800115 	stw	r6,4(r20)
   10ec8:	a5c00215 	stw	r23,8(r20)
   10ecc:	a1000315 	stw	r4,12(r20)
   10ed0:	a0800415 	stw	r2,16(r20)
   10ed4:	003f8206 	br	10ce0 <_fpadd_parts+0x124>
   10ed8:	203f7226 	beq	r4,zero,10ca4 <_fpadd_parts+0xe8>
   10edc:	35bff804 	addi	r22,r6,-32
   10ee0:	b9af883a 	add	r23,r23,r6
   10ee4:	b0003116 	blt	r22,zero,10fac <_fpadd_parts+0x3f0>
   10ee8:	959ad83a 	srl	r13,r18,r22
   10eec:	001d883a 	mov	r14,zero
   10ef0:	000f883a 	mov	r7,zero
   10ef4:	01000044 	movi	r4,1
   10ef8:	0011883a 	mov	r8,zero
   10efc:	b0002516 	blt	r22,zero,10f94 <_fpadd_parts+0x3d8>
   10f00:	2594983a 	sll	r10,r4,r22
   10f04:	0013883a 	mov	r9,zero
   10f08:	00bfffc4 	movi	r2,-1
   10f0c:	4889883a 	add	r4,r9,r2
   10f10:	508b883a 	add	r5,r10,r2
   10f14:	224d803a 	cmpltu	r6,r4,r9
   10f18:	314b883a 	add	r5,r6,r5
   10f1c:	8904703a 	and	r2,r17,r4
   10f20:	9146703a 	and	r3,r18,r5
   10f24:	10c4b03a 	or	r2,r2,r3
   10f28:	10000226 	beq	r2,zero,10f34 <_fpadd_parts+0x378>
   10f2c:	01c00044 	movi	r7,1
   10f30:	0011883a 	mov	r8,zero
   10f34:	69e2b03a 	or	r17,r13,r7
   10f38:	7224b03a 	or	r18,r14,r8
   10f3c:	003f5906 	br	10ca4 <_fpadd_parts+0xe8>
   10f40:	8407883a 	add	r3,r16,r16
   10f44:	008007c4 	movi	r2,31
   10f48:	1185c83a 	sub	r2,r2,r6
   10f4c:	1886983a 	sll	r3,r3,r2
   10f50:	7996d83a 	srl	r11,r15,r6
   10f54:	8198d83a 	srl	r12,r16,r6
   10f58:	1ad6b03a 	or	r11,r3,r11
   10f5c:	003f3e06 	br	10c58 <_fpadd_parts+0x9c>
   10f60:	2006d07a 	srli	r3,r4,1
   10f64:	008007c4 	movi	r2,31
   10f68:	1185c83a 	sub	r2,r2,r6
   10f6c:	1890d83a 	srl	r8,r3,r2
   10f70:	218e983a 	sll	r7,r4,r6
   10f74:	003f3e06 	br	10c70 <_fpadd_parts+0xb4>
   10f78:	113f821e 	bne	r2,r4,10d84 <_fpadd_parts+0x1c8>
   10f7c:	28c00117 	ldw	r3,4(r5)
   10f80:	98800117 	ldw	r2,4(r19)
   10f84:	10ff7f26 	beq	r2,r3,10d84 <_fpadd_parts+0x1c8>
   10f88:	04c000b4 	movhi	r19,2
   10f8c:	9ce40704 	addi	r19,r19,-28644
   10f90:	003f7c06 	br	10d84 <_fpadd_parts+0x1c8>
   10f94:	2006d07a 	srli	r3,r4,1
   10f98:	008007c4 	movi	r2,31
   10f9c:	1185c83a 	sub	r2,r2,r6
   10fa0:	1894d83a 	srl	r10,r3,r2
   10fa4:	2192983a 	sll	r9,r4,r6
   10fa8:	003fd706 	br	10f08 <_fpadd_parts+0x34c>
   10fac:	9487883a 	add	r3,r18,r18
   10fb0:	008007c4 	movi	r2,31
   10fb4:	1185c83a 	sub	r2,r2,r6
   10fb8:	1886983a 	sll	r3,r3,r2
   10fbc:	899ad83a 	srl	r13,r17,r6
   10fc0:	919cd83a 	srl	r14,r18,r6
   10fc4:	1b5ab03a 	or	r13,r3,r13
   10fc8:	003fc906 	br	10ef0 <_fpadd_parts+0x334>

00010fcc <__subdf3>:
   10fcc:	deffea04 	addi	sp,sp,-88
   10fd0:	dcc01415 	stw	r19,80(sp)
   10fd4:	dcc00404 	addi	r19,sp,16
   10fd8:	2011883a 	mov	r8,r4
   10fdc:	2813883a 	mov	r9,r5
   10fe0:	dc401315 	stw	r17,76(sp)
   10fe4:	d809883a 	mov	r4,sp
   10fe8:	980b883a 	mov	r5,r19
   10fec:	dc400904 	addi	r17,sp,36
   10ff0:	dfc01515 	stw	ra,84(sp)
   10ff4:	da400115 	stw	r9,4(sp)
   10ff8:	d9c00315 	stw	r7,12(sp)
   10ffc:	da000015 	stw	r8,0(sp)
   11000:	d9800215 	stw	r6,8(sp)
   11004:	0011b040 	call	11b04 <__unpack_d>
   11008:	d9000204 	addi	r4,sp,8
   1100c:	880b883a 	mov	r5,r17
   11010:	0011b040 	call	11b04 <__unpack_d>
   11014:	d8800a17 	ldw	r2,40(sp)
   11018:	880b883a 	mov	r5,r17
   1101c:	9809883a 	mov	r4,r19
   11020:	d9800e04 	addi	r6,sp,56
   11024:	1080005c 	xori	r2,r2,1
   11028:	d8800a15 	stw	r2,40(sp)
   1102c:	0010bbc0 	call	10bbc <_fpadd_parts>
   11030:	1009883a 	mov	r4,r2
   11034:	00117f00 	call	117f0 <__pack_d>
   11038:	dfc01517 	ldw	ra,84(sp)
   1103c:	dcc01417 	ldw	r19,80(sp)
   11040:	dc401317 	ldw	r17,76(sp)
   11044:	dec01604 	addi	sp,sp,88
   11048:	f800283a 	ret

0001104c <__adddf3>:
   1104c:	deffea04 	addi	sp,sp,-88
   11050:	dcc01415 	stw	r19,80(sp)
   11054:	dcc00404 	addi	r19,sp,16
   11058:	2011883a 	mov	r8,r4
   1105c:	2813883a 	mov	r9,r5
   11060:	dc401315 	stw	r17,76(sp)
   11064:	d809883a 	mov	r4,sp
   11068:	980b883a 	mov	r5,r19
   1106c:	dc400904 	addi	r17,sp,36
   11070:	dfc01515 	stw	ra,84(sp)
   11074:	da400115 	stw	r9,4(sp)
   11078:	d9c00315 	stw	r7,12(sp)
   1107c:	da000015 	stw	r8,0(sp)
   11080:	d9800215 	stw	r6,8(sp)
   11084:	0011b040 	call	11b04 <__unpack_d>
   11088:	d9000204 	addi	r4,sp,8
   1108c:	880b883a 	mov	r5,r17
   11090:	0011b040 	call	11b04 <__unpack_d>
   11094:	d9800e04 	addi	r6,sp,56
   11098:	9809883a 	mov	r4,r19
   1109c:	880b883a 	mov	r5,r17
   110a0:	0010bbc0 	call	10bbc <_fpadd_parts>
   110a4:	1009883a 	mov	r4,r2
   110a8:	00117f00 	call	117f0 <__pack_d>
   110ac:	dfc01517 	ldw	ra,84(sp)
   110b0:	dcc01417 	ldw	r19,80(sp)
   110b4:	dc401317 	ldw	r17,76(sp)
   110b8:	dec01604 	addi	sp,sp,88
   110bc:	f800283a 	ret

000110c0 <__floatsidf>:
   110c0:	2006d7fa 	srli	r3,r4,31
   110c4:	defff604 	addi	sp,sp,-40
   110c8:	008000c4 	movi	r2,3
   110cc:	dfc00915 	stw	ra,36(sp)
   110d0:	dcc00815 	stw	r19,32(sp)
   110d4:	dc800715 	stw	r18,28(sp)
   110d8:	dc400615 	stw	r17,24(sp)
   110dc:	dc000515 	stw	r16,20(sp)
   110e0:	d8800015 	stw	r2,0(sp)
   110e4:	d8c00115 	stw	r3,4(sp)
   110e8:	20000f1e 	bne	r4,zero,11128 <__floatsidf+0x68>
   110ec:	00800084 	movi	r2,2
   110f0:	d8800015 	stw	r2,0(sp)
   110f4:	d809883a 	mov	r4,sp
   110f8:	00117f00 	call	117f0 <__pack_d>
   110fc:	1009883a 	mov	r4,r2
   11100:	180b883a 	mov	r5,r3
   11104:	2005883a 	mov	r2,r4
   11108:	2807883a 	mov	r3,r5
   1110c:	dfc00917 	ldw	ra,36(sp)
   11110:	dcc00817 	ldw	r19,32(sp)
   11114:	dc800717 	ldw	r18,28(sp)
   11118:	dc400617 	ldw	r17,24(sp)
   1111c:	dc000517 	ldw	r16,20(sp)
   11120:	dec00a04 	addi	sp,sp,40
   11124:	f800283a 	ret
   11128:	00800f04 	movi	r2,60
   1112c:	1807003a 	cmpeq	r3,r3,zero
   11130:	d8800215 	stw	r2,8(sp)
   11134:	18001126 	beq	r3,zero,1117c <__floatsidf+0xbc>
   11138:	0027883a 	mov	r19,zero
   1113c:	2025883a 	mov	r18,r4
   11140:	d9000315 	stw	r4,12(sp)
   11144:	dcc00415 	stw	r19,16(sp)
   11148:	001151c0 	call	1151c <__clzsi2>
   1114c:	11000744 	addi	r4,r2,29
   11150:	013fe80e 	bge	zero,r4,110f4 <__floatsidf+0x34>
   11154:	10bfff44 	addi	r2,r2,-3
   11158:	10000c16 	blt	r2,zero,1118c <__floatsidf+0xcc>
   1115c:	90a2983a 	sll	r17,r18,r2
   11160:	0021883a 	mov	r16,zero
   11164:	d8800217 	ldw	r2,8(sp)
   11168:	dc400415 	stw	r17,16(sp)
   1116c:	dc000315 	stw	r16,12(sp)
   11170:	1105c83a 	sub	r2,r2,r4
   11174:	d8800215 	stw	r2,8(sp)
   11178:	003fde06 	br	110f4 <__floatsidf+0x34>
   1117c:	00a00034 	movhi	r2,32768
   11180:	20800a26 	beq	r4,r2,111ac <__floatsidf+0xec>
   11184:	0109c83a 	sub	r4,zero,r4
   11188:	003feb06 	br	11138 <__floatsidf+0x78>
   1118c:	9006d07a 	srli	r3,r18,1
   11190:	008007c4 	movi	r2,31
   11194:	1105c83a 	sub	r2,r2,r4
   11198:	1886d83a 	srl	r3,r3,r2
   1119c:	9922983a 	sll	r17,r19,r4
   111a0:	9120983a 	sll	r16,r18,r4
   111a4:	1c62b03a 	or	r17,r3,r17
   111a8:	003fee06 	br	11164 <__floatsidf+0xa4>
   111ac:	0009883a 	mov	r4,zero
   111b0:	01707834 	movhi	r5,49632
   111b4:	003fd306 	br	11104 <__floatsidf+0x44>

000111b8 <__make_dp>:
   111b8:	defff904 	addi	sp,sp,-28
   111bc:	d8c00717 	ldw	r3,28(sp)
   111c0:	d9000015 	stw	r4,0(sp)
   111c4:	d809883a 	mov	r4,sp
   111c8:	dfc00515 	stw	ra,20(sp)
   111cc:	d9c00615 	stw	r7,24(sp)
   111d0:	d9400115 	stw	r5,4(sp)
   111d4:	d9800215 	stw	r6,8(sp)
   111d8:	d8c00415 	stw	r3,16(sp)
   111dc:	d9c00315 	stw	r7,12(sp)
   111e0:	00117f00 	call	117f0 <__pack_d>
   111e4:	dfc00517 	ldw	ra,20(sp)
   111e8:	dec00704 	addi	sp,sp,28
   111ec:	f800283a 	ret

000111f0 <__truncdfsf2>:
   111f0:	defff804 	addi	sp,sp,-32
   111f4:	2005883a 	mov	r2,r4
   111f8:	2807883a 	mov	r3,r5
   111fc:	d809883a 	mov	r4,sp
   11200:	d9400204 	addi	r5,sp,8
   11204:	d8c00115 	stw	r3,4(sp)
   11208:	d8800015 	stw	r2,0(sp)
   1120c:	dfc00715 	stw	ra,28(sp)
   11210:	0011b040 	call	11b04 <__unpack_d>
   11214:	d9c00517 	ldw	r7,20(sp)
   11218:	da000617 	ldw	r8,24(sp)
   1121c:	02d00034 	movhi	r11,16384
   11220:	5affffc4 	addi	r11,r11,-1
   11224:	3812d7ba 	srli	r9,r7,30
   11228:	401a90ba 	slli	r13,r8,2
   1122c:	3ac4703a 	and	r2,r7,r11
   11230:	0007883a 	mov	r3,zero
   11234:	6a52b03a 	or	r9,r13,r9
   11238:	10c4b03a 	or	r2,r2,r3
   1123c:	d9000217 	ldw	r4,8(sp)
   11240:	d9400317 	ldw	r5,12(sp)
   11244:	d9800417 	ldw	r6,16(sp)
   11248:	480f883a 	mov	r7,r9
   1124c:	10000126 	beq	r2,zero,11254 <__truncdfsf2+0x64>
   11250:	49c00054 	ori	r7,r9,1
   11254:	00117c40 	call	117c4 <__make_fp>
   11258:	dfc00717 	ldw	ra,28(sp)
   1125c:	dec00804 	addi	sp,sp,32
   11260:	f800283a 	ret

00011264 <__floatunsidf>:
   11264:	defff204 	addi	sp,sp,-56
   11268:	dfc00d15 	stw	ra,52(sp)
   1126c:	ddc00c15 	stw	r23,48(sp)
   11270:	dd800b15 	stw	r22,44(sp)
   11274:	dd400a15 	stw	r21,40(sp)
   11278:	dd000915 	stw	r20,36(sp)
   1127c:	dcc00815 	stw	r19,32(sp)
   11280:	dc800715 	stw	r18,28(sp)
   11284:	dc400615 	stw	r17,24(sp)
   11288:	dc000515 	stw	r16,20(sp)
   1128c:	d8000115 	stw	zero,4(sp)
   11290:	20000f1e 	bne	r4,zero,112d0 <__floatunsidf+0x6c>
   11294:	00800084 	movi	r2,2
   11298:	d8800015 	stw	r2,0(sp)
   1129c:	d809883a 	mov	r4,sp
   112a0:	00117f00 	call	117f0 <__pack_d>
   112a4:	dfc00d17 	ldw	ra,52(sp)
   112a8:	ddc00c17 	ldw	r23,48(sp)
   112ac:	dd800b17 	ldw	r22,44(sp)
   112b0:	dd400a17 	ldw	r21,40(sp)
   112b4:	dd000917 	ldw	r20,36(sp)
   112b8:	dcc00817 	ldw	r19,32(sp)
   112bc:	dc800717 	ldw	r18,28(sp)
   112c0:	dc400617 	ldw	r17,24(sp)
   112c4:	dc000517 	ldw	r16,20(sp)
   112c8:	dec00e04 	addi	sp,sp,56
   112cc:	f800283a 	ret
   112d0:	008000c4 	movi	r2,3
   112d4:	00c00f04 	movi	r3,60
   112d8:	002f883a 	mov	r23,zero
   112dc:	202d883a 	mov	r22,r4
   112e0:	d8800015 	stw	r2,0(sp)
   112e4:	d8c00215 	stw	r3,8(sp)
   112e8:	d9000315 	stw	r4,12(sp)
   112ec:	ddc00415 	stw	r23,16(sp)
   112f0:	001151c0 	call	1151c <__clzsi2>
   112f4:	12400744 	addi	r9,r2,29
   112f8:	48000b16 	blt	r9,zero,11328 <__floatunsidf+0xc4>
   112fc:	483fe726 	beq	r9,zero,1129c <__floatunsidf+0x38>
   11300:	10bfff44 	addi	r2,r2,-3
   11304:	10002e16 	blt	r2,zero,113c0 <__floatunsidf+0x15c>
   11308:	b0a2983a 	sll	r17,r22,r2
   1130c:	0021883a 	mov	r16,zero
   11310:	d8800217 	ldw	r2,8(sp)
   11314:	dc400415 	stw	r17,16(sp)
   11318:	dc000315 	stw	r16,12(sp)
   1131c:	1245c83a 	sub	r2,r2,r9
   11320:	d8800215 	stw	r2,8(sp)
   11324:	003fdd06 	br	1129c <__floatunsidf+0x38>
   11328:	0255c83a 	sub	r10,zero,r9
   1132c:	51bff804 	addi	r6,r10,-32
   11330:	30001b16 	blt	r6,zero,113a0 <__floatunsidf+0x13c>
   11334:	b9a8d83a 	srl	r20,r23,r6
   11338:	002b883a 	mov	r21,zero
   1133c:	000f883a 	mov	r7,zero
   11340:	01000044 	movi	r4,1
   11344:	0011883a 	mov	r8,zero
   11348:	30002516 	blt	r6,zero,113e0 <__floatunsidf+0x17c>
   1134c:	21a6983a 	sll	r19,r4,r6
   11350:	0025883a 	mov	r18,zero
   11354:	00bfffc4 	movi	r2,-1
   11358:	9089883a 	add	r4,r18,r2
   1135c:	988b883a 	add	r5,r19,r2
   11360:	248d803a 	cmpltu	r6,r4,r18
   11364:	314b883a 	add	r5,r6,r5
   11368:	b104703a 	and	r2,r22,r4
   1136c:	b946703a 	and	r3,r23,r5
   11370:	10c4b03a 	or	r2,r2,r3
   11374:	10000226 	beq	r2,zero,11380 <__floatunsidf+0x11c>
   11378:	01c00044 	movi	r7,1
   1137c:	0011883a 	mov	r8,zero
   11380:	d9000217 	ldw	r4,8(sp)
   11384:	a1c4b03a 	or	r2,r20,r7
   11388:	aa06b03a 	or	r3,r21,r8
   1138c:	2249c83a 	sub	r4,r4,r9
   11390:	d8c00415 	stw	r3,16(sp)
   11394:	d9000215 	stw	r4,8(sp)
   11398:	d8800315 	stw	r2,12(sp)
   1139c:	003fbf06 	br	1129c <__floatunsidf+0x38>
   113a0:	bdc7883a 	add	r3,r23,r23
   113a4:	008007c4 	movi	r2,31
   113a8:	1285c83a 	sub	r2,r2,r10
   113ac:	1886983a 	sll	r3,r3,r2
   113b0:	b2a8d83a 	srl	r20,r22,r10
   113b4:	baaad83a 	srl	r21,r23,r10
   113b8:	1d28b03a 	or	r20,r3,r20
   113bc:	003fdf06 	br	1133c <__floatunsidf+0xd8>
   113c0:	b006d07a 	srli	r3,r22,1
   113c4:	008007c4 	movi	r2,31
   113c8:	1245c83a 	sub	r2,r2,r9
   113cc:	1886d83a 	srl	r3,r3,r2
   113d0:	ba62983a 	sll	r17,r23,r9
   113d4:	b260983a 	sll	r16,r22,r9
   113d8:	1c62b03a 	or	r17,r3,r17
   113dc:	003fcc06 	br	11310 <__floatunsidf+0xac>
   113e0:	2006d07a 	srli	r3,r4,1
   113e4:	008007c4 	movi	r2,31
   113e8:	1285c83a 	sub	r2,r2,r10
   113ec:	18a6d83a 	srl	r19,r3,r2
   113f0:	22a4983a 	sll	r18,r4,r10
   113f4:	003fd706 	br	11354 <__floatunsidf+0xf0>

000113f8 <__muldi3>:
   113f8:	defff204 	addi	sp,sp,-56
   113fc:	df000c15 	stw	fp,48(sp)
   11400:	3038d43a 	srli	fp,r6,16
   11404:	dd000815 	stw	r20,32(sp)
   11408:	dc400515 	stw	r17,20(sp)
   1140c:	2028d43a 	srli	r20,r4,16
   11410:	247fffcc 	andi	r17,r4,65535
   11414:	dc000415 	stw	r16,16(sp)
   11418:	343fffcc 	andi	r16,r6,65535
   1141c:	dcc00715 	stw	r19,28(sp)
   11420:	d9000015 	stw	r4,0(sp)
   11424:	2827883a 	mov	r19,r5
   11428:	8809883a 	mov	r4,r17
   1142c:	d9400115 	stw	r5,4(sp)
   11430:	800b883a 	mov	r5,r16
   11434:	d9800215 	stw	r6,8(sp)
   11438:	dfc00d15 	stw	ra,52(sp)
   1143c:	d9c00315 	stw	r7,12(sp)
   11440:	dd800a15 	stw	r22,40(sp)
   11444:	dd400915 	stw	r21,36(sp)
   11448:	302d883a 	mov	r22,r6
   1144c:	ddc00b15 	stw	r23,44(sp)
   11450:	dc800615 	stw	r18,24(sp)
   11454:	0011c3c0 	call	11c3c <__mulsi3>
   11458:	8809883a 	mov	r4,r17
   1145c:	e00b883a 	mov	r5,fp
   11460:	102b883a 	mov	r21,r2
   11464:	0011c3c0 	call	11c3c <__mulsi3>
   11468:	800b883a 	mov	r5,r16
   1146c:	a009883a 	mov	r4,r20
   11470:	1023883a 	mov	r17,r2
   11474:	0011c3c0 	call	11c3c <__mulsi3>
   11478:	a009883a 	mov	r4,r20
   1147c:	e00b883a 	mov	r5,fp
   11480:	1021883a 	mov	r16,r2
   11484:	0011c3c0 	call	11c3c <__mulsi3>
   11488:	a8ffffcc 	andi	r3,r21,65535
   1148c:	a82ad43a 	srli	r21,r21,16
   11490:	8c23883a 	add	r17,r17,r16
   11494:	1011883a 	mov	r8,r2
   11498:	ac6b883a 	add	r21,r21,r17
   1149c:	a804943a 	slli	r2,r21,16
   114a0:	b009883a 	mov	r4,r22
   114a4:	980b883a 	mov	r5,r19
   114a8:	10c7883a 	add	r3,r2,r3
   114ac:	a812d43a 	srli	r9,r21,16
   114b0:	180d883a 	mov	r6,r3
   114b4:	ac00022e 	bgeu	r21,r16,114c0 <__muldi3+0xc8>
   114b8:	00800074 	movhi	r2,1
   114bc:	4091883a 	add	r8,r8,r2
   114c0:	4267883a 	add	r19,r8,r9
   114c4:	302d883a 	mov	r22,r6
   114c8:	0011c3c0 	call	11c3c <__mulsi3>
   114cc:	d9400317 	ldw	r5,12(sp)
   114d0:	d9000017 	ldw	r4,0(sp)
   114d4:	1023883a 	mov	r17,r2
   114d8:	0011c3c0 	call	11c3c <__mulsi3>
   114dc:	14cb883a 	add	r5,r2,r19
   114e0:	894b883a 	add	r5,r17,r5
   114e4:	b005883a 	mov	r2,r22
   114e8:	2807883a 	mov	r3,r5
   114ec:	dfc00d17 	ldw	ra,52(sp)
   114f0:	df000c17 	ldw	fp,48(sp)
   114f4:	ddc00b17 	ldw	r23,44(sp)
   114f8:	dd800a17 	ldw	r22,40(sp)
   114fc:	dd400917 	ldw	r21,36(sp)
   11500:	dd000817 	ldw	r20,32(sp)
   11504:	dcc00717 	ldw	r19,28(sp)
   11508:	dc800617 	ldw	r18,24(sp)
   1150c:	dc400517 	ldw	r17,20(sp)
   11510:	dc000417 	ldw	r16,16(sp)
   11514:	dec00e04 	addi	sp,sp,56
   11518:	f800283a 	ret

0001151c <__clzsi2>:
   1151c:	00bfffd4 	movui	r2,65535
   11520:	11000e36 	bltu	r2,r4,1155c <__clzsi2+0x40>
   11524:	00803fc4 	movi	r2,255
   11528:	01400204 	movi	r5,8
   1152c:	0007883a 	mov	r3,zero
   11530:	11001036 	bltu	r2,r4,11574 <__clzsi2+0x58>
   11534:	000b883a 	mov	r5,zero
   11538:	20c6d83a 	srl	r3,r4,r3
   1153c:	008000b4 	movhi	r2,2
   11540:	10a40c04 	addi	r2,r2,-28624
   11544:	1887883a 	add	r3,r3,r2
   11548:	18800003 	ldbu	r2,0(r3)
   1154c:	00c00804 	movi	r3,32
   11550:	2885883a 	add	r2,r5,r2
   11554:	1885c83a 	sub	r2,r3,r2
   11558:	f800283a 	ret
   1155c:	01400404 	movi	r5,16
   11560:	00804034 	movhi	r2,256
   11564:	10bfffc4 	addi	r2,r2,-1
   11568:	2807883a 	mov	r3,r5
   1156c:	113ff22e 	bgeu	r2,r4,11538 <__clzsi2+0x1c>
   11570:	01400604 	movi	r5,24
   11574:	2807883a 	mov	r3,r5
   11578:	20c6d83a 	srl	r3,r4,r3
   1157c:	008000b4 	movhi	r2,2
   11580:	10a40c04 	addi	r2,r2,-28624
   11584:	1887883a 	add	r3,r3,r2
   11588:	18800003 	ldbu	r2,0(r3)
   1158c:	00c00804 	movi	r3,32
   11590:	2885883a 	add	r2,r5,r2
   11594:	1885c83a 	sub	r2,r3,r2
   11598:	f800283a 	ret

0001159c <__pack_f>:
   1159c:	20c00017 	ldw	r3,0(r4)
   115a0:	01c00044 	movi	r7,1
   115a4:	21800317 	ldw	r6,12(r4)
   115a8:	21400117 	ldw	r5,4(r4)
   115ac:	38c02d2e 	bgeu	r7,r3,11664 <__pack_f+0xc8>
   115b0:	00800104 	movi	r2,4
   115b4:	18802826 	beq	r3,r2,11658 <__pack_f+0xbc>
   115b8:	00800084 	movi	r2,2
   115bc:	18800126 	beq	r3,r2,115c4 <__pack_f+0x28>
   115c0:	3000101e 	bne	r6,zero,11604 <__pack_f+0x68>
   115c4:	000d883a 	mov	r6,zero
   115c8:	0007883a 	mov	r3,zero
   115cc:	19003fcc 	andi	r4,r3,255
   115d0:	200895fa 	slli	r4,r4,23
   115d4:	00c02034 	movhi	r3,128
   115d8:	18ffffc4 	addi	r3,r3,-1
   115dc:	30c6703a 	and	r3,r6,r3
   115e0:	10a0002c 	andhi	r2,r2,32768
   115e4:	10c4b03a 	or	r2,r2,r3
   115e8:	280a97fa 	slli	r5,r5,31
   115ec:	1104b03a 	or	r2,r2,r4
   115f0:	00e00034 	movhi	r3,32768
   115f4:	18ffffc4 	addi	r3,r3,-1
   115f8:	10c4703a 	and	r2,r2,r3
   115fc:	1144b03a 	or	r2,r2,r5
   11600:	f800283a 	ret
   11604:	21000217 	ldw	r4,8(r4)
   11608:	00bfe084 	movi	r2,-126
   1160c:	20801b16 	blt	r4,r2,1167c <__pack_f+0xe0>
   11610:	00801fc4 	movi	r2,127
   11614:	11001016 	blt	r2,r4,11658 <__pack_f+0xbc>
   11618:	308e703a 	and	r7,r6,r2
   1161c:	2087883a 	add	r3,r4,r2
   11620:	00801004 	movi	r2,64
   11624:	38800526 	beq	r7,r2,1163c <__pack_f+0xa0>
   11628:	31800fc4 	addi	r6,r6,63
   1162c:	30000716 	blt	r6,zero,1164c <__pack_f+0xb0>
   11630:	300490ba 	slli	r2,r6,2
   11634:	100cd27a 	srli	r6,r2,9
   11638:	003fe406 	br	115cc <__pack_f+0x30>
   1163c:	3080200c 	andi	r2,r6,128
   11640:	103ffa26 	beq	r2,zero,1162c <__pack_f+0x90>
   11644:	31cd883a 	add	r6,r6,r7
   11648:	003ff806 	br	1162c <__pack_f+0x90>
   1164c:	300cd07a 	srli	r6,r6,1
   11650:	18c00044 	addi	r3,r3,1
   11654:	003ff606 	br	11630 <__pack_f+0x94>
   11658:	000d883a 	mov	r6,zero
   1165c:	00ffffc4 	movi	r3,-1
   11660:	003fda06 	br	115cc <__pack_f+0x30>
   11664:	31800434 	orhi	r6,r6,16
   11668:	00802034 	movhi	r2,128
   1166c:	10bfffc4 	addi	r2,r2,-1
   11670:	308c703a 	and	r6,r6,r2
   11674:	00ffffc4 	movi	r3,-1
   11678:	003fd406 	br	115cc <__pack_f+0x30>
   1167c:	1109c83a 	sub	r4,r2,r4
   11680:	00800644 	movi	r2,25
   11684:	11001216 	blt	r2,r4,116d0 <__pack_f+0x134>
   11688:	3904983a 	sll	r2,r7,r4
   1168c:	3106d83a 	srl	r3,r6,r4
   11690:	10bfffc4 	addi	r2,r2,-1
   11694:	3084703a 	and	r2,r6,r2
   11698:	1004c03a 	cmpne	r2,r2,zero
   1169c:	1886b03a 	or	r3,r3,r2
   116a0:	19001fcc 	andi	r4,r3,127
   116a4:	00801004 	movi	r2,64
   116a8:	20800c26 	beq	r4,r2,116dc <__pack_f+0x140>
   116ac:	18c00fc4 	addi	r3,r3,63
   116b0:	00900034 	movhi	r2,16384
   116b4:	10bfffc4 	addi	r2,r2,-1
   116b8:	180cd1fa 	srli	r6,r3,7
   116bc:	10c7803a 	cmpltu	r3,r2,r3
   116c0:	00802034 	movhi	r2,128
   116c4:	10bfffc4 	addi	r2,r2,-1
   116c8:	308c703a 	and	r6,r6,r2
   116cc:	003fbf06 	br	115cc <__pack_f+0x30>
   116d0:	0007883a 	mov	r3,zero
   116d4:	000d883a 	mov	r6,zero
   116d8:	003ff906 	br	116c0 <__pack_f+0x124>
   116dc:	1880200c 	andi	r2,r3,128
   116e0:	10000126 	beq	r2,zero,116e8 <__pack_f+0x14c>
   116e4:	1907883a 	add	r3,r3,r4
   116e8:	180cd1fa 	srli	r6,r3,7
   116ec:	00900034 	movhi	r2,16384
   116f0:	10bfffc4 	addi	r2,r2,-1
   116f4:	10c7803a 	cmpltu	r3,r2,r3
   116f8:	003ff106 	br	116c0 <__pack_f+0x124>

000116fc <__unpack_f>:
   116fc:	21800017 	ldw	r6,0(r4)
   11700:	00c02034 	movhi	r3,128
   11704:	18ffffc4 	addi	r3,r3,-1
   11708:	3004d5fa 	srli	r2,r6,23
   1170c:	3008d7fa 	srli	r4,r6,31
   11710:	30ce703a 	and	r7,r6,r3
   11714:	10c03fcc 	andi	r3,r2,255
   11718:	29000115 	stw	r4,4(r5)
   1171c:	1800131e 	bne	r3,zero,1176c <__unpack_f+0x70>
   11720:	38000f26 	beq	r7,zero,11760 <__unpack_f+0x64>
   11724:	380691fa 	slli	r3,r7,7
   11728:	01bfe084 	movi	r6,-126
   1172c:	008000c4 	movi	r2,3
   11730:	01100034 	movhi	r4,16384
   11734:	213fffc4 	addi	r4,r4,-1
   11738:	28800015 	stw	r2,0(r5)
   1173c:	29800215 	stw	r6,8(r5)
   11740:	20c00536 	bltu	r4,r3,11758 <__unpack_f+0x5c>
   11744:	3005883a 	mov	r2,r6
   11748:	18c7883a 	add	r3,r3,r3
   1174c:	10bfffc4 	addi	r2,r2,-1
   11750:	20fffd2e 	bgeu	r4,r3,11748 <__unpack_f+0x4c>
   11754:	28800215 	stw	r2,8(r5)
   11758:	28c00315 	stw	r3,12(r5)
   1175c:	f800283a 	ret
   11760:	00800084 	movi	r2,2
   11764:	28800015 	stw	r2,0(r5)
   11768:	f800283a 	ret
   1176c:	00803fc4 	movi	r2,255
   11770:	18800826 	beq	r3,r2,11794 <__unpack_f+0x98>
   11774:	380491fa 	slli	r2,r7,7
   11778:	18ffe044 	addi	r3,r3,-127
   1177c:	28c00215 	stw	r3,8(r5)
   11780:	10900034 	orhi	r2,r2,16384
   11784:	28800315 	stw	r2,12(r5)
   11788:	008000c4 	movi	r2,3
   1178c:	28800015 	stw	r2,0(r5)
   11790:	f800283a 	ret
   11794:	3800031e 	bne	r7,zero,117a4 <__unpack_f+0xa8>
   11798:	00800104 	movi	r2,4
   1179c:	28800015 	stw	r2,0(r5)
   117a0:	f800283a 	ret
   117a4:	3080042c 	andhi	r2,r6,16
   117a8:	10000426 	beq	r2,zero,117bc <__unpack_f+0xc0>
   117ac:	00800044 	movi	r2,1
   117b0:	28800015 	stw	r2,0(r5)
   117b4:	29c00315 	stw	r7,12(r5)
   117b8:	f800283a 	ret
   117bc:	28000015 	stw	zero,0(r5)
   117c0:	003ffc06 	br	117b4 <__unpack_f+0xb8>

000117c4 <__make_fp>:
   117c4:	defffb04 	addi	sp,sp,-20
   117c8:	d9000015 	stw	r4,0(sp)
   117cc:	d809883a 	mov	r4,sp
   117d0:	dfc00415 	stw	ra,16(sp)
   117d4:	d9400115 	stw	r5,4(sp)
   117d8:	d9800215 	stw	r6,8(sp)
   117dc:	d9c00315 	stw	r7,12(sp)
   117e0:	001159c0 	call	1159c <__pack_f>
   117e4:	dfc00417 	ldw	ra,16(sp)
   117e8:	dec00504 	addi	sp,sp,20
   117ec:	f800283a 	ret

000117f0 <__pack_d>:
   117f0:	20c00017 	ldw	r3,0(r4)
   117f4:	defffd04 	addi	sp,sp,-12
   117f8:	dc000015 	stw	r16,0(sp)
   117fc:	dc800215 	stw	r18,8(sp)
   11800:	dc400115 	stw	r17,4(sp)
   11804:	00800044 	movi	r2,1
   11808:	22000317 	ldw	r8,12(r4)
   1180c:	001f883a 	mov	r15,zero
   11810:	22400417 	ldw	r9,16(r4)
   11814:	24000117 	ldw	r16,4(r4)
   11818:	10c0552e 	bgeu	r2,r3,11970 <__pack_d+0x180>
   1181c:	00800104 	movi	r2,4
   11820:	18804f26 	beq	r3,r2,11960 <__pack_d+0x170>
   11824:	00800084 	movi	r2,2
   11828:	18800226 	beq	r3,r2,11834 <__pack_d+0x44>
   1182c:	4244b03a 	or	r2,r8,r9
   11830:	10001a1e 	bne	r2,zero,1189c <__pack_d+0xac>
   11834:	000d883a 	mov	r6,zero
   11838:	000f883a 	mov	r7,zero
   1183c:	0011883a 	mov	r8,zero
   11840:	00800434 	movhi	r2,16
   11844:	10bfffc4 	addi	r2,r2,-1
   11848:	301d883a 	mov	r14,r6
   1184c:	3884703a 	and	r2,r7,r2
   11850:	400a953a 	slli	r5,r8,20
   11854:	79bffc2c 	andhi	r6,r15,65520
   11858:	308cb03a 	or	r6,r6,r2
   1185c:	00e00434 	movhi	r3,32784
   11860:	18ffffc4 	addi	r3,r3,-1
   11864:	800497fa 	slli	r2,r16,31
   11868:	30c6703a 	and	r3,r6,r3
   1186c:	1946b03a 	or	r3,r3,r5
   11870:	01600034 	movhi	r5,32768
   11874:	297fffc4 	addi	r5,r5,-1
   11878:	194a703a 	and	r5,r3,r5
   1187c:	288ab03a 	or	r5,r5,r2
   11880:	2807883a 	mov	r3,r5
   11884:	7005883a 	mov	r2,r14
   11888:	dc800217 	ldw	r18,8(sp)
   1188c:	dc400117 	ldw	r17,4(sp)
   11890:	dc000017 	ldw	r16,0(sp)
   11894:	dec00304 	addi	sp,sp,12
   11898:	f800283a 	ret
   1189c:	21000217 	ldw	r4,8(r4)
   118a0:	00bf0084 	movi	r2,-1022
   118a4:	20803f16 	blt	r4,r2,119a4 <__pack_d+0x1b4>
   118a8:	0080ffc4 	movi	r2,1023
   118ac:	11002c16 	blt	r2,r4,11960 <__pack_d+0x170>
   118b0:	00803fc4 	movi	r2,255
   118b4:	408c703a 	and	r6,r8,r2
   118b8:	00802004 	movi	r2,128
   118bc:	0007883a 	mov	r3,zero
   118c0:	000f883a 	mov	r7,zero
   118c4:	2280ffc4 	addi	r10,r4,1023
   118c8:	30801e26 	beq	r6,r2,11944 <__pack_d+0x154>
   118cc:	00801fc4 	movi	r2,127
   118d0:	4089883a 	add	r4,r8,r2
   118d4:	220d803a 	cmpltu	r6,r4,r8
   118d8:	324d883a 	add	r6,r6,r9
   118dc:	2011883a 	mov	r8,r4
   118e0:	3013883a 	mov	r9,r6
   118e4:	00880034 	movhi	r2,8192
   118e8:	10bfffc4 	addi	r2,r2,-1
   118ec:	12400d36 	bltu	r2,r9,11924 <__pack_d+0x134>
   118f0:	4804963a 	slli	r2,r9,24
   118f4:	400cd23a 	srli	r6,r8,8
   118f8:	480ed23a 	srli	r7,r9,8
   118fc:	013fffc4 	movi	r4,-1
   11900:	118cb03a 	or	r6,r2,r6
   11904:	01400434 	movhi	r5,16
   11908:	297fffc4 	addi	r5,r5,-1
   1190c:	3104703a 	and	r2,r6,r4
   11910:	3946703a 	and	r3,r7,r5
   11914:	5201ffcc 	andi	r8,r10,2047
   11918:	100d883a 	mov	r6,r2
   1191c:	180f883a 	mov	r7,r3
   11920:	003fc706 	br	11840 <__pack_d+0x50>
   11924:	480897fa 	slli	r4,r9,31
   11928:	4004d07a 	srli	r2,r8,1
   1192c:	4806d07a 	srli	r3,r9,1
   11930:	52800044 	addi	r10,r10,1
   11934:	2084b03a 	or	r2,r4,r2
   11938:	1011883a 	mov	r8,r2
   1193c:	1813883a 	mov	r9,r3
   11940:	003feb06 	br	118f0 <__pack_d+0x100>
   11944:	383fe11e 	bne	r7,zero,118cc <__pack_d+0xdc>
   11948:	01004004 	movi	r4,256
   1194c:	4104703a 	and	r2,r8,r4
   11950:	10c4b03a 	or	r2,r2,r3
   11954:	103fe326 	beq	r2,zero,118e4 <__pack_d+0xf4>
   11958:	3005883a 	mov	r2,r6
   1195c:	003fdc06 	br	118d0 <__pack_d+0xe0>
   11960:	000d883a 	mov	r6,zero
   11964:	000f883a 	mov	r7,zero
   11968:	0201ffc4 	movi	r8,2047
   1196c:	003fb406 	br	11840 <__pack_d+0x50>
   11970:	0005883a 	mov	r2,zero
   11974:	00c00234 	movhi	r3,8
   11978:	408cb03a 	or	r6,r8,r2
   1197c:	48ceb03a 	or	r7,r9,r3
   11980:	013fffc4 	movi	r4,-1
   11984:	01400434 	movhi	r5,16
   11988:	297fffc4 	addi	r5,r5,-1
   1198c:	3104703a 	and	r2,r6,r4
   11990:	3946703a 	and	r3,r7,r5
   11994:	100d883a 	mov	r6,r2
   11998:	180f883a 	mov	r7,r3
   1199c:	0201ffc4 	movi	r8,2047
   119a0:	003fa706 	br	11840 <__pack_d+0x50>
   119a4:	1109c83a 	sub	r4,r2,r4
   119a8:	00800e04 	movi	r2,56
   119ac:	11004316 	blt	r2,r4,11abc <__pack_d+0x2cc>
   119b0:	21fff804 	addi	r7,r4,-32
   119b4:	38004516 	blt	r7,zero,11acc <__pack_d+0x2dc>
   119b8:	49d8d83a 	srl	r12,r9,r7
   119bc:	001b883a 	mov	r13,zero
   119c0:	0023883a 	mov	r17,zero
   119c4:	01400044 	movi	r5,1
   119c8:	0025883a 	mov	r18,zero
   119cc:	38004716 	blt	r7,zero,11aec <__pack_d+0x2fc>
   119d0:	29d6983a 	sll	r11,r5,r7
   119d4:	0015883a 	mov	r10,zero
   119d8:	00bfffc4 	movi	r2,-1
   119dc:	5089883a 	add	r4,r10,r2
   119e0:	588b883a 	add	r5,r11,r2
   119e4:	228d803a 	cmpltu	r6,r4,r10
   119e8:	314b883a 	add	r5,r6,r5
   119ec:	4104703a 	and	r2,r8,r4
   119f0:	4946703a 	and	r3,r9,r5
   119f4:	10c4b03a 	or	r2,r2,r3
   119f8:	10000226 	beq	r2,zero,11a04 <__pack_d+0x214>
   119fc:	04400044 	movi	r17,1
   11a00:	0025883a 	mov	r18,zero
   11a04:	00803fc4 	movi	r2,255
   11a08:	644eb03a 	or	r7,r12,r17
   11a0c:	3892703a 	and	r9,r7,r2
   11a10:	00802004 	movi	r2,128
   11a14:	6c90b03a 	or	r8,r13,r18
   11a18:	0015883a 	mov	r10,zero
   11a1c:	48801626 	beq	r9,r2,11a78 <__pack_d+0x288>
   11a20:	01001fc4 	movi	r4,127
   11a24:	3905883a 	add	r2,r7,r4
   11a28:	11cd803a 	cmpltu	r6,r2,r7
   11a2c:	320d883a 	add	r6,r6,r8
   11a30:	100f883a 	mov	r7,r2
   11a34:	00840034 	movhi	r2,4096
   11a38:	10bfffc4 	addi	r2,r2,-1
   11a3c:	3011883a 	mov	r8,r6
   11a40:	0007883a 	mov	r3,zero
   11a44:	11801b36 	bltu	r2,r6,11ab4 <__pack_d+0x2c4>
   11a48:	4004963a 	slli	r2,r8,24
   11a4c:	3808d23a 	srli	r4,r7,8
   11a50:	400ad23a 	srli	r5,r8,8
   11a54:	1813883a 	mov	r9,r3
   11a58:	1108b03a 	or	r4,r2,r4
   11a5c:	00bfffc4 	movi	r2,-1
   11a60:	00c00434 	movhi	r3,16
   11a64:	18ffffc4 	addi	r3,r3,-1
   11a68:	208c703a 	and	r6,r4,r2
   11a6c:	28ce703a 	and	r7,r5,r3
   11a70:	4a01ffcc 	andi	r8,r9,2047
   11a74:	003f7206 	br	11840 <__pack_d+0x50>
   11a78:	503fe91e 	bne	r10,zero,11a20 <__pack_d+0x230>
   11a7c:	01004004 	movi	r4,256
   11a80:	3904703a 	and	r2,r7,r4
   11a84:	0007883a 	mov	r3,zero
   11a88:	10c4b03a 	or	r2,r2,r3
   11a8c:	10000626 	beq	r2,zero,11aa8 <__pack_d+0x2b8>
   11a90:	3a45883a 	add	r2,r7,r9
   11a94:	11cd803a 	cmpltu	r6,r2,r7
   11a98:	320d883a 	add	r6,r6,r8
   11a9c:	100f883a 	mov	r7,r2
   11aa0:	3011883a 	mov	r8,r6
   11aa4:	0007883a 	mov	r3,zero
   11aa8:	00840034 	movhi	r2,4096
   11aac:	10bfffc4 	addi	r2,r2,-1
   11ab0:	123fe52e 	bgeu	r2,r8,11a48 <__pack_d+0x258>
   11ab4:	00c00044 	movi	r3,1
   11ab8:	003fe306 	br	11a48 <__pack_d+0x258>
   11abc:	0009883a 	mov	r4,zero
   11ac0:	0013883a 	mov	r9,zero
   11ac4:	000b883a 	mov	r5,zero
   11ac8:	003fe406 	br	11a5c <__pack_d+0x26c>
   11acc:	4a47883a 	add	r3,r9,r9
   11ad0:	008007c4 	movi	r2,31
   11ad4:	1105c83a 	sub	r2,r2,r4
   11ad8:	1886983a 	sll	r3,r3,r2
   11adc:	4118d83a 	srl	r12,r8,r4
   11ae0:	491ad83a 	srl	r13,r9,r4
   11ae4:	1b18b03a 	or	r12,r3,r12
   11ae8:	003fb506 	br	119c0 <__pack_d+0x1d0>
   11aec:	2806d07a 	srli	r3,r5,1
   11af0:	008007c4 	movi	r2,31
   11af4:	1105c83a 	sub	r2,r2,r4
   11af8:	1896d83a 	srl	r11,r3,r2
   11afc:	2914983a 	sll	r10,r5,r4
   11b00:	003fb506 	br	119d8 <__pack_d+0x1e8>

00011b04 <__unpack_d>:
   11b04:	20c00117 	ldw	r3,4(r4)
   11b08:	22400017 	ldw	r9,0(r4)
   11b0c:	00800434 	movhi	r2,16
   11b10:	10bfffc4 	addi	r2,r2,-1
   11b14:	1808d53a 	srli	r4,r3,20
   11b18:	180cd7fa 	srli	r6,r3,31
   11b1c:	1894703a 	and	r10,r3,r2
   11b20:	2201ffcc 	andi	r8,r4,2047
   11b24:	281b883a 	mov	r13,r5
   11b28:	4817883a 	mov	r11,r9
   11b2c:	29800115 	stw	r6,4(r5)
   11b30:	5019883a 	mov	r12,r10
   11b34:	40001e1e 	bne	r8,zero,11bb0 <__unpack_d+0xac>
   11b38:	4a84b03a 	or	r2,r9,r10
   11b3c:	10001926 	beq	r2,zero,11ba4 <__unpack_d+0xa0>
   11b40:	4804d63a 	srli	r2,r9,24
   11b44:	500c923a 	slli	r6,r10,8
   11b48:	013f0084 	movi	r4,-1022
   11b4c:	00c40034 	movhi	r3,4096
   11b50:	18ffffc4 	addi	r3,r3,-1
   11b54:	118cb03a 	or	r6,r2,r6
   11b58:	008000c4 	movi	r2,3
   11b5c:	480a923a 	slli	r5,r9,8
   11b60:	68800015 	stw	r2,0(r13)
   11b64:	69000215 	stw	r4,8(r13)
   11b68:	19800b36 	bltu	r3,r6,11b98 <__unpack_d+0x94>
   11b6c:	200f883a 	mov	r7,r4
   11b70:	1811883a 	mov	r8,r3
   11b74:	2945883a 	add	r2,r5,r5
   11b78:	1149803a 	cmpltu	r4,r2,r5
   11b7c:	3187883a 	add	r3,r6,r6
   11b80:	20c9883a 	add	r4,r4,r3
   11b84:	100b883a 	mov	r5,r2
   11b88:	200d883a 	mov	r6,r4
   11b8c:	39ffffc4 	addi	r7,r7,-1
   11b90:	413ff82e 	bgeu	r8,r4,11b74 <__unpack_d+0x70>
   11b94:	69c00215 	stw	r7,8(r13)
   11b98:	69800415 	stw	r6,16(r13)
   11b9c:	69400315 	stw	r5,12(r13)
   11ba0:	f800283a 	ret
   11ba4:	00800084 	movi	r2,2
   11ba8:	28800015 	stw	r2,0(r5)
   11bac:	f800283a 	ret
   11bb0:	0081ffc4 	movi	r2,2047
   11bb4:	40800f26 	beq	r8,r2,11bf4 <__unpack_d+0xf0>
   11bb8:	480cd63a 	srli	r6,r9,24
   11bbc:	5006923a 	slli	r3,r10,8
   11bc0:	4804923a 	slli	r2,r9,8
   11bc4:	0009883a 	mov	r4,zero
   11bc8:	30c6b03a 	or	r3,r6,r3
   11bcc:	01440034 	movhi	r5,4096
   11bd0:	110cb03a 	or	r6,r2,r4
   11bd4:	423f0044 	addi	r8,r8,-1023
   11bd8:	194eb03a 	or	r7,r3,r5
   11bdc:	008000c4 	movi	r2,3
   11be0:	69c00415 	stw	r7,16(r13)
   11be4:	6a000215 	stw	r8,8(r13)
   11be8:	68800015 	stw	r2,0(r13)
   11bec:	69800315 	stw	r6,12(r13)
   11bf0:	f800283a 	ret
   11bf4:	4a84b03a 	or	r2,r9,r10
   11bf8:	1000031e 	bne	r2,zero,11c08 <__unpack_d+0x104>
   11bfc:	00800104 	movi	r2,4
   11c00:	28800015 	stw	r2,0(r5)
   11c04:	f800283a 	ret
   11c08:	0009883a 	mov	r4,zero
   11c0c:	01400234 	movhi	r5,8
   11c10:	4904703a 	and	r2,r9,r4
   11c14:	5146703a 	and	r3,r10,r5
   11c18:	10c4b03a 	or	r2,r2,r3
   11c1c:	10000526 	beq	r2,zero,11c34 <__unpack_d+0x130>
   11c20:	00800044 	movi	r2,1
   11c24:	68800015 	stw	r2,0(r13)
   11c28:	6b000415 	stw	r12,16(r13)
   11c2c:	6ac00315 	stw	r11,12(r13)
   11c30:	f800283a 	ret
   11c34:	68000015 	stw	zero,0(r13)
   11c38:	003ffb06 	br	11c28 <__unpack_d+0x124>

00011c3c <__mulsi3>:
   11c3c:	20000a26 	beq	r4,zero,11c68 <__mulsi3+0x2c>
   11c40:	0007883a 	mov	r3,zero
   11c44:	2080004c 	andi	r2,r4,1
   11c48:	1005003a 	cmpeq	r2,r2,zero
   11c4c:	2008d07a 	srli	r4,r4,1
   11c50:	1000011e 	bne	r2,zero,11c58 <__mulsi3+0x1c>
   11c54:	1947883a 	add	r3,r3,r5
   11c58:	294b883a 	add	r5,r5,r5
   11c5c:	203ff91e 	bne	r4,zero,11c44 <__mulsi3+0x8>
   11c60:	1805883a 	mov	r2,r3
   11c64:	f800283a 	ret
   11c68:	0007883a 	mov	r3,zero
   11c6c:	1805883a 	mov	r2,r3
   11c70:	f800283a 	ret

00011c74 <gcvt>:
   11c74:	defff804 	addi	sp,sp,-32
   11c78:	0005883a 	mov	r2,zero
   11c7c:	dcc00615 	stw	r19,24(sp)
   11c80:	dc800515 	stw	r18,20(sp)
   11c84:	3027883a 	mov	r19,r6
   11c88:	3825883a 	mov	r18,r7
   11c8c:	100d883a 	mov	r6,r2
   11c90:	000f883a 	mov	r7,zero
   11c94:	dc400415 	stw	r17,16(sp)
   11c98:	dc000315 	stw	r16,12(sp)
   11c9c:	dfc00715 	stw	ra,28(sp)
   11ca0:	2021883a 	mov	r16,r4
   11ca4:	2823883a 	mov	r17,r5
   11ca8:	00170840 	call	17084 <__ltdf2>
   11cac:	9007883a 	mov	r3,r18
   11cb0:	10001516 	blt	r2,zero,11d08 <gcvt+0x94>
   11cb4:	008000b4 	movhi	r2,2
   11cb8:	10a65504 	addi	r2,r2,-26284
   11cbc:	11000017 	ldw	r4,0(r2)
   11cc0:	980f883a 	mov	r7,r19
   11cc4:	008019c4 	movi	r2,103
   11cc8:	880d883a 	mov	r6,r17
   11ccc:	800b883a 	mov	r5,r16
   11cd0:	d8c00015 	stw	r3,0(sp)
   11cd4:	d8800115 	stw	r2,4(sp)
   11cd8:	d8000215 	stw	zero,8(sp)
   11cdc:	00121380 	call	12138 <_gcvt>
   11ce0:	900f883a 	mov	r7,r18
   11ce4:	10000d26 	beq	r2,zero,11d1c <gcvt+0xa8>
   11ce8:	3805883a 	mov	r2,r7
   11cec:	dfc00717 	ldw	ra,28(sp)
   11cf0:	dcc00617 	ldw	r19,24(sp)
   11cf4:	dc800517 	ldw	r18,20(sp)
   11cf8:	dc400417 	ldw	r17,16(sp)
   11cfc:	dc000317 	ldw	r16,12(sp)
   11d00:	dec00804 	addi	sp,sp,32
   11d04:	f800283a 	ret
   11d08:	00800b44 	movi	r2,45
   11d0c:	9cffffc4 	addi	r19,r19,-1
   11d10:	90c00044 	addi	r3,r18,1
   11d14:	90800005 	stb	r2,0(r18)
   11d18:	003fe606 	br	11cb4 <gcvt+0x40>
   11d1c:	000f883a 	mov	r7,zero
   11d20:	3805883a 	mov	r2,r7
   11d24:	dfc00717 	ldw	ra,28(sp)
   11d28:	dcc00617 	ldw	r19,24(sp)
   11d2c:	dc800517 	ldw	r18,20(sp)
   11d30:	dc400417 	ldw	r17,16(sp)
   11d34:	dc000317 	ldw	r16,12(sp)
   11d38:	dec00804 	addi	sp,sp,32
   11d3c:	f800283a 	ret

00011d40 <gcvtf>:
   11d40:	defffd04 	addi	sp,sp,-12
   11d44:	dcc00115 	stw	r19,4(sp)
   11d48:	dc400015 	stw	r17,0(sp)
   11d4c:	3027883a 	mov	r19,r6
   11d50:	2823883a 	mov	r17,r5
   11d54:	dfc00215 	stw	ra,8(sp)
   11d58:	0010b680 	call	10b68 <__extendsfdf2>
   11d5c:	180b883a 	mov	r5,r3
   11d60:	880d883a 	mov	r6,r17
   11d64:	980f883a 	mov	r7,r19
   11d68:	1009883a 	mov	r4,r2
   11d6c:	dfc00217 	ldw	ra,8(sp)
   11d70:	dcc00117 	ldw	r19,4(sp)
   11d74:	dc400017 	ldw	r17,0(sp)
   11d78:	dec00304 	addi	sp,sp,12
   11d7c:	0011c741 	jmpi	11c74 <gcvt>

00011d80 <ecvt>:
   11d80:	defffd04 	addi	sp,sp,-12
   11d84:	da000317 	ldw	r8,12(sp)
   11d88:	dfc00215 	stw	ra,8(sp)
   11d8c:	d8000115 	stw	zero,4(sp)
   11d90:	da000015 	stw	r8,0(sp)
   11d94:	00127100 	call	12710 <ecvtbuf>
   11d98:	dfc00217 	ldw	ra,8(sp)
   11d9c:	dec00304 	addi	sp,sp,12
   11da0:	f800283a 	ret

00011da4 <ecvtf>:
   11da4:	defffb04 	addi	sp,sp,-20
   11da8:	dfc00415 	stw	ra,16(sp)
   11dac:	dd400315 	stw	r21,12(sp)
   11db0:	dcc00215 	stw	r19,8(sp)
   11db4:	382b883a 	mov	r21,r7
   11db8:	3027883a 	mov	r19,r6
   11dbc:	dc400115 	stw	r17,4(sp)
   11dc0:	2823883a 	mov	r17,r5
   11dc4:	0010b680 	call	10b68 <__extendsfdf2>
   11dc8:	180b883a 	mov	r5,r3
   11dcc:	880d883a 	mov	r6,r17
   11dd0:	980f883a 	mov	r7,r19
   11dd4:	1009883a 	mov	r4,r2
   11dd8:	dd400015 	stw	r21,0(sp)
   11ddc:	0011d800 	call	11d80 <ecvt>
   11de0:	dfc00417 	ldw	ra,16(sp)
   11de4:	dd400317 	ldw	r21,12(sp)
   11de8:	dcc00217 	ldw	r19,8(sp)
   11dec:	dc400117 	ldw	r17,4(sp)
   11df0:	dec00504 	addi	sp,sp,20
   11df4:	f800283a 	ret

00011df8 <fcvt>:
   11df8:	defffd04 	addi	sp,sp,-12
   11dfc:	da000317 	ldw	r8,12(sp)
   11e00:	dfc00215 	stw	ra,8(sp)
   11e04:	d8000115 	stw	zero,4(sp)
   11e08:	da000015 	stw	r8,0(sp)
   11e0c:	00128580 	call	12858 <fcvtbuf>
   11e10:	dfc00217 	ldw	ra,8(sp)
   11e14:	dec00304 	addi	sp,sp,12
   11e18:	f800283a 	ret

00011e1c <fcvtf>:
   11e1c:	defffb04 	addi	sp,sp,-20
   11e20:	dfc00415 	stw	ra,16(sp)
   11e24:	dd400315 	stw	r21,12(sp)
   11e28:	dcc00215 	stw	r19,8(sp)
   11e2c:	382b883a 	mov	r21,r7
   11e30:	3027883a 	mov	r19,r6
   11e34:	dc400115 	stw	r17,4(sp)
   11e38:	2823883a 	mov	r17,r5
   11e3c:	0010b680 	call	10b68 <__extendsfdf2>
   11e40:	180b883a 	mov	r5,r3
   11e44:	880d883a 	mov	r6,r17
   11e48:	980f883a 	mov	r7,r19
   11e4c:	1009883a 	mov	r4,r2
   11e50:	dd400015 	stw	r21,0(sp)
   11e54:	0011df80 	call	11df8 <fcvt>
   11e58:	dfc00417 	ldw	ra,16(sp)
   11e5c:	dd400317 	ldw	r21,12(sp)
   11e60:	dcc00217 	ldw	r19,8(sp)
   11e64:	dc400117 	ldw	r17,4(sp)
   11e68:	dec00504 	addi	sp,sp,20
   11e6c:	f800283a 	ret

00011e70 <_puts_r>:
   11e70:	defffd04 	addi	sp,sp,-12
   11e74:	dc000015 	stw	r16,0(sp)
   11e78:	2021883a 	mov	r16,r4
   11e7c:	2809883a 	mov	r4,r5
   11e80:	dfc00215 	stw	ra,8(sp)
   11e84:	dc400115 	stw	r17,4(sp)
   11e88:	2823883a 	mov	r17,r5
   11e8c:	0011f140 	call	11f14 <strlen>
   11e90:	80c00217 	ldw	r3,8(r16)
   11e94:	02000074 	movhi	r8,1
   11e98:	420a8004 	addi	r8,r8,10752
   11e9c:	880d883a 	mov	r6,r17
   11ea0:	100f883a 	mov	r7,r2
   11ea4:	8009883a 	mov	r4,r16
   11ea8:	180b883a 	mov	r5,r3
   11eac:	1a000115 	stw	r8,4(r3)
   11eb0:	403ee83a 	callr	r8
   11eb4:	047fffc4 	movi	r17,-1
   11eb8:	8009883a 	mov	r4,r16
   11ebc:	018000b4 	movhi	r6,2
   11ec0:	31a44c04 	addi	r6,r6,-28368
   11ec4:	01c00044 	movi	r7,1
   11ec8:	1440071e 	bne	r2,r17,11ee8 <_puts_r+0x78>
   11ecc:	00ffffc4 	movi	r3,-1
   11ed0:	1805883a 	mov	r2,r3
   11ed4:	dfc00217 	ldw	ra,8(sp)
   11ed8:	dc400117 	ldw	r17,4(sp)
   11edc:	dc000017 	ldw	r16,0(sp)
   11ee0:	dec00304 	addi	sp,sp,12
   11ee4:	f800283a 	ret
   11ee8:	81400217 	ldw	r5,8(r16)
   11eec:	28c00117 	ldw	r3,4(r5)
   11ef0:	183ee83a 	callr	r3
   11ef4:	0007883a 	mov	r3,zero
   11ef8:	147ff51e 	bne	r2,r17,11ed0 <_puts_r+0x60>
   11efc:	003ff306 	br	11ecc <_puts_r+0x5c>

00011f00 <puts>:
   11f00:	008000b4 	movhi	r2,2
   11f04:	10a65504 	addi	r2,r2,-26284
   11f08:	200b883a 	mov	r5,r4
   11f0c:	11000017 	ldw	r4,0(r2)
   11f10:	0011e701 	jmpi	11e70 <_puts_r>

00011f14 <strlen>:
   11f14:	20800007 	ldb	r2,0(r4)
   11f18:	10000526 	beq	r2,zero,11f30 <strlen+0x1c>
   11f1c:	2007883a 	mov	r3,r4
   11f20:	18c00044 	addi	r3,r3,1
   11f24:	18800007 	ldb	r2,0(r3)
   11f28:	103ffd1e 	bne	r2,zero,11f20 <strlen+0xc>
   11f2c:	1905c83a 	sub	r2,r3,r4
   11f30:	f800283a 	ret

00011f34 <print_e>:
   11f34:	defff404 	addi	sp,sp,-48
   11f38:	dcc00a15 	stw	r19,40(sp)
   11f3c:	dcc00c17 	ldw	r19,48(sp)
   11f40:	3005883a 	mov	r2,r6
   11f44:	dc400815 	stw	r17,32(sp)
   11f48:	2823883a 	mov	r17,r5
   11f4c:	100b883a 	mov	r5,r2
   11f50:	d8800604 	addi	r2,sp,24
   11f54:	380d883a 	mov	r6,r7
   11f58:	9a000044 	addi	r8,r19,1
   11f5c:	d8800115 	stw	r2,4(sp)
   11f60:	d8c00504 	addi	r3,sp,20
   11f64:	d8800404 	addi	r2,sp,16
   11f68:	01c00084 	movi	r7,2
   11f6c:	dc800915 	stw	r18,36(sp)
   11f70:	dc000715 	stw	r16,28(sp)
   11f74:	dfc00b15 	stw	ra,44(sp)
   11f78:	da000015 	stw	r8,0(sp)
   11f7c:	d8c00315 	stw	r3,12(sp)
   11f80:	d8800215 	stw	r2,8(sp)
   11f84:	dc800d03 	ldbu	r18,52(sp)
   11f88:	00145900 	call	14590 <_dtoa_r>
   11f8c:	dc000617 	ldw	r16,24(sp)
   11f90:	100b883a 	mov	r5,r2
   11f94:	0089c3c4 	movi	r2,9999
   11f98:	80805e26 	beq	r16,r2,12114 <print_e+0x1e0>
   11f9c:	28c00003 	ldbu	r3,0(r5)
   11fa0:	89000044 	addi	r4,r17,1
   11fa4:	29400044 	addi	r5,r5,1
   11fa8:	88c00005 	stb	r3,0(r17)
   11fac:	d8800e17 	ldw	r2,56(sp)
   11fb0:	10004826 	beq	r2,zero,120d4 <print_e+0x1a0>
   11fb4:	00800b84 	movi	r2,46
   11fb8:	20800005 	stb	r2,0(r4)
   11fbc:	9811883a 	mov	r8,r19
   11fc0:	21000044 	addi	r4,r4,1
   11fc4:	28800003 	ldbu	r2,0(r5)
   11fc8:	10000926 	beq	r2,zero,11ff0 <print_e+0xbc>
   11fcc:	02000216 	blt	zero,r8,11fd8 <print_e+0xa4>
   11fd0:	00000706 	br	11ff0 <print_e+0xbc>
   11fd4:	40000626 	beq	r8,zero,11ff0 <print_e+0xbc>
   11fd8:	20800005 	stb	r2,0(r4)
   11fdc:	29400044 	addi	r5,r5,1
   11fe0:	28800003 	ldbu	r2,0(r5)
   11fe4:	423fffc4 	addi	r8,r8,-1
   11fe8:	21000044 	addi	r4,r4,1
   11fec:	103ff91e 	bne	r2,zero,11fd4 <print_e+0xa0>
   11ff0:	90c03fcc 	andi	r3,r18,255
   11ff4:	18c0201c 	xori	r3,r3,128
   11ff8:	18ffe004 	addi	r3,r3,-128
   11ffc:	008019c4 	movi	r2,103
   12000:	18803726 	beq	r3,r2,120e0 <print_e+0x1ac>
   12004:	008011c4 	movi	r2,71
   12008:	18804026 	beq	r3,r2,1210c <print_e+0x1d8>
   1200c:	0200080e 	bge	zero,r8,12030 <print_e+0xfc>
   12010:	4007883a 	mov	r3,r8
   12014:	2005883a 	mov	r2,r4
   12018:	01400c04 	movi	r5,48
   1201c:	18ffffc4 	addi	r3,r3,-1
   12020:	11400005 	stb	r5,0(r2)
   12024:	10800044 	addi	r2,r2,1
   12028:	183ffc1e 	bne	r3,zero,1201c <print_e+0xe8>
   1202c:	2209883a 	add	r4,r4,r8
   12030:	843fffc4 	addi	r16,r16,-1
   12034:	24800005 	stb	r18,0(r4)
   12038:	dc000615 	stw	r16,24(sp)
   1203c:	80002d16 	blt	r16,zero,120f4 <print_e+0x1c0>
   12040:	00800ac4 	movi	r2,43
   12044:	20800045 	stb	r2,1(r4)
   12048:	24400084 	addi	r17,r4,2
   1204c:	008018c4 	movi	r2,99
   12050:	14000b0e 	bge	r2,r16,12080 <print_e+0x14c>
   12054:	8009883a 	mov	r4,r16
   12058:	01401904 	movi	r5,100
   1205c:	00172e80 	call	172e8 <__divsi3>
   12060:	1009883a 	mov	r4,r2
   12064:	10800c04 	addi	r2,r2,48
   12068:	88800005 	stb	r2,0(r17)
   1206c:	01401904 	movi	r5,100
   12070:	0011c3c0 	call	11c3c <__mulsi3>
   12074:	80a1c83a 	sub	r16,r16,r2
   12078:	8c400044 	addi	r17,r17,1
   1207c:	dc000615 	stw	r16,24(sp)
   12080:	8009883a 	mov	r4,r16
   12084:	01400284 	movi	r5,10
   12088:	00172e80 	call	172e8 <__divsi3>
   1208c:	1009883a 	mov	r4,r2
   12090:	10800c04 	addi	r2,r2,48
   12094:	88800005 	stb	r2,0(r17)
   12098:	01400284 	movi	r5,10
   1209c:	0011c3c0 	call	11c3c <__mulsi3>
   120a0:	8085c83a 	sub	r2,r16,r2
   120a4:	10c00c04 	addi	r3,r2,48
   120a8:	88c00045 	stb	r3,1(r17)
   120ac:	89000044 	addi	r4,r17,1
   120b0:	20000045 	stb	zero,1(r4)
   120b4:	d8800615 	stw	r2,24(sp)
   120b8:	dfc00b17 	ldw	ra,44(sp)
   120bc:	dcc00a17 	ldw	r19,40(sp)
   120c0:	dc800917 	ldw	r18,36(sp)
   120c4:	dc400817 	ldw	r17,32(sp)
   120c8:	dc000717 	ldw	r16,28(sp)
   120cc:	dec00c04 	addi	sp,sp,48
   120d0:	f800283a 	ret
   120d4:	983fb71e 	bne	r19,zero,11fb4 <print_e+0x80>
   120d8:	0011883a 	mov	r8,zero
   120dc:	003fb906 	br	11fc4 <print_e+0x90>
   120e0:	04801944 	movi	r18,101
   120e4:	843fffc4 	addi	r16,r16,-1
   120e8:	24800005 	stb	r18,0(r4)
   120ec:	dc000615 	stw	r16,24(sp)
   120f0:	803fd30e 	bge	r16,zero,12040 <print_e+0x10c>
   120f4:	00800b44 	movi	r2,45
   120f8:	0421c83a 	sub	r16,zero,r16
   120fc:	20800045 	stb	r2,1(r4)
   12100:	24400084 	addi	r17,r4,2
   12104:	dc000615 	stw	r16,24(sp)
   12108:	003fd006 	br	1204c <print_e+0x118>
   1210c:	04801144 	movi	r18,69
   12110:	003fc706 	br	12030 <print_e+0xfc>
   12114:	8809883a 	mov	r4,r17
   12118:	00141ec0 	call	141ec <strcpy>
   1211c:	dfc00b17 	ldw	ra,44(sp)
   12120:	dcc00a17 	ldw	r19,40(sp)
   12124:	dc800917 	ldw	r18,36(sp)
   12128:	dc400817 	ldw	r17,32(sp)
   1212c:	dc000717 	ldw	r16,28(sp)
   12130:	dec00c04 	addi	sp,sp,48
   12134:	f800283a 	ret

00012138 <_gcvt>:
   12138:	defff104 	addi	sp,sp,-60
   1213c:	dc400815 	stw	r17,32(sp)
   12140:	0005883a 	mov	r2,zero
   12144:	3023883a 	mov	r17,r6
   12148:	dcc00a15 	stw	r19,40(sp)
   1214c:	dc800915 	stw	r18,36(sp)
   12150:	dc000715 	stw	r16,28(sp)
   12154:	2027883a 	mov	r19,r4
   12158:	2821883a 	mov	r16,r5
   1215c:	3825883a 	mov	r18,r7
   12160:	2809883a 	mov	r4,r5
   12164:	100d883a 	mov	r6,r2
   12168:	880b883a 	mov	r5,r17
   1216c:	000f883a 	mov	r7,zero
   12170:	dd800d15 	stw	r22,52(sp)
   12174:	dd400c15 	stw	r21,48(sp)
   12178:	dd000b15 	stw	r20,44(sp)
   1217c:	dfc00e15 	stw	ra,56(sp)
   12180:	dd400f17 	ldw	r21,60(sp)
   12184:	dd801117 	ldw	r22,68(sp)
   12188:	dd001003 	ldbu	r20,64(sp)
   1218c:	00170840 	call	17084 <__ltdf2>
   12190:	10008e16 	blt	r2,zero,123cc <_gcvt+0x294>
   12194:	000d883a 	mov	r6,zero
   12198:	000f883a 	mov	r7,zero
   1219c:	8009883a 	mov	r4,r16
   121a0:	880b883a 	mov	r5,r17
   121a4:	0016e640 	call	16e64 <__eqdf2>
   121a8:	10000e1e 	bne	r2,zero,121e4 <_gcvt+0xac>
   121ac:	00800c04 	movi	r2,48
   121b0:	a8800005 	stb	r2,0(r21)
   121b4:	a8000045 	stb	zero,1(r21)
   121b8:	a805883a 	mov	r2,r21
   121bc:	dfc00e17 	ldw	ra,56(sp)
   121c0:	dd800d17 	ldw	r22,52(sp)
   121c4:	dd400c17 	ldw	r21,48(sp)
   121c8:	dd000b17 	ldw	r20,44(sp)
   121cc:	dcc00a17 	ldw	r19,40(sp)
   121d0:	dc800917 	ldw	r18,36(sp)
   121d4:	dc400817 	ldw	r17,32(sp)
   121d8:	dc000717 	ldw	r16,28(sp)
   121dc:	dec00f04 	addi	sp,sp,60
   121e0:	f800283a 	ret
   121e4:	00bac734 	movhi	r2,60188
   121e8:	1090cb44 	addi	r2,r2,17197
   121ec:	00cfc6b4 	movhi	r3,16154
   121f0:	18cdb884 	addi	r3,r3,14050
   121f4:	180f883a 	mov	r7,r3
   121f8:	8009883a 	mov	r4,r16
   121fc:	880b883a 	mov	r5,r17
   12200:	100d883a 	mov	r6,r2
   12204:	001710c0 	call	1710c <__ledf2>
   12208:	00800d16 	blt	zero,r2,12240 <_gcvt+0x108>
   1220c:	a0c03fcc 	andi	r3,r20,255
   12210:	18c0201c 	xori	r3,r3,128
   12214:	90bfffc4 	addi	r2,r18,-1
   12218:	18ffe004 	addi	r3,r3,-128
   1221c:	9809883a 	mov	r4,r19
   12220:	880f883a 	mov	r7,r17
   12224:	a80b883a 	mov	r5,r21
   12228:	800d883a 	mov	r6,r16
   1222c:	d8800015 	stw	r2,0(sp)
   12230:	d8c00115 	stw	r3,4(sp)
   12234:	dd800215 	stw	r22,8(sp)
   12238:	0011f340 	call	11f34 <print_e>
   1223c:	003fde06 	br	121b8 <_gcvt+0x80>
   12240:	9009883a 	mov	r4,r18
   12244:	0012ea00 	call	12ea0 <_mprec_log10>
   12248:	180f883a 	mov	r7,r3
   1224c:	8009883a 	mov	r4,r16
   12250:	880b883a 	mov	r5,r17
   12254:	100d883a 	mov	r6,r2
   12258:	0016ffc0 	call	16ffc <__gedf2>
   1225c:	103feb0e 	bge	r2,zero,1220c <_gcvt+0xd4>
   12260:	0005883a 	mov	r2,zero
   12264:	00cffc34 	movhi	r3,16368
   12268:	180f883a 	mov	r7,r3
   1226c:	8009883a 	mov	r4,r16
   12270:	880b883a 	mov	r5,r17
   12274:	100d883a 	mov	r6,r2
   12278:	00170840 	call	17084 <__ltdf2>
   1227c:	10005616 	blt	r2,zero,123d8 <_gcvt+0x2a0>
   12280:	9809883a 	mov	r4,r19
   12284:	880d883a 	mov	r6,r17
   12288:	800b883a 	mov	r5,r16
   1228c:	01c00084 	movi	r7,2
   12290:	d8800504 	addi	r2,sp,20
   12294:	d8800215 	stw	r2,8(sp)
   12298:	d8c00604 	addi	r3,sp,24
   1229c:	d8800404 	addi	r2,sp,16
   122a0:	d8c00315 	stw	r3,12(sp)
   122a4:	dc800015 	stw	r18,0(sp)
   122a8:	d8800115 	stw	r2,4(sp)
   122ac:	00145900 	call	14590 <_dtoa_r>
   122b0:	d9000417 	ldw	r4,16(sp)
   122b4:	100b883a 	mov	r5,r2
   122b8:	0089c3c4 	movi	r2,9999
   122bc:	20804b26 	beq	r4,r2,123ec <_gcvt+0x2b4>
   122c0:	28800003 	ldbu	r2,0(r5)
   122c4:	10005026 	beq	r2,zero,12408 <_gcvt+0x2d0>
   122c8:	0100510e 	bge	zero,r4,12410 <_gcvt+0x2d8>
   122cc:	a807883a 	mov	r3,r21
   122d0:	00000106 	br	122d8 <_gcvt+0x1a0>
   122d4:	0100130e 	bge	zero,r4,12324 <_gcvt+0x1ec>
   122d8:	18800005 	stb	r2,0(r3)
   122dc:	213fffc4 	addi	r4,r4,-1
   122e0:	d9000415 	stw	r4,16(sp)
   122e4:	29400044 	addi	r5,r5,1
   122e8:	28800003 	ldbu	r2,0(r5)
   122ec:	18c00044 	addi	r3,r3,1
   122f0:	94bfffc4 	addi	r18,r18,-1
   122f4:	103ff71e 	bne	r2,zero,122d4 <_gcvt+0x19c>
   122f8:	01000a0e 	bge	zero,r4,12324 <_gcvt+0x1ec>
   122fc:	0480090e 	bge	zero,r18,12324 <_gcvt+0x1ec>
   12300:	00800c04 	movi	r2,48
   12304:	00000106 	br	1230c <_gcvt+0x1d4>
   12308:	90000526 	beq	r18,zero,12320 <_gcvt+0x1e8>
   1230c:	213fffc4 	addi	r4,r4,-1
   12310:	18800005 	stb	r2,0(r3)
   12314:	94bfffc4 	addi	r18,r18,-1
   12318:	18c00044 	addi	r3,r3,1
   1231c:	013ffa16 	blt	zero,r4,12308 <_gcvt+0x1d0>
   12320:	d9000415 	stw	r4,16(sp)
   12324:	b000021e 	bne	r22,zero,12330 <_gcvt+0x1f8>
   12328:	28800007 	ldb	r2,0(r5)
   1232c:	10002526 	beq	r2,zero,123c4 <_gcvt+0x28c>
   12330:	a8c03126 	beq	r21,r3,123f8 <_gcvt+0x2c0>
   12334:	00800b84 	movi	r2,46
   12338:	18800005 	stb	r2,0(r3)
   1233c:	18c00044 	addi	r3,r3,1
   12340:	20000b0e 	bge	r4,zero,12370 <_gcvt+0x238>
   12344:	04800a0e 	bge	zero,r18,12370 <_gcvt+0x238>
   12348:	01800c04 	movi	r6,48
   1234c:	00000106 	br	12354 <_gcvt+0x21c>
   12350:	90000626 	beq	r18,zero,1236c <_gcvt+0x234>
   12354:	20800044 	addi	r2,r4,1
   12358:	19800005 	stb	r6,0(r3)
   1235c:	94bfffc4 	addi	r18,r18,-1
   12360:	18c00044 	addi	r3,r3,1
   12364:	1009883a 	mov	r4,r2
   12368:	103ff916 	blt	r2,zero,12350 <_gcvt+0x218>
   1236c:	d8800415 	stw	r2,16(sp)
   12370:	28800003 	ldbu	r2,0(r5)
   12374:	10000926 	beq	r2,zero,1239c <_gcvt+0x264>
   12378:	04800216 	blt	zero,r18,12384 <_gcvt+0x24c>
   1237c:	00000706 	br	1239c <_gcvt+0x264>
   12380:	90000626 	beq	r18,zero,1239c <_gcvt+0x264>
   12384:	18800005 	stb	r2,0(r3)
   12388:	29400044 	addi	r5,r5,1
   1238c:	28800003 	ldbu	r2,0(r5)
   12390:	94bfffc4 	addi	r18,r18,-1
   12394:	18c00044 	addi	r3,r3,1
   12398:	103ff91e 	bne	r2,zero,12380 <_gcvt+0x248>
   1239c:	b0000926 	beq	r22,zero,123c4 <_gcvt+0x28c>
   123a0:	0480080e 	bge	zero,r18,123c4 <_gcvt+0x28c>
   123a4:	9009883a 	mov	r4,r18
   123a8:	1805883a 	mov	r2,r3
   123ac:	01400c04 	movi	r5,48
   123b0:	213fffc4 	addi	r4,r4,-1
   123b4:	11400005 	stb	r5,0(r2)
   123b8:	10800044 	addi	r2,r2,1
   123bc:	203ffc1e 	bne	r4,zero,123b0 <_gcvt+0x278>
   123c0:	1c87883a 	add	r3,r3,r18
   123c4:	18000005 	stb	zero,0(r3)
   123c8:	003f7b06 	br	121b8 <_gcvt+0x80>
   123cc:	88e0003c 	xorhi	r3,r17,32768
   123d0:	1823883a 	mov	r17,r3
   123d4:	003f6f06 	br	12194 <_gcvt+0x5c>
   123d8:	9809883a 	mov	r4,r19
   123dc:	880d883a 	mov	r6,r17
   123e0:	800b883a 	mov	r5,r16
   123e4:	01c000c4 	movi	r7,3
   123e8:	003fa906 	br	12290 <_gcvt+0x158>
   123ec:	a809883a 	mov	r4,r21
   123f0:	00141ec0 	call	141ec <strcpy>
   123f4:	003f7006 	br	121b8 <_gcvt+0x80>
   123f8:	00800c04 	movi	r2,48
   123fc:	a8c00044 	addi	r3,r21,1
   12400:	a8800005 	stb	r2,0(r21)
   12404:	003fcb06 	br	12334 <_gcvt+0x1fc>
   12408:	a807883a 	mov	r3,r21
   1240c:	003fba06 	br	122f8 <_gcvt+0x1c0>
   12410:	a807883a 	mov	r3,r21
   12414:	003fc306 	br	12324 <_gcvt+0x1ec>

00012418 <_dcvt>:
   12418:	defff504 	addi	sp,sp,-44
   1241c:	d8800d17 	ldw	r2,52(sp)
   12420:	3011883a 	mov	r8,r6
   12424:	dc800915 	stw	r18,36(sp)
   12428:	10ffeec4 	addi	r3,r2,-69
   1242c:	12c03fcc 	andi	r11,r2,255
   12430:	19803fcc 	andi	r6,r3,255
   12434:	5ac0201c 	xori	r11,r11,128
   12438:	00c00884 	movi	r3,34
   1243c:	dc400815 	stw	r17,32(sp)
   12440:	dc000715 	stw	r16,28(sp)
   12444:	dfc00a15 	stw	ra,40(sp)
   12448:	2015883a 	mov	r10,r4
   1244c:	2823883a 	mov	r17,r5
   12450:	3813883a 	mov	r9,r7
   12454:	dc000b17 	ldw	r16,44(sp)
   12458:	dc800e17 	ldw	r18,56(sp)
   1245c:	5affe004 	addi	r11,r11,-128
   12460:	19803436 	bltu	r3,r6,12534 <_dcvt+0x11c>
   12464:	3185883a 	add	r2,r6,r6
   12468:	1085883a 	add	r2,r2,r2
   1246c:	00c00074 	movhi	r3,1
   12470:	18c92004 	addi	r3,r3,9344
   12474:	10c5883a 	add	r2,r2,r3
   12478:	11000017 	ldw	r4,0(r2)
   1247c:	2000683a 	jmp	r4
   12480:	00012550 	cmplti	zero,zero,1173
   12484:	00012584 	movi	zero,1174
   12488:	0001250c 	andi	zero,zero,1172
   1248c:	00012534 	movhi	zero,1172
   12490:	00012534 	movhi	zero,1172
   12494:	00012534 	movhi	zero,1172
   12498:	00012534 	movhi	zero,1172
   1249c:	00012534 	movhi	zero,1172
   124a0:	00012534 	movhi	zero,1172
   124a4:	00012534 	movhi	zero,1172
   124a8:	00012534 	movhi	zero,1172
   124ac:	00012534 	movhi	zero,1172
   124b0:	00012534 	movhi	zero,1172
   124b4:	00012534 	movhi	zero,1172
   124b8:	00012534 	movhi	zero,1172
   124bc:	00012534 	movhi	zero,1172
   124c0:	00012534 	movhi	zero,1172
   124c4:	00012534 	movhi	zero,1172
   124c8:	00012534 	movhi	zero,1172
   124cc:	00012534 	movhi	zero,1172
   124d0:	00012534 	movhi	zero,1172
   124d4:	00012534 	movhi	zero,1172
   124d8:	00012534 	movhi	zero,1172
   124dc:	00012534 	movhi	zero,1172
   124e0:	00012534 	movhi	zero,1172
   124e4:	00012534 	movhi	zero,1172
   124e8:	00012534 	movhi	zero,1172
   124ec:	00012534 	movhi	zero,1172
   124f0:	00012534 	movhi	zero,1172
   124f4:	00012534 	movhi	zero,1172
   124f8:	00012534 	movhi	zero,1172
   124fc:	00012534 	movhi	zero,1172
   12500:	00012550 	cmplti	zero,zero,1173
   12504:	00012584 	movi	zero,1174
   12508:	0001250c 	andi	zero,zero,1172
   1250c:	8000011e 	bne	r16,zero,12514 <_dcvt+0xfc>
   12510:	04000044 	movi	r16,1
   12514:	5009883a 	mov	r4,r10
   12518:	480d883a 	mov	r6,r9
   1251c:	800f883a 	mov	r7,r16
   12520:	400b883a 	mov	r5,r8
   12524:	dac00115 	stw	r11,4(sp)
   12528:	dc800215 	stw	r18,8(sp)
   1252c:	dc400015 	stw	r17,0(sp)
   12530:	00121380 	call	12138 <_gcvt>
   12534:	8805883a 	mov	r2,r17
   12538:	dfc00a17 	ldw	ra,40(sp)
   1253c:	dc800917 	ldw	r18,36(sp)
   12540:	dc400817 	ldw	r17,32(sp)
   12544:	dc000717 	ldw	r16,28(sp)
   12548:	dec00b04 	addi	sp,sp,44
   1254c:	f800283a 	ret
   12550:	5009883a 	mov	r4,r10
   12554:	400d883a 	mov	r6,r8
   12558:	dc000015 	stw	r16,0(sp)
   1255c:	dac00115 	stw	r11,4(sp)
   12560:	dc800215 	stw	r18,8(sp)
   12564:	0011f340 	call	11f34 <print_e>
   12568:	8805883a 	mov	r2,r17
   1256c:	dfc00a17 	ldw	ra,40(sp)
   12570:	dc800917 	ldw	r18,36(sp)
   12574:	dc400817 	ldw	r17,32(sp)
   12578:	dc000717 	ldw	r16,28(sp)
   1257c:	dec00b04 	addi	sp,sp,44
   12580:	f800283a 	ret
   12584:	80000126 	beq	r16,zero,1258c <_dcvt+0x174>
   12588:	04800044 	movi	r18,1
   1258c:	d8800504 	addi	r2,sp,20
   12590:	d8c00604 	addi	r3,sp,24
   12594:	400b883a 	mov	r5,r8
   12598:	d8800215 	stw	r2,8(sp)
   1259c:	5009883a 	mov	r4,r10
   125a0:	d8800404 	addi	r2,sp,16
   125a4:	480d883a 	mov	r6,r9
   125a8:	01c000c4 	movi	r7,3
   125ac:	d8c00315 	stw	r3,12(sp)
   125b0:	dc000015 	stw	r16,0(sp)
   125b4:	d8800115 	stw	r2,4(sp)
   125b8:	00145900 	call	14590 <_dtoa_r>
   125bc:	d9400417 	ldw	r5,16(sp)
   125c0:	1007883a 	mov	r3,r2
   125c4:	0089c3c4 	movi	r2,9999
   125c8:	28804626 	beq	r5,r2,126e4 <_dcvt+0x2cc>
   125cc:	18800003 	ldbu	r2,0(r3)
   125d0:	10004c26 	beq	r2,zero,12704 <_dcvt+0x2ec>
   125d4:	0140120e 	bge	zero,r5,12620 <_dcvt+0x208>
   125d8:	8809883a 	mov	r4,r17
   125dc:	180d883a 	mov	r6,r3
   125e0:	00000106 	br	125e8 <_dcvt+0x1d0>
   125e4:	0140100e 	bge	zero,r5,12628 <_dcvt+0x210>
   125e8:	20800005 	stb	r2,0(r4)
   125ec:	297fffc4 	addi	r5,r5,-1
   125f0:	31800044 	addi	r6,r6,1
   125f4:	d9400415 	stw	r5,16(sp)
   125f8:	30800003 	ldbu	r2,0(r6)
   125fc:	21000044 	addi	r4,r4,1
   12600:	103ff81e 	bne	r2,zero,125e4 <_dcvt+0x1cc>
   12604:	0140080e 	bge	zero,r5,12628 <_dcvt+0x210>
   12608:	00800c04 	movi	r2,48
   1260c:	20800005 	stb	r2,0(r4)
   12610:	297fffc4 	addi	r5,r5,-1
   12614:	21000044 	addi	r4,r4,1
   12618:	d9400415 	stw	r5,16(sp)
   1261c:	003ff906 	br	12604 <_dcvt+0x1ec>
   12620:	8809883a 	mov	r4,r17
   12624:	180d883a 	mov	r6,r3
   12628:	9000021e 	bne	r18,zero,12634 <_dcvt+0x21c>
   1262c:	30800007 	ldb	r2,0(r6)
   12630:	10002426 	beq	r2,zero,126c4 <_dcvt+0x2ac>
   12634:	19802f26 	beq	r3,r6,126f4 <_dcvt+0x2dc>
   12638:	00800b84 	movi	r2,46
   1263c:	20800005 	stb	r2,0(r4)
   12640:	21000044 	addi	r4,r4,1
   12644:	28000b0e 	bge	r5,zero,12674 <_dcvt+0x25c>
   12648:	04000216 	blt	zero,r16,12654 <_dcvt+0x23c>
   1264c:	00000906 	br	12674 <_dcvt+0x25c>
   12650:	80000826 	beq	r16,zero,12674 <_dcvt+0x25c>
   12654:	00800c04 	movi	r2,48
   12658:	28c00044 	addi	r3,r5,1
   1265c:	20800005 	stb	r2,0(r4)
   12660:	d8c00415 	stw	r3,16(sp)
   12664:	21000044 	addi	r4,r4,1
   12668:	843fffc4 	addi	r16,r16,-1
   1266c:	180b883a 	mov	r5,r3
   12670:	183ff716 	blt	r3,zero,12650 <_dcvt+0x238>
   12674:	30800003 	ldbu	r2,0(r6)
   12678:	10000926 	beq	r2,zero,126a0 <_dcvt+0x288>
   1267c:	04000216 	blt	zero,r16,12688 <_dcvt+0x270>
   12680:	00001006 	br	126c4 <_dcvt+0x2ac>
   12684:	80000f26 	beq	r16,zero,126c4 <_dcvt+0x2ac>
   12688:	20800005 	stb	r2,0(r4)
   1268c:	31800044 	addi	r6,r6,1
   12690:	30800003 	ldbu	r2,0(r6)
   12694:	21000044 	addi	r4,r4,1
   12698:	843fffc4 	addi	r16,r16,-1
   1269c:	103ff91e 	bne	r2,zero,12684 <_dcvt+0x26c>
   126a0:	0400080e 	bge	zero,r16,126c4 <_dcvt+0x2ac>
   126a4:	2007883a 	mov	r3,r4
   126a8:	8005883a 	mov	r2,r16
   126ac:	01400c04 	movi	r5,48
   126b0:	10bfffc4 	addi	r2,r2,-1
   126b4:	19400005 	stb	r5,0(r3)
   126b8:	18c00044 	addi	r3,r3,1
   126bc:	103ffc1e 	bne	r2,zero,126b0 <_dcvt+0x298>
   126c0:	2409883a 	add	r4,r4,r16
   126c4:	8805883a 	mov	r2,r17
   126c8:	20000005 	stb	zero,0(r4)
   126cc:	dfc00a17 	ldw	ra,40(sp)
   126d0:	dc800917 	ldw	r18,36(sp)
   126d4:	dc400817 	ldw	r17,32(sp)
   126d8:	dc000717 	ldw	r16,28(sp)
   126dc:	dec00b04 	addi	sp,sp,44
   126e0:	f800283a 	ret
   126e4:	180b883a 	mov	r5,r3
   126e8:	8809883a 	mov	r4,r17
   126ec:	00141ec0 	call	141ec <strcpy>
   126f0:	003f9006 	br	12534 <_dcvt+0x11c>
   126f4:	00800c04 	movi	r2,48
   126f8:	20800005 	stb	r2,0(r4)
   126fc:	21000044 	addi	r4,r4,1
   12700:	003fcd06 	br	12638 <_dcvt+0x220>
   12704:	8809883a 	mov	r4,r17
   12708:	180d883a 	mov	r6,r3
   1270c:	003fbd06 	br	12604 <_dcvt+0x1ec>

00012710 <ecvtbuf>:
   12710:	defff404 	addi	sp,sp,-48
   12714:	dc800715 	stw	r18,28(sp)
   12718:	dc800d17 	ldw	r18,52(sp)
   1271c:	dd000915 	stw	r20,36(sp)
   12720:	dcc00815 	stw	r19,32(sp)
   12724:	dc400615 	stw	r17,24(sp)
   12728:	dc000515 	stw	r16,20(sp)
   1272c:	dfc00b15 	stw	ra,44(sp)
   12730:	dd400a15 	stw	r21,40(sp)
   12734:	2021883a 	mov	r16,r4
   12738:	2823883a 	mov	r17,r5
   1273c:	3027883a 	mov	r19,r6
   12740:	3829883a 	mov	r20,r7
   12744:	90002d26 	beq	r18,zero,127fc <ecvtbuf+0xec>
   12748:	054000b4 	movhi	r21,2
   1274c:	ad665504 	addi	r21,r21,-26284
   12750:	d8800c17 	ldw	r2,48(sp)
   12754:	a9000017 	ldw	r4,0(r21)
   12758:	880d883a 	mov	r6,r17
   1275c:	d8800215 	stw	r2,8(sp)
   12760:	800b883a 	mov	r5,r16
   12764:	d8800404 	addi	r2,sp,16
   12768:	01c00084 	movi	r7,2
   1276c:	dd000115 	stw	r20,4(sp)
   12770:	dcc00015 	stw	r19,0(sp)
   12774:	d8800315 	stw	r2,12(sp)
   12778:	00145900 	call	14590 <_dtoa_r>
   1277c:	1007883a 	mov	r3,r2
   12780:	d8800417 	ldw	r2,16(sp)
   12784:	1880252e 	bgeu	r3,r2,1281c <ecvtbuf+0x10c>
   12788:	9009883a 	mov	r4,r18
   1278c:	000d883a 	mov	r6,zero
   12790:	18800003 	ldbu	r2,0(r3)
   12794:	18c00044 	addi	r3,r3,1
   12798:	31800044 	addi	r6,r6,1
   1279c:	20800005 	stb	r2,0(r4)
   127a0:	d8800417 	ldw	r2,16(sp)
   127a4:	21000044 	addi	r4,r4,1
   127a8:	18bff936 	bltu	r3,r2,12790 <ecvtbuf+0x80>
   127ac:	34c0080e 	bge	r6,r19,127d0 <ecvtbuf+0xc0>
   127b0:	9985c83a 	sub	r2,r19,r6
   127b4:	2007883a 	mov	r3,r4
   127b8:	1105883a 	add	r2,r2,r4
   127bc:	01000c04 	movi	r4,48
   127c0:	19000005 	stb	r4,0(r3)
   127c4:	18c00044 	addi	r3,r3,1
   127c8:	18bffd1e 	bne	r3,r2,127c0 <ecvtbuf+0xb0>
   127cc:	1809883a 	mov	r4,r3
   127d0:	20000005 	stb	zero,0(r4)
   127d4:	9005883a 	mov	r2,r18
   127d8:	dfc00b17 	ldw	ra,44(sp)
   127dc:	dd400a17 	ldw	r21,40(sp)
   127e0:	dd000917 	ldw	r20,36(sp)
   127e4:	dcc00817 	ldw	r19,32(sp)
   127e8:	dc800717 	ldw	r18,28(sp)
   127ec:	dc400617 	ldw	r17,24(sp)
   127f0:	dc000517 	ldw	r16,20(sp)
   127f4:	dec00c04 	addi	sp,sp,48
   127f8:	f800283a 	ret
   127fc:	054000b4 	movhi	r21,2
   12800:	ad665504 	addi	r21,r21,-26284
   12804:	a9000017 	ldw	r4,0(r21)
   12808:	20800617 	ldw	r2,24(r4)
   1280c:	3080060e 	bge	r6,r2,12828 <ecvtbuf+0x118>
   12810:	a8800017 	ldw	r2,0(r21)
   12814:	14800717 	ldw	r18,28(r2)
   12818:	003fcd06 	br	12750 <ecvtbuf+0x40>
   1281c:	9009883a 	mov	r4,r18
   12820:	000d883a 	mov	r6,zero
   12824:	003fe106 	br	127ac <ecvtbuf+0x9c>
   12828:	21400717 	ldw	r5,28(r4)
   1282c:	34800044 	addi	r18,r6,1
   12830:	900d883a 	mov	r6,r18
   12834:	0013bf80 	call	13bf8 <_realloc_r>
   12838:	1007883a 	mov	r3,r2
   1283c:	10000426 	beq	r2,zero,12850 <ecvtbuf+0x140>
   12840:	a8800017 	ldw	r2,0(r21)
   12844:	10c00715 	stw	r3,28(r2)
   12848:	14800615 	stw	r18,24(r2)
   1284c:	003ff006 	br	12810 <ecvtbuf+0x100>
   12850:	0005883a 	mov	r2,zero
   12854:	003fe006 	br	127d8 <ecvtbuf+0xc8>

00012858 <fcvtbuf>:
   12858:	defff304 	addi	sp,sp,-52
   1285c:	dc800715 	stw	r18,28(sp)
   12860:	dc800e17 	ldw	r18,56(sp)
   12864:	dd800b15 	stw	r22,44(sp)
   12868:	dd000915 	stw	r20,36(sp)
   1286c:	dcc00815 	stw	r19,32(sp)
   12870:	dc400615 	stw	r17,24(sp)
   12874:	dc000515 	stw	r16,20(sp)
   12878:	dfc00c15 	stw	ra,48(sp)
   1287c:	dd400a15 	stw	r21,40(sp)
   12880:	2021883a 	mov	r16,r4
   12884:	2823883a 	mov	r17,r5
   12888:	3027883a 	mov	r19,r6
   1288c:	3829883a 	mov	r20,r7
   12890:	dd800d17 	ldw	r22,52(sp)
   12894:	90004326 	beq	r18,zero,129a4 <fcvtbuf+0x14c>
   12898:	054000b4 	movhi	r21,2
   1289c:	ad665504 	addi	r21,r21,-26284
   128a0:	0005883a 	mov	r2,zero
   128a4:	00cffc34 	movhi	r3,16368
   128a8:	180f883a 	mov	r7,r3
   128ac:	8009883a 	mov	r4,r16
   128b0:	880b883a 	mov	r5,r17
   128b4:	100d883a 	mov	r6,r2
   128b8:	00170840 	call	17084 <__ltdf2>
   128bc:	1000080e 	bge	r2,zero,128e0 <fcvtbuf+0x88>
   128c0:	0005883a 	mov	r2,zero
   128c4:	00effc34 	movhi	r3,49136
   128c8:	180f883a 	mov	r7,r3
   128cc:	8009883a 	mov	r4,r16
   128d0:	880b883a 	mov	r5,r17
   128d4:	100d883a 	mov	r6,r2
   128d8:	0016f740 	call	16f74 <__gtdf2>
   128dc:	00802c16 	blt	zero,r2,12990 <fcvtbuf+0x138>
   128e0:	a9000017 	ldw	r4,0(r21)
   128e4:	880d883a 	mov	r6,r17
   128e8:	800b883a 	mov	r5,r16
   128ec:	01c000c4 	movi	r7,3
   128f0:	d8800404 	addi	r2,sp,16
   128f4:	dd800215 	stw	r22,8(sp)
   128f8:	dcc00015 	stw	r19,0(sp)
   128fc:	dd000115 	stw	r20,4(sp)
   12900:	d8800315 	stw	r2,12(sp)
   12904:	00145900 	call	14590 <_dtoa_r>
   12908:	1009883a 	mov	r4,r2
   1290c:	d8c00417 	ldw	r3,16(sp)
   12910:	a0800017 	ldw	r2,0(r20)
   12914:	008dc83a 	sub	r6,zero,r2
   12918:	20c02b2e 	bgeu	r4,r3,129c8 <fcvtbuf+0x170>
   1291c:	9007883a 	mov	r3,r18
   12920:	20800003 	ldbu	r2,0(r4)
   12924:	21000044 	addi	r4,r4,1
   12928:	31800044 	addi	r6,r6,1
   1292c:	18800005 	stb	r2,0(r3)
   12930:	d8800417 	ldw	r2,16(sp)
   12934:	18c00044 	addi	r3,r3,1
   12938:	20bff936 	bltu	r4,r2,12920 <fcvtbuf+0xc8>
   1293c:	34c0080e 	bge	r6,r19,12960 <fcvtbuf+0x108>
   12940:	9985c83a 	sub	r2,r19,r6
   12944:	1809883a 	mov	r4,r3
   12948:	10c5883a 	add	r2,r2,r3
   1294c:	00c00c04 	movi	r3,48
   12950:	20c00005 	stb	r3,0(r4)
   12954:	21000044 	addi	r4,r4,1
   12958:	113ffd1e 	bne	r2,r4,12950 <fcvtbuf+0xf8>
   1295c:	1007883a 	mov	r3,r2
   12960:	18000005 	stb	zero,0(r3)
   12964:	9005883a 	mov	r2,r18
   12968:	dfc00c17 	ldw	ra,48(sp)
   1296c:	dd800b17 	ldw	r22,44(sp)
   12970:	dd400a17 	ldw	r21,40(sp)
   12974:	dd000917 	ldw	r20,36(sp)
   12978:	dcc00817 	ldw	r19,32(sp)
   1297c:	dc800717 	ldw	r18,28(sp)
   12980:	dc400617 	ldw	r17,24(sp)
   12984:	dc000517 	ldw	r16,20(sp)
   12988:	dec00d04 	addi	sp,sp,52
   1298c:	f800283a 	ret
   12990:	a9000017 	ldw	r4,0(r21)
   12994:	880d883a 	mov	r6,r17
   12998:	800b883a 	mov	r5,r16
   1299c:	01c00084 	movi	r7,2
   129a0:	003fd306 	br	128f0 <fcvtbuf+0x98>
   129a4:	054000b4 	movhi	r21,2
   129a8:	ad665504 	addi	r21,r21,-26284
   129ac:	a9000017 	ldw	r4,0(r21)
   129b0:	30c008c4 	addi	r3,r6,35
   129b4:	20800617 	ldw	r2,24(r4)
   129b8:	1880050e 	bge	r3,r2,129d0 <fcvtbuf+0x178>
   129bc:	a8800017 	ldw	r2,0(r21)
   129c0:	14800717 	ldw	r18,28(r2)
   129c4:	003fb606 	br	128a0 <fcvtbuf+0x48>
   129c8:	9007883a 	mov	r3,r18
   129cc:	003fdb06 	br	1293c <fcvtbuf+0xe4>
   129d0:	21400717 	ldw	r5,28(r4)
   129d4:	34800904 	addi	r18,r6,36
   129d8:	900d883a 	mov	r6,r18
   129dc:	0013bf80 	call	13bf8 <_realloc_r>
   129e0:	1007883a 	mov	r3,r2
   129e4:	10000426 	beq	r2,zero,129f8 <fcvtbuf+0x1a0>
   129e8:	a8800017 	ldw	r2,0(r21)
   129ec:	10c00715 	stw	r3,28(r2)
   129f0:	14800615 	stw	r18,24(r2)
   129f4:	003ff106 	br	129bc <fcvtbuf+0x164>
   129f8:	0005883a 	mov	r2,zero
   129fc:	003fda06 	br	12968 <fcvtbuf+0x110>

00012a00 <__sfvwrite_small_dev>:
   12a00:	2880000b 	ldhu	r2,0(r5)
   12a04:	defffa04 	addi	sp,sp,-24
   12a08:	dcc00315 	stw	r19,12(sp)
   12a0c:	1080020c 	andi	r2,r2,8
   12a10:	dc800215 	stw	r18,8(sp)
   12a14:	dc400115 	stw	r17,4(sp)
   12a18:	dfc00515 	stw	ra,20(sp)
   12a1c:	dd000415 	stw	r20,16(sp)
   12a20:	dc000015 	stw	r16,0(sp)
   12a24:	2825883a 	mov	r18,r5
   12a28:	2027883a 	mov	r19,r4
   12a2c:	3023883a 	mov	r17,r6
   12a30:	10002026 	beq	r2,zero,12ab4 <__sfvwrite_small_dev+0xb4>
   12a34:	2940008f 	ldh	r5,2(r5)
   12a38:	28000f16 	blt	r5,zero,12a78 <__sfvwrite_small_dev+0x78>
   12a3c:	01c01b0e 	bge	zero,r7,12aac <__sfvwrite_small_dev+0xac>
   12a40:	3821883a 	mov	r16,r7
   12a44:	05010004 	movi	r20,1024
   12a48:	00000206 	br	12a54 <__sfvwrite_small_dev+0x54>
   12a4c:	0400170e 	bge	zero,r16,12aac <__sfvwrite_small_dev+0xac>
   12a50:	9140008f 	ldh	r5,2(r18)
   12a54:	880d883a 	mov	r6,r17
   12a58:	9809883a 	mov	r4,r19
   12a5c:	800f883a 	mov	r7,r16
   12a60:	a400010e 	bge	r20,r16,12a68 <__sfvwrite_small_dev+0x68>
   12a64:	01c10004 	movi	r7,1024
   12a68:	001420c0 	call	1420c <_write_r>
   12a6c:	88a3883a 	add	r17,r17,r2
   12a70:	80a1c83a 	sub	r16,r16,r2
   12a74:	00bff516 	blt	zero,r2,12a4c <__sfvwrite_small_dev+0x4c>
   12a78:	9080000b 	ldhu	r2,0(r18)
   12a7c:	00ffffc4 	movi	r3,-1
   12a80:	10801014 	ori	r2,r2,64
   12a84:	9080000d 	sth	r2,0(r18)
   12a88:	1805883a 	mov	r2,r3
   12a8c:	dfc00517 	ldw	ra,20(sp)
   12a90:	dd000417 	ldw	r20,16(sp)
   12a94:	dcc00317 	ldw	r19,12(sp)
   12a98:	dc800217 	ldw	r18,8(sp)
   12a9c:	dc400117 	ldw	r17,4(sp)
   12aa0:	dc000017 	ldw	r16,0(sp)
   12aa4:	dec00604 	addi	sp,sp,24
   12aa8:	f800283a 	ret
   12aac:	0007883a 	mov	r3,zero
   12ab0:	003ff506 	br	12a88 <__sfvwrite_small_dev+0x88>
   12ab4:	00ffffc4 	movi	r3,-1
   12ab8:	003ff306 	br	12a88 <__sfvwrite_small_dev+0x88>

00012abc <__hi0bits>:
   12abc:	20bfffec 	andhi	r2,r4,65535
   12ac0:	10001426 	beq	r2,zero,12b14 <__hi0bits+0x58>
   12ac4:	0007883a 	mov	r3,zero
   12ac8:	20bfc02c 	andhi	r2,r4,65280
   12acc:	1000021e 	bne	r2,zero,12ad8 <__hi0bits+0x1c>
   12ad0:	2008923a 	slli	r4,r4,8
   12ad4:	18c00204 	addi	r3,r3,8
   12ad8:	20bc002c 	andhi	r2,r4,61440
   12adc:	1000021e 	bne	r2,zero,12ae8 <__hi0bits+0x2c>
   12ae0:	2008913a 	slli	r4,r4,4
   12ae4:	18c00104 	addi	r3,r3,4
   12ae8:	20b0002c 	andhi	r2,r4,49152
   12aec:	1000031e 	bne	r2,zero,12afc <__hi0bits+0x40>
   12af0:	2105883a 	add	r2,r4,r4
   12af4:	18c00084 	addi	r3,r3,2
   12af8:	1089883a 	add	r4,r2,r2
   12afc:	20000316 	blt	r4,zero,12b0c <__hi0bits+0x50>
   12b00:	2090002c 	andhi	r2,r4,16384
   12b04:	10000626 	beq	r2,zero,12b20 <__hi0bits+0x64>
   12b08:	18c00044 	addi	r3,r3,1
   12b0c:	1805883a 	mov	r2,r3
   12b10:	f800283a 	ret
   12b14:	2008943a 	slli	r4,r4,16
   12b18:	00c00404 	movi	r3,16
   12b1c:	003fea06 	br	12ac8 <__hi0bits+0xc>
   12b20:	00c00804 	movi	r3,32
   12b24:	1805883a 	mov	r2,r3
   12b28:	f800283a 	ret

00012b2c <__lo0bits>:
   12b2c:	20c00017 	ldw	r3,0(r4)
   12b30:	188001cc 	andi	r2,r3,7
   12b34:	10000a26 	beq	r2,zero,12b60 <__lo0bits+0x34>
   12b38:	1880004c 	andi	r2,r3,1
   12b3c:	1005003a 	cmpeq	r2,r2,zero
   12b40:	10002126 	beq	r2,zero,12bc8 <__lo0bits+0x9c>
   12b44:	1880008c 	andi	r2,r3,2
   12b48:	1000251e 	bne	r2,zero,12be0 <__lo0bits+0xb4>
   12b4c:	1804d0ba 	srli	r2,r3,2
   12b50:	01400084 	movi	r5,2
   12b54:	20800015 	stw	r2,0(r4)
   12b58:	2805883a 	mov	r2,r5
   12b5c:	f800283a 	ret
   12b60:	18bfffcc 	andi	r2,r3,65535
   12b64:	10001526 	beq	r2,zero,12bbc <__lo0bits+0x90>
   12b68:	000b883a 	mov	r5,zero
   12b6c:	18803fcc 	andi	r2,r3,255
   12b70:	1000021e 	bne	r2,zero,12b7c <__lo0bits+0x50>
   12b74:	1806d23a 	srli	r3,r3,8
   12b78:	29400204 	addi	r5,r5,8
   12b7c:	188003cc 	andi	r2,r3,15
   12b80:	1000021e 	bne	r2,zero,12b8c <__lo0bits+0x60>
   12b84:	1806d13a 	srli	r3,r3,4
   12b88:	29400104 	addi	r5,r5,4
   12b8c:	188000cc 	andi	r2,r3,3
   12b90:	1000021e 	bne	r2,zero,12b9c <__lo0bits+0x70>
   12b94:	1806d0ba 	srli	r3,r3,2
   12b98:	29400084 	addi	r5,r5,2
   12b9c:	1880004c 	andi	r2,r3,1
   12ba0:	1000031e 	bne	r2,zero,12bb0 <__lo0bits+0x84>
   12ba4:	1806d07a 	srli	r3,r3,1
   12ba8:	18000a26 	beq	r3,zero,12bd4 <__lo0bits+0xa8>
   12bac:	29400044 	addi	r5,r5,1
   12bb0:	2805883a 	mov	r2,r5
   12bb4:	20c00015 	stw	r3,0(r4)
   12bb8:	f800283a 	ret
   12bbc:	1806d43a 	srli	r3,r3,16
   12bc0:	01400404 	movi	r5,16
   12bc4:	003fe906 	br	12b6c <__lo0bits+0x40>
   12bc8:	000b883a 	mov	r5,zero
   12bcc:	2805883a 	mov	r2,r5
   12bd0:	f800283a 	ret
   12bd4:	01400804 	movi	r5,32
   12bd8:	2805883a 	mov	r2,r5
   12bdc:	f800283a 	ret
   12be0:	1804d07a 	srli	r2,r3,1
   12be4:	01400044 	movi	r5,1
   12be8:	20800015 	stw	r2,0(r4)
   12bec:	003fda06 	br	12b58 <__lo0bits+0x2c>

00012bf0 <__mcmp>:
   12bf0:	20800417 	ldw	r2,16(r4)
   12bf4:	28c00417 	ldw	r3,16(r5)
   12bf8:	10cfc83a 	sub	r7,r2,r3
   12bfc:	38000c1e 	bne	r7,zero,12c30 <__mcmp+0x40>
   12c00:	18c5883a 	add	r2,r3,r3
   12c04:	1085883a 	add	r2,r2,r2
   12c08:	10c00504 	addi	r3,r2,20
   12c0c:	21000504 	addi	r4,r4,20
   12c10:	28cb883a 	add	r5,r5,r3
   12c14:	2085883a 	add	r2,r4,r2
   12c18:	10bfff04 	addi	r2,r2,-4
   12c1c:	297fff04 	addi	r5,r5,-4
   12c20:	11800017 	ldw	r6,0(r2)
   12c24:	28c00017 	ldw	r3,0(r5)
   12c28:	30c0031e 	bne	r6,r3,12c38 <__mcmp+0x48>
   12c2c:	20bffa36 	bltu	r4,r2,12c18 <__mcmp+0x28>
   12c30:	3805883a 	mov	r2,r7
   12c34:	f800283a 	ret
   12c38:	30c00336 	bltu	r6,r3,12c48 <__mcmp+0x58>
   12c3c:	01c00044 	movi	r7,1
   12c40:	3805883a 	mov	r2,r7
   12c44:	f800283a 	ret
   12c48:	01ffffc4 	movi	r7,-1
   12c4c:	003ff806 	br	12c30 <__mcmp+0x40>

00012c50 <__ulp>:
   12c50:	295ffc2c 	andhi	r5,r5,32752
   12c54:	013f3034 	movhi	r4,64704
   12c58:	290b883a 	add	r5,r5,r4
   12c5c:	0145c83a 	sub	r2,zero,r5
   12c60:	1007d53a 	srai	r3,r2,20
   12c64:	000d883a 	mov	r6,zero
   12c68:	0140040e 	bge	zero,r5,12c7c <__ulp+0x2c>
   12c6c:	280f883a 	mov	r7,r5
   12c70:	3807883a 	mov	r3,r7
   12c74:	3005883a 	mov	r2,r6
   12c78:	f800283a 	ret
   12c7c:	008004c4 	movi	r2,19
   12c80:	193ffb04 	addi	r4,r3,-20
   12c84:	10c00c0e 	bge	r2,r3,12cb8 <__ulp+0x68>
   12c88:	008007c4 	movi	r2,31
   12c8c:	1107c83a 	sub	r3,r2,r4
   12c90:	00800784 	movi	r2,30
   12c94:	01400044 	movi	r5,1
   12c98:	11000216 	blt	r2,r4,12ca4 <__ulp+0x54>
   12c9c:	00800044 	movi	r2,1
   12ca0:	10ca983a 	sll	r5,r2,r3
   12ca4:	000f883a 	mov	r7,zero
   12ca8:	280d883a 	mov	r6,r5
   12cac:	3807883a 	mov	r3,r7
   12cb0:	3005883a 	mov	r2,r6
   12cb4:	f800283a 	ret
   12cb8:	00800234 	movhi	r2,8
   12cbc:	10cfd83a 	sra	r7,r2,r3
   12cc0:	000d883a 	mov	r6,zero
   12cc4:	3005883a 	mov	r2,r6
   12cc8:	3807883a 	mov	r3,r7
   12ccc:	f800283a 	ret

00012cd0 <__b2d>:
   12cd0:	20800417 	ldw	r2,16(r4)
   12cd4:	defff904 	addi	sp,sp,-28
   12cd8:	dd000415 	stw	r20,16(sp)
   12cdc:	1085883a 	add	r2,r2,r2
   12ce0:	25000504 	addi	r20,r4,20
   12ce4:	1085883a 	add	r2,r2,r2
   12ce8:	dc000015 	stw	r16,0(sp)
   12cec:	a0a1883a 	add	r16,r20,r2
   12cf0:	dd400515 	stw	r21,20(sp)
   12cf4:	857fff17 	ldw	r21,-4(r16)
   12cf8:	dc400115 	stw	r17,4(sp)
   12cfc:	dfc00615 	stw	ra,24(sp)
   12d00:	a809883a 	mov	r4,r21
   12d04:	2823883a 	mov	r17,r5
   12d08:	dcc00315 	stw	r19,12(sp)
   12d0c:	dc800215 	stw	r18,8(sp)
   12d10:	0012abc0 	call	12abc <__hi0bits>
   12d14:	100b883a 	mov	r5,r2
   12d18:	00800804 	movi	r2,32
   12d1c:	1145c83a 	sub	r2,r2,r5
   12d20:	88800015 	stw	r2,0(r17)
   12d24:	00800284 	movi	r2,10
   12d28:	80ffff04 	addi	r3,r16,-4
   12d2c:	11401416 	blt	r2,r5,12d80 <__b2d+0xb0>
   12d30:	008002c4 	movi	r2,11
   12d34:	1149c83a 	sub	r4,r2,r5
   12d38:	a0c02736 	bltu	r20,r3,12dd8 <__b2d+0x108>
   12d3c:	000d883a 	mov	r6,zero
   12d40:	28800544 	addi	r2,r5,21
   12d44:	a906d83a 	srl	r3,r21,r4
   12d48:	a884983a 	sll	r2,r21,r2
   12d4c:	1ccffc34 	orhi	r19,r3,16368
   12d50:	11a4b03a 	or	r18,r2,r6
   12d54:	9005883a 	mov	r2,r18
   12d58:	9807883a 	mov	r3,r19
   12d5c:	dfc00617 	ldw	ra,24(sp)
   12d60:	dd400517 	ldw	r21,20(sp)
   12d64:	dd000417 	ldw	r20,16(sp)
   12d68:	dcc00317 	ldw	r19,12(sp)
   12d6c:	dc800217 	ldw	r18,8(sp)
   12d70:	dc400117 	ldw	r17,4(sp)
   12d74:	dc000017 	ldw	r16,0(sp)
   12d78:	dec00704 	addi	sp,sp,28
   12d7c:	f800283a 	ret
   12d80:	a0c00e36 	bltu	r20,r3,12dbc <__b2d+0xec>
   12d84:	293ffd44 	addi	r4,r5,-11
   12d88:	000d883a 	mov	r6,zero
   12d8c:	20000f26 	beq	r4,zero,12dcc <__b2d+0xfc>
   12d90:	00800804 	movi	r2,32
   12d94:	110bc83a 	sub	r5,r2,r4
   12d98:	a0c01236 	bltu	r20,r3,12de4 <__b2d+0x114>
   12d9c:	000f883a 	mov	r7,zero
   12da0:	a904983a 	sll	r2,r21,r4
   12da4:	3146d83a 	srl	r3,r6,r5
   12da8:	3108983a 	sll	r4,r6,r4
   12dac:	108ffc34 	orhi	r2,r2,16368
   12db0:	18a6b03a 	or	r19,r3,r2
   12db4:	3924b03a 	or	r18,r7,r4
   12db8:	003fe606 	br	12d54 <__b2d+0x84>
   12dbc:	293ffd44 	addi	r4,r5,-11
   12dc0:	81bffe17 	ldw	r6,-8(r16)
   12dc4:	80fffe04 	addi	r3,r16,-8
   12dc8:	203ff11e 	bne	r4,zero,12d90 <__b2d+0xc0>
   12dcc:	accffc34 	orhi	r19,r21,16368
   12dd0:	3025883a 	mov	r18,r6
   12dd4:	003fdf06 	br	12d54 <__b2d+0x84>
   12dd8:	18bfff17 	ldw	r2,-4(r3)
   12ddc:	110cd83a 	srl	r6,r2,r4
   12de0:	003fd706 	br	12d40 <__b2d+0x70>
   12de4:	18bfff17 	ldw	r2,-4(r3)
   12de8:	114ed83a 	srl	r7,r2,r5
   12dec:	003fec06 	br	12da0 <__b2d+0xd0>

00012df0 <__ratio>:
   12df0:	defff904 	addi	sp,sp,-28
   12df4:	dc400215 	stw	r17,8(sp)
   12df8:	2823883a 	mov	r17,r5
   12dfc:	d80b883a 	mov	r5,sp
   12e00:	dfc00615 	stw	ra,24(sp)
   12e04:	dd000515 	stw	r20,20(sp)
   12e08:	dcc00415 	stw	r19,16(sp)
   12e0c:	dc800315 	stw	r18,12(sp)
   12e10:	2025883a 	mov	r18,r4
   12e14:	0012cd00 	call	12cd0 <__b2d>
   12e18:	8809883a 	mov	r4,r17
   12e1c:	d9400104 	addi	r5,sp,4
   12e20:	1027883a 	mov	r19,r2
   12e24:	1829883a 	mov	r20,r3
   12e28:	0012cd00 	call	12cd0 <__b2d>
   12e2c:	89000417 	ldw	r4,16(r17)
   12e30:	91c00417 	ldw	r7,16(r18)
   12e34:	d9800117 	ldw	r6,4(sp)
   12e38:	180b883a 	mov	r5,r3
   12e3c:	390fc83a 	sub	r7,r7,r4
   12e40:	1009883a 	mov	r4,r2
   12e44:	d8800017 	ldw	r2,0(sp)
   12e48:	380e917a 	slli	r7,r7,5
   12e4c:	2011883a 	mov	r8,r4
   12e50:	1185c83a 	sub	r2,r2,r6
   12e54:	11c5883a 	add	r2,r2,r7
   12e58:	1006953a 	slli	r3,r2,20
   12e5c:	2813883a 	mov	r9,r5
   12e60:	00800d0e 	bge	zero,r2,12e98 <__ratio+0xa8>
   12e64:	1d29883a 	add	r20,r3,r20
   12e68:	a00b883a 	mov	r5,r20
   12e6c:	480f883a 	mov	r7,r9
   12e70:	9809883a 	mov	r4,r19
   12e74:	400d883a 	mov	r6,r8
   12e78:	0016c0c0 	call	16c0c <__divdf3>
   12e7c:	dfc00617 	ldw	ra,24(sp)
   12e80:	dd000517 	ldw	r20,20(sp)
   12e84:	dcc00417 	ldw	r19,16(sp)
   12e88:	dc800317 	ldw	r18,12(sp)
   12e8c:	dc400217 	ldw	r17,8(sp)
   12e90:	dec00704 	addi	sp,sp,28
   12e94:	f800283a 	ret
   12e98:	28d3c83a 	sub	r9,r5,r3
   12e9c:	003ff206 	br	12e68 <__ratio+0x78>

00012ea0 <_mprec_log10>:
   12ea0:	defffe04 	addi	sp,sp,-8
   12ea4:	008005c4 	movi	r2,23
   12ea8:	dc000015 	stw	r16,0(sp)
   12eac:	dfc00115 	stw	ra,4(sp)
   12eb0:	2021883a 	mov	r16,r4
   12eb4:	11000c16 	blt	r2,r4,12ee8 <_mprec_log10+0x48>
   12eb8:	200490fa 	slli	r2,r4,3
   12ebc:	00c000b4 	movhi	r3,2
   12ec0:	18e44d04 	addi	r3,r3,-28364
   12ec4:	10c5883a 	add	r2,r2,r3
   12ec8:	12400117 	ldw	r9,4(r2)
   12ecc:	12000017 	ldw	r8,0(r2)
   12ed0:	4807883a 	mov	r3,r9
   12ed4:	4005883a 	mov	r2,r8
   12ed8:	dfc00117 	ldw	ra,4(sp)
   12edc:	dc000017 	ldw	r16,0(sp)
   12ee0:	dec00204 	addi	sp,sp,8
   12ee4:	f800283a 	ret
   12ee8:	0011883a 	mov	r8,zero
   12eec:	024ffc34 	movhi	r9,16368
   12ef0:	0005883a 	mov	r2,zero
   12ef4:	00d00934 	movhi	r3,16420
   12ef8:	480b883a 	mov	r5,r9
   12efc:	4009883a 	mov	r4,r8
   12f00:	180f883a 	mov	r7,r3
   12f04:	100d883a 	mov	r6,r2
   12f08:	00168480 	call	16848 <__muldf3>
   12f0c:	843fffc4 	addi	r16,r16,-1
   12f10:	1011883a 	mov	r8,r2
   12f14:	1813883a 	mov	r9,r3
   12f18:	803ff51e 	bne	r16,zero,12ef0 <_mprec_log10+0x50>
   12f1c:	4005883a 	mov	r2,r8
   12f20:	4807883a 	mov	r3,r9
   12f24:	dfc00117 	ldw	ra,4(sp)
   12f28:	dc000017 	ldw	r16,0(sp)
   12f2c:	dec00204 	addi	sp,sp,8
   12f30:	f800283a 	ret

00012f34 <__copybits>:
   12f34:	297fffc4 	addi	r5,r5,-1
   12f38:	30800417 	ldw	r2,16(r6)
   12f3c:	280bd17a 	srai	r5,r5,5
   12f40:	31800504 	addi	r6,r6,20
   12f44:	1085883a 	add	r2,r2,r2
   12f48:	294b883a 	add	r5,r5,r5
   12f4c:	294b883a 	add	r5,r5,r5
   12f50:	1085883a 	add	r2,r2,r2
   12f54:	290b883a 	add	r5,r5,r4
   12f58:	3087883a 	add	r3,r6,r2
   12f5c:	29400104 	addi	r5,r5,4
   12f60:	30c0052e 	bgeu	r6,r3,12f78 <__copybits+0x44>
   12f64:	30800017 	ldw	r2,0(r6)
   12f68:	31800104 	addi	r6,r6,4
   12f6c:	20800015 	stw	r2,0(r4)
   12f70:	21000104 	addi	r4,r4,4
   12f74:	30fffb36 	bltu	r6,r3,12f64 <__copybits+0x30>
   12f78:	2140032e 	bgeu	r4,r5,12f88 <__copybits+0x54>
   12f7c:	20000015 	stw	zero,0(r4)
   12f80:	21000104 	addi	r4,r4,4
   12f84:	217ffd36 	bltu	r4,r5,12f7c <__copybits+0x48>
   12f88:	f800283a 	ret

00012f8c <__any_on>:
   12f8c:	20800417 	ldw	r2,16(r4)
   12f90:	2807d17a 	srai	r3,r5,5
   12f94:	21000504 	addi	r4,r4,20
   12f98:	10c00d0e 	bge	r2,r3,12fd0 <__any_on+0x44>
   12f9c:	1085883a 	add	r2,r2,r2
   12fa0:	1085883a 	add	r2,r2,r2
   12fa4:	208d883a 	add	r6,r4,r2
   12fa8:	2180182e 	bgeu	r4,r6,1300c <__any_on+0x80>
   12fac:	30bfff17 	ldw	r2,-4(r6)
   12fb0:	30ffff04 	addi	r3,r6,-4
   12fb4:	1000041e 	bne	r2,zero,12fc8 <__any_on+0x3c>
   12fb8:	20c0142e 	bgeu	r4,r3,1300c <__any_on+0x80>
   12fbc:	18ffff04 	addi	r3,r3,-4
   12fc0:	18800017 	ldw	r2,0(r3)
   12fc4:	103ffc26 	beq	r2,zero,12fb8 <__any_on+0x2c>
   12fc8:	00800044 	movi	r2,1
   12fcc:	f800283a 	ret
   12fd0:	18800a0e 	bge	r3,r2,12ffc <__any_on+0x70>
   12fd4:	294007cc 	andi	r5,r5,31
   12fd8:	28000826 	beq	r5,zero,12ffc <__any_on+0x70>
   12fdc:	18c5883a 	add	r2,r3,r3
   12fe0:	1085883a 	add	r2,r2,r2
   12fe4:	208d883a 	add	r6,r4,r2
   12fe8:	30c00017 	ldw	r3,0(r6)
   12fec:	1944d83a 	srl	r2,r3,r5
   12ff0:	1144983a 	sll	r2,r2,r5
   12ff4:	18bff41e 	bne	r3,r2,12fc8 <__any_on+0x3c>
   12ff8:	003feb06 	br	12fa8 <__any_on+0x1c>
   12ffc:	18c5883a 	add	r2,r3,r3
   13000:	1085883a 	add	r2,r2,r2
   13004:	208d883a 	add	r6,r4,r2
   13008:	003fe706 	br	12fa8 <__any_on+0x1c>
   1300c:	0005883a 	mov	r2,zero
   13010:	f800283a 	ret

00013014 <_Bfree>:
   13014:	20800417 	ldw	r2,16(r4)
   13018:	defffd04 	addi	sp,sp,-12
   1301c:	dc000115 	stw	r16,4(sp)
   13020:	dfc00215 	stw	ra,8(sp)
   13024:	2021883a 	mov	r16,r4
   13028:	01000404 	movi	r4,16
   1302c:	10000e26 	beq	r2,zero,13068 <_Bfree+0x54>
   13030:	28000926 	beq	r5,zero,13058 <_Bfree+0x44>
   13034:	80c00417 	ldw	r3,16(r16)
   13038:	28800117 	ldw	r2,4(r5)
   1303c:	19000317 	ldw	r4,12(r3)
   13040:	1085883a 	add	r2,r2,r2
   13044:	1085883a 	add	r2,r2,r2
   13048:	1105883a 	add	r2,r2,r4
   1304c:	10c00017 	ldw	r3,0(r2)
   13050:	28c00015 	stw	r3,0(r5)
   13054:	11400015 	stw	r5,0(r2)
   13058:	dfc00217 	ldw	ra,8(sp)
   1305c:	dc000117 	ldw	r16,4(sp)
   13060:	dec00304 	addi	sp,sp,12
   13064:	f800283a 	ret
   13068:	d9400015 	stw	r5,0(sp)
   1306c:	0015fd80 	call	15fd8 <malloc>
   13070:	d9400017 	ldw	r5,0(sp)
   13074:	10000315 	stw	zero,12(r2)
   13078:	10000215 	stw	zero,8(r2)
   1307c:	10000015 	stw	zero,0(r2)
   13080:	80800415 	stw	r2,16(r16)
   13084:	10000115 	stw	zero,4(r2)
   13088:	003fe906 	br	13030 <_Bfree+0x1c>

0001308c <_Balloc>:
   1308c:	defffb04 	addi	sp,sp,-20
   13090:	dc000015 	stw	r16,0(sp)
   13094:	24000417 	ldw	r16,16(r4)
   13098:	dc800215 	stw	r18,8(sp)
   1309c:	dc400115 	stw	r17,4(sp)
   130a0:	dfc00415 	stw	ra,16(sp)
   130a4:	dcc00315 	stw	r19,12(sp)
   130a8:	2025883a 	mov	r18,r4
   130ac:	2823883a 	mov	r17,r5
   130b0:	80001426 	beq	r16,zero,13104 <_Balloc+0x78>
   130b4:	80800317 	ldw	r2,12(r16)
   130b8:	10001a26 	beq	r2,zero,13124 <_Balloc+0x98>
   130bc:	80c00317 	ldw	r3,12(r16)
   130c0:	8c45883a 	add	r2,r17,r17
   130c4:	1085883a 	add	r2,r2,r2
   130c8:	10c7883a 	add	r3,r2,r3
   130cc:	1c000017 	ldw	r16,0(r3)
   130d0:	80001e26 	beq	r16,zero,1314c <_Balloc+0xc0>
   130d4:	80800017 	ldw	r2,0(r16)
   130d8:	18800015 	stw	r2,0(r3)
   130dc:	80000415 	stw	zero,16(r16)
   130e0:	80000315 	stw	zero,12(r16)
   130e4:	8005883a 	mov	r2,r16
   130e8:	dfc00417 	ldw	ra,16(sp)
   130ec:	dcc00317 	ldw	r19,12(sp)
   130f0:	dc800217 	ldw	r18,8(sp)
   130f4:	dc400117 	ldw	r17,4(sp)
   130f8:	dc000017 	ldw	r16,0(sp)
   130fc:	dec00504 	addi	sp,sp,20
   13100:	f800283a 	ret
   13104:	01000404 	movi	r4,16
   13108:	0015fd80 	call	15fd8 <malloc>
   1310c:	1021883a 	mov	r16,r2
   13110:	90800415 	stw	r2,16(r18)
   13114:	10000115 	stw	zero,4(r2)
   13118:	10000215 	stw	zero,8(r2)
   1311c:	10000015 	stw	zero,0(r2)
   13120:	10000315 	stw	zero,12(r2)
   13124:	9009883a 	mov	r4,r18
   13128:	01400104 	movi	r5,4
   1312c:	01800404 	movi	r6,16
   13130:	00142840 	call	14284 <_calloc_r>
   13134:	80800315 	stw	r2,12(r16)
   13138:	94000417 	ldw	r16,16(r18)
   1313c:	80800317 	ldw	r2,12(r16)
   13140:	103fde1e 	bne	r2,zero,130bc <_Balloc+0x30>
   13144:	0021883a 	mov	r16,zero
   13148:	003fe606 	br	130e4 <_Balloc+0x58>
   1314c:	01400044 	movi	r5,1
   13150:	2c66983a 	sll	r19,r5,r17
   13154:	9009883a 	mov	r4,r18
   13158:	9ccd883a 	add	r6,r19,r19
   1315c:	318d883a 	add	r6,r6,r6
   13160:	31800504 	addi	r6,r6,20
   13164:	00142840 	call	14284 <_calloc_r>
   13168:	103fde26 	beq	r2,zero,130e4 <_Balloc+0x58>
   1316c:	1021883a 	mov	r16,r2
   13170:	14400115 	stw	r17,4(r2)
   13174:	14c00215 	stw	r19,8(r2)
   13178:	003fd806 	br	130dc <_Balloc+0x50>

0001317c <__d2b>:
   1317c:	defff504 	addi	sp,sp,-44
   13180:	dcc00515 	stw	r19,20(sp)
   13184:	04c00044 	movi	r19,1
   13188:	dc000215 	stw	r16,8(sp)
   1318c:	2821883a 	mov	r16,r5
   13190:	980b883a 	mov	r5,r19
   13194:	ddc00915 	stw	r23,36(sp)
   13198:	dd800815 	stw	r22,32(sp)
   1319c:	dd400715 	stw	r21,28(sp)
   131a0:	dd000615 	stw	r20,24(sp)
   131a4:	dc800415 	stw	r18,16(sp)
   131a8:	dc400315 	stw	r17,12(sp)
   131ac:	dfc00a15 	stw	ra,40(sp)
   131b0:	3023883a 	mov	r17,r6
   131b4:	382d883a 	mov	r22,r7
   131b8:	ddc00b17 	ldw	r23,44(sp)
   131bc:	001308c0 	call	1308c <_Balloc>
   131c0:	1025883a 	mov	r18,r2
   131c4:	00a00034 	movhi	r2,32768
   131c8:	10bfffc4 	addi	r2,r2,-1
   131cc:	8888703a 	and	r4,r17,r2
   131d0:	202ad53a 	srli	r21,r4,20
   131d4:	00800434 	movhi	r2,16
   131d8:	10bfffc4 	addi	r2,r2,-1
   131dc:	8886703a 	and	r3,r17,r2
   131e0:	a829003a 	cmpeq	r20,r21,zero
   131e4:	800b883a 	mov	r5,r16
   131e8:	d8c00115 	stw	r3,4(sp)
   131ec:	94000504 	addi	r16,r18,20
   131f0:	a000021e 	bne	r20,zero,131fc <__d2b+0x80>
   131f4:	18c00434 	orhi	r3,r3,16
   131f8:	d8c00115 	stw	r3,4(sp)
   131fc:	28002726 	beq	r5,zero,1329c <__d2b+0x120>
   13200:	d809883a 	mov	r4,sp
   13204:	d9400015 	stw	r5,0(sp)
   13208:	0012b2c0 	call	12b2c <__lo0bits>
   1320c:	100d883a 	mov	r6,r2
   13210:	10003526 	beq	r2,zero,132e8 <__d2b+0x16c>
   13214:	d8c00117 	ldw	r3,4(sp)
   13218:	00800804 	movi	r2,32
   1321c:	1185c83a 	sub	r2,r2,r6
   13220:	d9000017 	ldw	r4,0(sp)
   13224:	1886983a 	sll	r3,r3,r2
   13228:	1906b03a 	or	r3,r3,r4
   1322c:	90c00515 	stw	r3,20(r18)
   13230:	d8c00117 	ldw	r3,4(sp)
   13234:	1986d83a 	srl	r3,r3,r6
   13238:	d8c00115 	stw	r3,4(sp)
   1323c:	180b003a 	cmpeq	r5,r3,zero
   13240:	00800084 	movi	r2,2
   13244:	114bc83a 	sub	r5,r2,r5
   13248:	80c00115 	stw	r3,4(r16)
   1324c:	91400415 	stw	r5,16(r18)
   13250:	a0001a1e 	bne	r20,zero,132bc <__d2b+0x140>
   13254:	3545883a 	add	r2,r6,r21
   13258:	10bef344 	addi	r2,r2,-1075
   1325c:	00c00d44 	movi	r3,53
   13260:	b0800015 	stw	r2,0(r22)
   13264:	1987c83a 	sub	r3,r3,r6
   13268:	b8c00015 	stw	r3,0(r23)
   1326c:	9005883a 	mov	r2,r18
   13270:	dfc00a17 	ldw	ra,40(sp)
   13274:	ddc00917 	ldw	r23,36(sp)
   13278:	dd800817 	ldw	r22,32(sp)
   1327c:	dd400717 	ldw	r21,28(sp)
   13280:	dd000617 	ldw	r20,24(sp)
   13284:	dcc00517 	ldw	r19,20(sp)
   13288:	dc800417 	ldw	r18,16(sp)
   1328c:	dc400317 	ldw	r17,12(sp)
   13290:	dc000217 	ldw	r16,8(sp)
   13294:	dec00b04 	addi	sp,sp,44
   13298:	f800283a 	ret
   1329c:	d9000104 	addi	r4,sp,4
   132a0:	0012b2c0 	call	12b2c <__lo0bits>
   132a4:	11800804 	addi	r6,r2,32
   132a8:	d8800117 	ldw	r2,4(sp)
   132ac:	94c00415 	stw	r19,16(r18)
   132b0:	980b883a 	mov	r5,r19
   132b4:	90800515 	stw	r2,20(r18)
   132b8:	a03fe626 	beq	r20,zero,13254 <__d2b+0xd8>
   132bc:	2945883a 	add	r2,r5,r5
   132c0:	1085883a 	add	r2,r2,r2
   132c4:	1405883a 	add	r2,r2,r16
   132c8:	113fff17 	ldw	r4,-4(r2)
   132cc:	30fef384 	addi	r3,r6,-1074
   132d0:	2820917a 	slli	r16,r5,5
   132d4:	b0c00015 	stw	r3,0(r22)
   132d8:	0012abc0 	call	12abc <__hi0bits>
   132dc:	80a1c83a 	sub	r16,r16,r2
   132e0:	bc000015 	stw	r16,0(r23)
   132e4:	003fe106 	br	1326c <__d2b+0xf0>
   132e8:	d8800017 	ldw	r2,0(sp)
   132ec:	90800515 	stw	r2,20(r18)
   132f0:	d8c00117 	ldw	r3,4(sp)
   132f4:	003fd106 	br	1323c <__d2b+0xc0>

000132f8 <__mdiff>:
   132f8:	defffb04 	addi	sp,sp,-20
   132fc:	dc000015 	stw	r16,0(sp)
   13300:	2821883a 	mov	r16,r5
   13304:	dc800215 	stw	r18,8(sp)
   13308:	300b883a 	mov	r5,r6
   1330c:	2025883a 	mov	r18,r4
   13310:	8009883a 	mov	r4,r16
   13314:	dc400115 	stw	r17,4(sp)
   13318:	dfc00415 	stw	ra,16(sp)
   1331c:	dcc00315 	stw	r19,12(sp)
   13320:	3023883a 	mov	r17,r6
   13324:	0012bf00 	call	12bf0 <__mcmp>
   13328:	10004226 	beq	r2,zero,13434 <__mdiff+0x13c>
   1332c:	10005016 	blt	r2,zero,13470 <__mdiff+0x178>
   13330:	0027883a 	mov	r19,zero
   13334:	81400117 	ldw	r5,4(r16)
   13338:	9009883a 	mov	r4,r18
   1333c:	001308c0 	call	1308c <_Balloc>
   13340:	1019883a 	mov	r12,r2
   13344:	82800417 	ldw	r10,16(r16)
   13348:	88800417 	ldw	r2,16(r17)
   1334c:	81800504 	addi	r6,r16,20
   13350:	5287883a 	add	r3,r10,r10
   13354:	1085883a 	add	r2,r2,r2
   13358:	18c7883a 	add	r3,r3,r3
   1335c:	1085883a 	add	r2,r2,r2
   13360:	8a000504 	addi	r8,r17,20
   13364:	64c00315 	stw	r19,12(r12)
   13368:	30db883a 	add	r13,r6,r3
   1336c:	4097883a 	add	r11,r8,r2
   13370:	61c00504 	addi	r7,r12,20
   13374:	0013883a 	mov	r9,zero
   13378:	31000017 	ldw	r4,0(r6)
   1337c:	41400017 	ldw	r5,0(r8)
   13380:	42000104 	addi	r8,r8,4
   13384:	20bfffcc 	andi	r2,r4,65535
   13388:	28ffffcc 	andi	r3,r5,65535
   1338c:	10c5c83a 	sub	r2,r2,r3
   13390:	1245883a 	add	r2,r2,r9
   13394:	2008d43a 	srli	r4,r4,16
   13398:	280ad43a 	srli	r5,r5,16
   1339c:	1007d43a 	srai	r3,r2,16
   133a0:	3880000d 	sth	r2,0(r7)
   133a4:	2149c83a 	sub	r4,r4,r5
   133a8:	20c9883a 	add	r4,r4,r3
   133ac:	3900008d 	sth	r4,2(r7)
   133b0:	31800104 	addi	r6,r6,4
   133b4:	39c00104 	addi	r7,r7,4
   133b8:	2013d43a 	srai	r9,r4,16
   133bc:	42ffee36 	bltu	r8,r11,13378 <__mdiff+0x80>
   133c0:	33400c2e 	bgeu	r6,r13,133f4 <__mdiff+0xfc>
   133c4:	30800017 	ldw	r2,0(r6)
   133c8:	31800104 	addi	r6,r6,4
   133cc:	10ffffcc 	andi	r3,r2,65535
   133d0:	1a47883a 	add	r3,r3,r9
   133d4:	1004d43a 	srli	r2,r2,16
   133d8:	1809d43a 	srai	r4,r3,16
   133dc:	38c0000d 	sth	r3,0(r7)
   133e0:	1105883a 	add	r2,r2,r4
   133e4:	3880008d 	sth	r2,2(r7)
   133e8:	1013d43a 	srai	r9,r2,16
   133ec:	39c00104 	addi	r7,r7,4
   133f0:	337ff436 	bltu	r6,r13,133c4 <__mdiff+0xcc>
   133f4:	38bfff17 	ldw	r2,-4(r7)
   133f8:	38ffff04 	addi	r3,r7,-4
   133fc:	1000041e 	bne	r2,zero,13410 <__mdiff+0x118>
   13400:	18ffff04 	addi	r3,r3,-4
   13404:	18800017 	ldw	r2,0(r3)
   13408:	52bfffc4 	addi	r10,r10,-1
   1340c:	103ffc26 	beq	r2,zero,13400 <__mdiff+0x108>
   13410:	6005883a 	mov	r2,r12
   13414:	62800415 	stw	r10,16(r12)
   13418:	dfc00417 	ldw	ra,16(sp)
   1341c:	dcc00317 	ldw	r19,12(sp)
   13420:	dc800217 	ldw	r18,8(sp)
   13424:	dc400117 	ldw	r17,4(sp)
   13428:	dc000017 	ldw	r16,0(sp)
   1342c:	dec00504 	addi	sp,sp,20
   13430:	f800283a 	ret
   13434:	9009883a 	mov	r4,r18
   13438:	000b883a 	mov	r5,zero
   1343c:	001308c0 	call	1308c <_Balloc>
   13440:	1019883a 	mov	r12,r2
   13444:	00800044 	movi	r2,1
   13448:	60800415 	stw	r2,16(r12)
   1344c:	6005883a 	mov	r2,r12
   13450:	60000515 	stw	zero,20(r12)
   13454:	dfc00417 	ldw	ra,16(sp)
   13458:	dcc00317 	ldw	r19,12(sp)
   1345c:	dc800217 	ldw	r18,8(sp)
   13460:	dc400117 	ldw	r17,4(sp)
   13464:	dc000017 	ldw	r16,0(sp)
   13468:	dec00504 	addi	sp,sp,20
   1346c:	f800283a 	ret
   13470:	880d883a 	mov	r6,r17
   13474:	04c00044 	movi	r19,1
   13478:	8023883a 	mov	r17,r16
   1347c:	3021883a 	mov	r16,r6
   13480:	003fac06 	br	13334 <__mdiff+0x3c>

00013484 <__lshift>:
   13484:	defff904 	addi	sp,sp,-28
   13488:	28800417 	ldw	r2,16(r5)
   1348c:	dc000015 	stw	r16,0(sp)
   13490:	3021d17a 	srai	r16,r6,5
   13494:	28c00217 	ldw	r3,8(r5)
   13498:	10800044 	addi	r2,r2,1
   1349c:	dc400115 	stw	r17,4(sp)
   134a0:	80a3883a 	add	r17,r16,r2
   134a4:	dd400515 	stw	r21,20(sp)
   134a8:	dd000415 	stw	r20,16(sp)
   134ac:	dc800215 	stw	r18,8(sp)
   134b0:	dfc00615 	stw	ra,24(sp)
   134b4:	2825883a 	mov	r18,r5
   134b8:	dcc00315 	stw	r19,12(sp)
   134bc:	3029883a 	mov	r20,r6
   134c0:	202b883a 	mov	r21,r4
   134c4:	29400117 	ldw	r5,4(r5)
   134c8:	1c40030e 	bge	r3,r17,134d8 <__lshift+0x54>
   134cc:	18c7883a 	add	r3,r3,r3
   134d0:	29400044 	addi	r5,r5,1
   134d4:	1c7ffd16 	blt	r3,r17,134cc <__lshift+0x48>
   134d8:	a809883a 	mov	r4,r21
   134dc:	001308c0 	call	1308c <_Balloc>
   134e0:	1027883a 	mov	r19,r2
   134e4:	11400504 	addi	r5,r2,20
   134e8:	0400090e 	bge	zero,r16,13510 <__lshift+0x8c>
   134ec:	2805883a 	mov	r2,r5
   134f0:	0007883a 	mov	r3,zero
   134f4:	18c00044 	addi	r3,r3,1
   134f8:	10000015 	stw	zero,0(r2)
   134fc:	10800104 	addi	r2,r2,4
   13500:	80fffc1e 	bne	r16,r3,134f4 <__lshift+0x70>
   13504:	8405883a 	add	r2,r16,r16
   13508:	1085883a 	add	r2,r2,r2
   1350c:	288b883a 	add	r5,r5,r2
   13510:	90800417 	ldw	r2,16(r18)
   13514:	91000504 	addi	r4,r18,20
   13518:	a18007cc 	andi	r6,r20,31
   1351c:	1085883a 	add	r2,r2,r2
   13520:	1085883a 	add	r2,r2,r2
   13524:	208f883a 	add	r7,r4,r2
   13528:	30001e26 	beq	r6,zero,135a4 <__lshift+0x120>
   1352c:	00800804 	movi	r2,32
   13530:	1191c83a 	sub	r8,r2,r6
   13534:	0007883a 	mov	r3,zero
   13538:	20800017 	ldw	r2,0(r4)
   1353c:	1184983a 	sll	r2,r2,r6
   13540:	1884b03a 	or	r2,r3,r2
   13544:	28800015 	stw	r2,0(r5)
   13548:	20c00017 	ldw	r3,0(r4)
   1354c:	21000104 	addi	r4,r4,4
   13550:	29400104 	addi	r5,r5,4
   13554:	1a06d83a 	srl	r3,r3,r8
   13558:	21fff736 	bltu	r4,r7,13538 <__lshift+0xb4>
   1355c:	28c00015 	stw	r3,0(r5)
   13560:	18000126 	beq	r3,zero,13568 <__lshift+0xe4>
   13564:	8c400044 	addi	r17,r17,1
   13568:	88bfffc4 	addi	r2,r17,-1
   1356c:	98800415 	stw	r2,16(r19)
   13570:	a809883a 	mov	r4,r21
   13574:	900b883a 	mov	r5,r18
   13578:	00130140 	call	13014 <_Bfree>
   1357c:	9805883a 	mov	r2,r19
   13580:	dfc00617 	ldw	ra,24(sp)
   13584:	dd400517 	ldw	r21,20(sp)
   13588:	dd000417 	ldw	r20,16(sp)
   1358c:	dcc00317 	ldw	r19,12(sp)
   13590:	dc800217 	ldw	r18,8(sp)
   13594:	dc400117 	ldw	r17,4(sp)
   13598:	dc000017 	ldw	r16,0(sp)
   1359c:	dec00704 	addi	sp,sp,28
   135a0:	f800283a 	ret
   135a4:	20800017 	ldw	r2,0(r4)
   135a8:	21000104 	addi	r4,r4,4
   135ac:	28800015 	stw	r2,0(r5)
   135b0:	29400104 	addi	r5,r5,4
   135b4:	21ffec2e 	bgeu	r4,r7,13568 <__lshift+0xe4>
   135b8:	20800017 	ldw	r2,0(r4)
   135bc:	21000104 	addi	r4,r4,4
   135c0:	28800015 	stw	r2,0(r5)
   135c4:	29400104 	addi	r5,r5,4
   135c8:	21fff636 	bltu	r4,r7,135a4 <__lshift+0x120>
   135cc:	003fe606 	br	13568 <__lshift+0xe4>

000135d0 <__multiply>:
   135d0:	defff004 	addi	sp,sp,-64
   135d4:	dc800815 	stw	r18,32(sp)
   135d8:	dc400715 	stw	r17,28(sp)
   135dc:	2c800417 	ldw	r18,16(r5)
   135e0:	34400417 	ldw	r17,16(r6)
   135e4:	dcc00915 	stw	r19,36(sp)
   135e8:	dc000615 	stw	r16,24(sp)
   135ec:	dfc00f15 	stw	ra,60(sp)
   135f0:	df000e15 	stw	fp,56(sp)
   135f4:	ddc00d15 	stw	r23,52(sp)
   135f8:	dd800c15 	stw	r22,48(sp)
   135fc:	dd400b15 	stw	r21,44(sp)
   13600:	dd000a15 	stw	r20,40(sp)
   13604:	2821883a 	mov	r16,r5
   13608:	3027883a 	mov	r19,r6
   1360c:	9440040e 	bge	r18,r17,13620 <__multiply+0x50>
   13610:	8825883a 	mov	r18,r17
   13614:	2c400417 	ldw	r17,16(r5)
   13618:	2827883a 	mov	r19,r5
   1361c:	3021883a 	mov	r16,r6
   13620:	80800217 	ldw	r2,8(r16)
   13624:	9447883a 	add	r3,r18,r17
   13628:	d8c00415 	stw	r3,16(sp)
   1362c:	81400117 	ldw	r5,4(r16)
   13630:	10c0010e 	bge	r2,r3,13638 <__multiply+0x68>
   13634:	29400044 	addi	r5,r5,1
   13638:	001308c0 	call	1308c <_Balloc>
   1363c:	d8800515 	stw	r2,20(sp)
   13640:	d9000417 	ldw	r4,16(sp)
   13644:	d8c00517 	ldw	r3,20(sp)
   13648:	2105883a 	add	r2,r4,r4
   1364c:	1085883a 	add	r2,r2,r2
   13650:	19000504 	addi	r4,r3,20
   13654:	2085883a 	add	r2,r4,r2
   13658:	d8800315 	stw	r2,12(sp)
   1365c:	2080052e 	bgeu	r4,r2,13674 <__multiply+0xa4>
   13660:	2005883a 	mov	r2,r4
   13664:	d8c00317 	ldw	r3,12(sp)
   13668:	10000015 	stw	zero,0(r2)
   1366c:	10800104 	addi	r2,r2,4
   13670:	10fffc36 	bltu	r2,r3,13664 <__multiply+0x94>
   13674:	8c45883a 	add	r2,r17,r17
   13678:	9487883a 	add	r3,r18,r18
   1367c:	9dc00504 	addi	r23,r19,20
   13680:	1085883a 	add	r2,r2,r2
   13684:	84000504 	addi	r16,r16,20
   13688:	18c7883a 	add	r3,r3,r3
   1368c:	b885883a 	add	r2,r23,r2
   13690:	dc000015 	stw	r16,0(sp)
   13694:	d8800215 	stw	r2,8(sp)
   13698:	80f9883a 	add	fp,r16,r3
   1369c:	b880432e 	bgeu	r23,r2,137ac <__multiply+0x1dc>
   136a0:	d9000115 	stw	r4,4(sp)
   136a4:	b9000017 	ldw	r4,0(r23)
   136a8:	253fffcc 	andi	r20,r4,65535
   136ac:	a0001a26 	beq	r20,zero,13718 <__multiply+0x148>
   136b0:	dcc00017 	ldw	r19,0(sp)
   136b4:	dc800117 	ldw	r18,4(sp)
   136b8:	002b883a 	mov	r21,zero
   136bc:	9c400017 	ldw	r17,0(r19)
   136c0:	94000017 	ldw	r16,0(r18)
   136c4:	a009883a 	mov	r4,r20
   136c8:	897fffcc 	andi	r5,r17,65535
   136cc:	0011c3c0 	call	11c3c <__mulsi3>
   136d0:	880ad43a 	srli	r5,r17,16
   136d4:	80ffffcc 	andi	r3,r16,65535
   136d8:	a8c7883a 	add	r3,r21,r3
   136dc:	a009883a 	mov	r4,r20
   136e0:	10e3883a 	add	r17,r2,r3
   136e4:	8020d43a 	srli	r16,r16,16
   136e8:	0011c3c0 	call	11c3c <__mulsi3>
   136ec:	8806d43a 	srli	r3,r17,16
   136f0:	1405883a 	add	r2,r2,r16
   136f4:	9cc00104 	addi	r19,r19,4
   136f8:	1887883a 	add	r3,r3,r2
   136fc:	90c0008d 	sth	r3,2(r18)
   13700:	9440000d 	sth	r17,0(r18)
   13704:	182ad43a 	srli	r21,r3,16
   13708:	94800104 	addi	r18,r18,4
   1370c:	9f3feb36 	bltu	r19,fp,136bc <__multiply+0xec>
   13710:	95400015 	stw	r21,0(r18)
   13714:	b9000017 	ldw	r4,0(r23)
   13718:	202ad43a 	srli	r21,r4,16
   1371c:	a8001c26 	beq	r21,zero,13790 <__multiply+0x1c0>
   13720:	d9000117 	ldw	r4,4(sp)
   13724:	dd000017 	ldw	r20,0(sp)
   13728:	002d883a 	mov	r22,zero
   1372c:	24c00017 	ldw	r19,0(r4)
   13730:	2025883a 	mov	r18,r4
   13734:	9823883a 	mov	r17,r19
   13738:	a4000017 	ldw	r16,0(r20)
   1373c:	a809883a 	mov	r4,r21
   13740:	a5000104 	addi	r20,r20,4
   13744:	817fffcc 	andi	r5,r16,65535
   13748:	0011c3c0 	call	11c3c <__mulsi3>
   1374c:	8806d43a 	srli	r3,r17,16
   13750:	800ad43a 	srli	r5,r16,16
   13754:	94c0000d 	sth	r19,0(r18)
   13758:	b0c7883a 	add	r3,r22,r3
   1375c:	10e1883a 	add	r16,r2,r3
   13760:	9400008d 	sth	r16,2(r18)
   13764:	a809883a 	mov	r4,r21
   13768:	94800104 	addi	r18,r18,4
   1376c:	0011c3c0 	call	11c3c <__mulsi3>
   13770:	94400017 	ldw	r17,0(r18)
   13774:	8020d43a 	srli	r16,r16,16
   13778:	88ffffcc 	andi	r3,r17,65535
   1377c:	10c5883a 	add	r2,r2,r3
   13780:	80a7883a 	add	r19,r16,r2
   13784:	982cd43a 	srli	r22,r19,16
   13788:	a73feb36 	bltu	r20,fp,13738 <__multiply+0x168>
   1378c:	94c00015 	stw	r19,0(r18)
   13790:	d8800217 	ldw	r2,8(sp)
   13794:	bdc00104 	addi	r23,r23,4
   13798:	b880042e 	bgeu	r23,r2,137ac <__multiply+0x1dc>
   1379c:	d8c00117 	ldw	r3,4(sp)
   137a0:	18c00104 	addi	r3,r3,4
   137a4:	d8c00115 	stw	r3,4(sp)
   137a8:	003fbe06 	br	136a4 <__multiply+0xd4>
   137ac:	d9000417 	ldw	r4,16(sp)
   137b0:	01000c0e 	bge	zero,r4,137e4 <__multiply+0x214>
   137b4:	d8c00317 	ldw	r3,12(sp)
   137b8:	18bfff17 	ldw	r2,-4(r3)
   137bc:	18ffff04 	addi	r3,r3,-4
   137c0:	10000326 	beq	r2,zero,137d0 <__multiply+0x200>
   137c4:	00000706 	br	137e4 <__multiply+0x214>
   137c8:	18800017 	ldw	r2,0(r3)
   137cc:	1000051e 	bne	r2,zero,137e4 <__multiply+0x214>
   137d0:	d9000417 	ldw	r4,16(sp)
   137d4:	18ffff04 	addi	r3,r3,-4
   137d8:	213fffc4 	addi	r4,r4,-1
   137dc:	d9000415 	stw	r4,16(sp)
   137e0:	203ff91e 	bne	r4,zero,137c8 <__multiply+0x1f8>
   137e4:	d8800417 	ldw	r2,16(sp)
   137e8:	d8c00517 	ldw	r3,20(sp)
   137ec:	18800415 	stw	r2,16(r3)
   137f0:	1805883a 	mov	r2,r3
   137f4:	dfc00f17 	ldw	ra,60(sp)
   137f8:	df000e17 	ldw	fp,56(sp)
   137fc:	ddc00d17 	ldw	r23,52(sp)
   13800:	dd800c17 	ldw	r22,48(sp)
   13804:	dd400b17 	ldw	r21,44(sp)
   13808:	dd000a17 	ldw	r20,40(sp)
   1380c:	dcc00917 	ldw	r19,36(sp)
   13810:	dc800817 	ldw	r18,32(sp)
   13814:	dc400717 	ldw	r17,28(sp)
   13818:	dc000617 	ldw	r16,24(sp)
   1381c:	dec01004 	addi	sp,sp,64
   13820:	f800283a 	ret

00013824 <__i2b>:
   13824:	defffd04 	addi	sp,sp,-12
   13828:	dc000015 	stw	r16,0(sp)
   1382c:	04000044 	movi	r16,1
   13830:	dc800115 	stw	r18,4(sp)
   13834:	2825883a 	mov	r18,r5
   13838:	800b883a 	mov	r5,r16
   1383c:	dfc00215 	stw	ra,8(sp)
   13840:	001308c0 	call	1308c <_Balloc>
   13844:	14000415 	stw	r16,16(r2)
   13848:	14800515 	stw	r18,20(r2)
   1384c:	dfc00217 	ldw	ra,8(sp)
   13850:	dc800117 	ldw	r18,4(sp)
   13854:	dc000017 	ldw	r16,0(sp)
   13858:	dec00304 	addi	sp,sp,12
   1385c:	f800283a 	ret

00013860 <__multadd>:
   13860:	defff604 	addi	sp,sp,-40
   13864:	dd800615 	stw	r22,24(sp)
   13868:	2d800417 	ldw	r22,16(r5)
   1386c:	df000815 	stw	fp,32(sp)
   13870:	ddc00715 	stw	r23,28(sp)
   13874:	dd400515 	stw	r21,20(sp)
   13878:	dd000415 	stw	r20,16(sp)
   1387c:	dcc00315 	stw	r19,12(sp)
   13880:	dc800215 	stw	r18,8(sp)
   13884:	dfc00915 	stw	ra,36(sp)
   13888:	dc400115 	stw	r17,4(sp)
   1388c:	dc000015 	stw	r16,0(sp)
   13890:	282f883a 	mov	r23,r5
   13894:	2039883a 	mov	fp,r4
   13898:	302b883a 	mov	r21,r6
   1389c:	3829883a 	mov	r20,r7
   138a0:	2c800504 	addi	r18,r5,20
   138a4:	0027883a 	mov	r19,zero
   138a8:	94400017 	ldw	r17,0(r18)
   138ac:	a80b883a 	mov	r5,r21
   138b0:	9cc00044 	addi	r19,r19,1
   138b4:	893fffcc 	andi	r4,r17,65535
   138b8:	0011c3c0 	call	11c3c <__mulsi3>
   138bc:	8808d43a 	srli	r4,r17,16
   138c0:	1521883a 	add	r16,r2,r20
   138c4:	a80b883a 	mov	r5,r21
   138c8:	0011c3c0 	call	11c3c <__mulsi3>
   138cc:	8008d43a 	srli	r4,r16,16
   138d0:	843fffcc 	andi	r16,r16,65535
   138d4:	1105883a 	add	r2,r2,r4
   138d8:	1006943a 	slli	r3,r2,16
   138dc:	1028d43a 	srli	r20,r2,16
   138e0:	1c07883a 	add	r3,r3,r16
   138e4:	90c00015 	stw	r3,0(r18)
   138e8:	94800104 	addi	r18,r18,4
   138ec:	9dbfee16 	blt	r19,r22,138a8 <__multadd+0x48>
   138f0:	a0000826 	beq	r20,zero,13914 <__multadd+0xb4>
   138f4:	b8800217 	ldw	r2,8(r23)
   138f8:	b080130e 	bge	r22,r2,13948 <__multadd+0xe8>
   138fc:	b585883a 	add	r2,r22,r22
   13900:	1085883a 	add	r2,r2,r2
   13904:	15c5883a 	add	r2,r2,r23
   13908:	b0c00044 	addi	r3,r22,1
   1390c:	15000515 	stw	r20,20(r2)
   13910:	b8c00415 	stw	r3,16(r23)
   13914:	b805883a 	mov	r2,r23
   13918:	dfc00917 	ldw	ra,36(sp)
   1391c:	df000817 	ldw	fp,32(sp)
   13920:	ddc00717 	ldw	r23,28(sp)
   13924:	dd800617 	ldw	r22,24(sp)
   13928:	dd400517 	ldw	r21,20(sp)
   1392c:	dd000417 	ldw	r20,16(sp)
   13930:	dcc00317 	ldw	r19,12(sp)
   13934:	dc800217 	ldw	r18,8(sp)
   13938:	dc400117 	ldw	r17,4(sp)
   1393c:	dc000017 	ldw	r16,0(sp)
   13940:	dec00a04 	addi	sp,sp,40
   13944:	f800283a 	ret
   13948:	b9400117 	ldw	r5,4(r23)
   1394c:	e009883a 	mov	r4,fp
   13950:	29400044 	addi	r5,r5,1
   13954:	001308c0 	call	1308c <_Balloc>
   13958:	b9800417 	ldw	r6,16(r23)
   1395c:	b9400304 	addi	r5,r23,12
   13960:	11000304 	addi	r4,r2,12
   13964:	318d883a 	add	r6,r6,r6
   13968:	318d883a 	add	r6,r6,r6
   1396c:	31800204 	addi	r6,r6,8
   13970:	1023883a 	mov	r17,r2
   13974:	001672c0 	call	1672c <memcpy>
   13978:	b80b883a 	mov	r5,r23
   1397c:	e009883a 	mov	r4,fp
   13980:	00130140 	call	13014 <_Bfree>
   13984:	882f883a 	mov	r23,r17
   13988:	003fdc06 	br	138fc <__multadd+0x9c>

0001398c <__pow5mult>:
   1398c:	defffa04 	addi	sp,sp,-24
   13990:	308000cc 	andi	r2,r6,3
   13994:	dd000415 	stw	r20,16(sp)
   13998:	dcc00315 	stw	r19,12(sp)
   1399c:	dc000015 	stw	r16,0(sp)
   139a0:	dfc00515 	stw	ra,20(sp)
   139a4:	dc800215 	stw	r18,8(sp)
   139a8:	dc400115 	stw	r17,4(sp)
   139ac:	3021883a 	mov	r16,r6
   139b0:	2027883a 	mov	r19,r4
   139b4:	2829883a 	mov	r20,r5
   139b8:	10002d1e 	bne	r2,zero,13a70 <__pow5mult+0xe4>
   139bc:	8025d0ba 	srai	r18,r16,2
   139c0:	90001d26 	beq	r18,zero,13a38 <__pow5mult+0xac>
   139c4:	9c400417 	ldw	r17,16(r19)
   139c8:	88003a26 	beq	r17,zero,13ab4 <__pow5mult+0x128>
   139cc:	8c000217 	ldw	r16,8(r17)
   139d0:	8000081e 	bne	r16,zero,139f4 <__pow5mult+0x68>
   139d4:	00003006 	br	13a98 <__pow5mult+0x10c>
   139d8:	800b883a 	mov	r5,r16
   139dc:	800d883a 	mov	r6,r16
   139e0:	9809883a 	mov	r4,r19
   139e4:	90001426 	beq	r18,zero,13a38 <__pow5mult+0xac>
   139e8:	80800017 	ldw	r2,0(r16)
   139ec:	10001b26 	beq	r2,zero,13a5c <__pow5mult+0xd0>
   139f0:	1021883a 	mov	r16,r2
   139f4:	9080004c 	andi	r2,r18,1
   139f8:	1005003a 	cmpeq	r2,r2,zero
   139fc:	9025d07a 	srai	r18,r18,1
   13a00:	800d883a 	mov	r6,r16
   13a04:	9809883a 	mov	r4,r19
   13a08:	a00b883a 	mov	r5,r20
   13a0c:	103ff21e 	bne	r2,zero,139d8 <__pow5mult+0x4c>
   13a10:	00135d00 	call	135d0 <__multiply>
   13a14:	a00b883a 	mov	r5,r20
   13a18:	9809883a 	mov	r4,r19
   13a1c:	1023883a 	mov	r17,r2
   13a20:	00130140 	call	13014 <_Bfree>
   13a24:	8829883a 	mov	r20,r17
   13a28:	800b883a 	mov	r5,r16
   13a2c:	800d883a 	mov	r6,r16
   13a30:	9809883a 	mov	r4,r19
   13a34:	903fec1e 	bne	r18,zero,139e8 <__pow5mult+0x5c>
   13a38:	a005883a 	mov	r2,r20
   13a3c:	dfc00517 	ldw	ra,20(sp)
   13a40:	dd000417 	ldw	r20,16(sp)
   13a44:	dcc00317 	ldw	r19,12(sp)
   13a48:	dc800217 	ldw	r18,8(sp)
   13a4c:	dc400117 	ldw	r17,4(sp)
   13a50:	dc000017 	ldw	r16,0(sp)
   13a54:	dec00604 	addi	sp,sp,24
   13a58:	f800283a 	ret
   13a5c:	00135d00 	call	135d0 <__multiply>
   13a60:	80800015 	stw	r2,0(r16)
   13a64:	1021883a 	mov	r16,r2
   13a68:	10000015 	stw	zero,0(r2)
   13a6c:	003fe106 	br	139f4 <__pow5mult+0x68>
   13a70:	1085883a 	add	r2,r2,r2
   13a74:	00c000b4 	movhi	r3,2
   13a78:	18e49304 	addi	r3,r3,-28084
   13a7c:	1085883a 	add	r2,r2,r2
   13a80:	10c5883a 	add	r2,r2,r3
   13a84:	11bfff17 	ldw	r6,-4(r2)
   13a88:	000f883a 	mov	r7,zero
   13a8c:	00138600 	call	13860 <__multadd>
   13a90:	1029883a 	mov	r20,r2
   13a94:	003fc906 	br	139bc <__pow5mult+0x30>
   13a98:	9809883a 	mov	r4,r19
   13a9c:	01409c44 	movi	r5,625
   13aa0:	00138240 	call	13824 <__i2b>
   13aa4:	88800215 	stw	r2,8(r17)
   13aa8:	1021883a 	mov	r16,r2
   13aac:	10000015 	stw	zero,0(r2)
   13ab0:	003fd006 	br	139f4 <__pow5mult+0x68>
   13ab4:	01000404 	movi	r4,16
   13ab8:	0015fd80 	call	15fd8 <malloc>
   13abc:	1023883a 	mov	r17,r2
   13ac0:	98800415 	stw	r2,16(r19)
   13ac4:	10000115 	stw	zero,4(r2)
   13ac8:	10000215 	stw	zero,8(r2)
   13acc:	10000015 	stw	zero,0(r2)
   13ad0:	10000315 	stw	zero,12(r2)
   13ad4:	003fbd06 	br	139cc <__pow5mult+0x40>

00013ad8 <__s2b>:
   13ad8:	defff904 	addi	sp,sp,-28
   13adc:	dcc00315 	stw	r19,12(sp)
   13ae0:	dc800215 	stw	r18,8(sp)
   13ae4:	2827883a 	mov	r19,r5
   13ae8:	2025883a 	mov	r18,r4
   13aec:	01400244 	movi	r5,9
   13af0:	39000204 	addi	r4,r7,8
   13af4:	dd000415 	stw	r20,16(sp)
   13af8:	dc400115 	stw	r17,4(sp)
   13afc:	dfc00615 	stw	ra,24(sp)
   13b00:	dd400515 	stw	r21,20(sp)
   13b04:	dc000015 	stw	r16,0(sp)
   13b08:	3829883a 	mov	r20,r7
   13b0c:	3023883a 	mov	r17,r6
   13b10:	00172e80 	call	172e8 <__divsi3>
   13b14:	00c00044 	movi	r3,1
   13b18:	1880350e 	bge	r3,r2,13bf0 <__s2b+0x118>
   13b1c:	000b883a 	mov	r5,zero
   13b20:	18c7883a 	add	r3,r3,r3
   13b24:	29400044 	addi	r5,r5,1
   13b28:	18bffd16 	blt	r3,r2,13b20 <__s2b+0x48>
   13b2c:	9009883a 	mov	r4,r18
   13b30:	001308c0 	call	1308c <_Balloc>
   13b34:	1011883a 	mov	r8,r2
   13b38:	d8800717 	ldw	r2,28(sp)
   13b3c:	00c00044 	movi	r3,1
   13b40:	01800244 	movi	r6,9
   13b44:	40800515 	stw	r2,20(r8)
   13b48:	40c00415 	stw	r3,16(r8)
   13b4c:	3440260e 	bge	r6,r17,13be8 <__s2b+0x110>
   13b50:	3021883a 	mov	r16,r6
   13b54:	99ab883a 	add	r21,r19,r6
   13b58:	9c05883a 	add	r2,r19,r16
   13b5c:	11c00007 	ldb	r7,0(r2)
   13b60:	400b883a 	mov	r5,r8
   13b64:	9009883a 	mov	r4,r18
   13b68:	39fff404 	addi	r7,r7,-48
   13b6c:	01800284 	movi	r6,10
   13b70:	00138600 	call	13860 <__multadd>
   13b74:	84000044 	addi	r16,r16,1
   13b78:	1011883a 	mov	r8,r2
   13b7c:	8c3ff61e 	bne	r17,r16,13b58 <__s2b+0x80>
   13b80:	ac45883a 	add	r2,r21,r17
   13b84:	117ffe04 	addi	r5,r2,-8
   13b88:	880d883a 	mov	r6,r17
   13b8c:	35000c0e 	bge	r6,r20,13bc0 <__s2b+0xe8>
   13b90:	a185c83a 	sub	r2,r20,r6
   13b94:	2821883a 	mov	r16,r5
   13b98:	28a3883a 	add	r17,r5,r2
   13b9c:	81c00007 	ldb	r7,0(r16)
   13ba0:	400b883a 	mov	r5,r8
   13ba4:	9009883a 	mov	r4,r18
   13ba8:	39fff404 	addi	r7,r7,-48
   13bac:	01800284 	movi	r6,10
   13bb0:	00138600 	call	13860 <__multadd>
   13bb4:	84000044 	addi	r16,r16,1
   13bb8:	1011883a 	mov	r8,r2
   13bbc:	847ff71e 	bne	r16,r17,13b9c <__s2b+0xc4>
   13bc0:	4005883a 	mov	r2,r8
   13bc4:	dfc00617 	ldw	ra,24(sp)
   13bc8:	dd400517 	ldw	r21,20(sp)
   13bcc:	dd000417 	ldw	r20,16(sp)
   13bd0:	dcc00317 	ldw	r19,12(sp)
   13bd4:	dc800217 	ldw	r18,8(sp)
   13bd8:	dc400117 	ldw	r17,4(sp)
   13bdc:	dc000017 	ldw	r16,0(sp)
   13be0:	dec00704 	addi	sp,sp,28
   13be4:	f800283a 	ret
   13be8:	99400284 	addi	r5,r19,10
   13bec:	003fe706 	br	13b8c <__s2b+0xb4>
   13bf0:	000b883a 	mov	r5,zero
   13bf4:	003fcd06 	br	13b2c <__s2b+0x54>

00013bf8 <_realloc_r>:
   13bf8:	defff404 	addi	sp,sp,-48
   13bfc:	dd800815 	stw	r22,32(sp)
   13c00:	dc800415 	stw	r18,16(sp)
   13c04:	dc400315 	stw	r17,12(sp)
   13c08:	dfc00b15 	stw	ra,44(sp)
   13c0c:	df000a15 	stw	fp,40(sp)
   13c10:	ddc00915 	stw	r23,36(sp)
   13c14:	dd400715 	stw	r21,28(sp)
   13c18:	dd000615 	stw	r20,24(sp)
   13c1c:	dcc00515 	stw	r19,20(sp)
   13c20:	dc000215 	stw	r16,8(sp)
   13c24:	2825883a 	mov	r18,r5
   13c28:	3023883a 	mov	r17,r6
   13c2c:	202d883a 	mov	r22,r4
   13c30:	2800c926 	beq	r5,zero,13f58 <_realloc_r+0x360>
   13c34:	00175c80 	call	175c8 <__malloc_lock>
   13c38:	943ffe04 	addi	r16,r18,-8
   13c3c:	88c002c4 	addi	r3,r17,11
   13c40:	00800584 	movi	r2,22
   13c44:	82000117 	ldw	r8,4(r16)
   13c48:	10c01b2e 	bgeu	r2,r3,13cb8 <_realloc_r+0xc0>
   13c4c:	00bffe04 	movi	r2,-8
   13c50:	188e703a 	and	r7,r3,r2
   13c54:	3839883a 	mov	fp,r7
   13c58:	38001a16 	blt	r7,zero,13cc4 <_realloc_r+0xcc>
   13c5c:	e4401936 	bltu	fp,r17,13cc4 <_realloc_r+0xcc>
   13c60:	013fff04 	movi	r4,-4
   13c64:	4126703a 	and	r19,r8,r4
   13c68:	99c02616 	blt	r19,r7,13d04 <_realloc_r+0x10c>
   13c6c:	802b883a 	mov	r21,r16
   13c70:	9829883a 	mov	r20,r19
   13c74:	84000204 	addi	r16,r16,8
   13c78:	a80f883a 	mov	r7,r21
   13c7c:	a70dc83a 	sub	r6,r20,fp
   13c80:	008003c4 	movi	r2,15
   13c84:	1180c136 	bltu	r2,r6,13f8c <_realloc_r+0x394>
   13c88:	38800117 	ldw	r2,4(r7)
   13c8c:	a549883a 	add	r4,r20,r21
   13c90:	1080004c 	andi	r2,r2,1
   13c94:	a084b03a 	or	r2,r20,r2
   13c98:	38800115 	stw	r2,4(r7)
   13c9c:	20c00117 	ldw	r3,4(r4)
   13ca0:	18c00054 	ori	r3,r3,1
   13ca4:	20c00115 	stw	r3,4(r4)
   13ca8:	b009883a 	mov	r4,r22
   13cac:	00175e80 	call	175e8 <__malloc_unlock>
   13cb0:	8023883a 	mov	r17,r16
   13cb4:	00000606 	br	13cd0 <_realloc_r+0xd8>
   13cb8:	01c00404 	movi	r7,16
   13cbc:	3839883a 	mov	fp,r7
   13cc0:	e47fe72e 	bgeu	fp,r17,13c60 <_realloc_r+0x68>
   13cc4:	00800304 	movi	r2,12
   13cc8:	0023883a 	mov	r17,zero
   13ccc:	b0800015 	stw	r2,0(r22)
   13cd0:	8805883a 	mov	r2,r17
   13cd4:	dfc00b17 	ldw	ra,44(sp)
   13cd8:	df000a17 	ldw	fp,40(sp)
   13cdc:	ddc00917 	ldw	r23,36(sp)
   13ce0:	dd800817 	ldw	r22,32(sp)
   13ce4:	dd400717 	ldw	r21,28(sp)
   13ce8:	dd000617 	ldw	r20,24(sp)
   13cec:	dcc00517 	ldw	r19,20(sp)
   13cf0:	dc800417 	ldw	r18,16(sp)
   13cf4:	dc400317 	ldw	r17,12(sp)
   13cf8:	dc000217 	ldw	r16,8(sp)
   13cfc:	dec00c04 	addi	sp,sp,48
   13d00:	f800283a 	ret
   13d04:	008000b4 	movhi	r2,2
   13d08:	10a4de04 	addi	r2,r2,-27784
   13d0c:	12400217 	ldw	r9,8(r2)
   13d10:	84cd883a 	add	r6,r16,r19
   13d14:	802b883a 	mov	r21,r16
   13d18:	3240b926 	beq	r6,r9,14000 <_realloc_r+0x408>
   13d1c:	31400117 	ldw	r5,4(r6)
   13d20:	00bfff84 	movi	r2,-2
   13d24:	2884703a 	and	r2,r5,r2
   13d28:	1185883a 	add	r2,r2,r6
   13d2c:	10c00117 	ldw	r3,4(r2)
   13d30:	18c0004c 	andi	r3,r3,1
   13d34:	1807003a 	cmpeq	r3,r3,zero
   13d38:	1800a326 	beq	r3,zero,13fc8 <_realloc_r+0x3d0>
   13d3c:	2908703a 	and	r4,r5,r4
   13d40:	9929883a 	add	r20,r19,r4
   13d44:	a1c0a30e 	bge	r20,r7,13fd4 <_realloc_r+0x3dc>
   13d48:	4080004c 	andi	r2,r8,1
   13d4c:	1000551e 	bne	r2,zero,13ea4 <_realloc_r+0x2ac>
   13d50:	80800017 	ldw	r2,0(r16)
   13d54:	80afc83a 	sub	r23,r16,r2
   13d58:	b8c00117 	ldw	r3,4(r23)
   13d5c:	00bfff04 	movi	r2,-4
   13d60:	1884703a 	and	r2,r3,r2
   13d64:	30002e26 	beq	r6,zero,13e20 <_realloc_r+0x228>
   13d68:	3240b926 	beq	r6,r9,14050 <_realloc_r+0x458>
   13d6c:	98a9883a 	add	r20,r19,r2
   13d70:	2509883a 	add	r4,r4,r20
   13d74:	d9000015 	stw	r4,0(sp)
   13d78:	21c02a16 	blt	r4,r7,13e24 <_realloc_r+0x22c>
   13d7c:	30800317 	ldw	r2,12(r6)
   13d80:	30c00217 	ldw	r3,8(r6)
   13d84:	01400904 	movi	r5,36
   13d88:	99bfff04 	addi	r6,r19,-4
   13d8c:	18800315 	stw	r2,12(r3)
   13d90:	10c00215 	stw	r3,8(r2)
   13d94:	b9000317 	ldw	r4,12(r23)
   13d98:	b8800217 	ldw	r2,8(r23)
   13d9c:	b82b883a 	mov	r21,r23
   13da0:	bc000204 	addi	r16,r23,8
   13da4:	20800215 	stw	r2,8(r4)
   13da8:	11000315 	stw	r4,12(r2)
   13dac:	2980e436 	bltu	r5,r6,14140 <_realloc_r+0x548>
   13db0:	008004c4 	movi	r2,19
   13db4:	9009883a 	mov	r4,r18
   13db8:	8011883a 	mov	r8,r16
   13dbc:	11800f2e 	bgeu	r2,r6,13dfc <_realloc_r+0x204>
   13dc0:	90800017 	ldw	r2,0(r18)
   13dc4:	ba000404 	addi	r8,r23,16
   13dc8:	91000204 	addi	r4,r18,8
   13dcc:	b8800215 	stw	r2,8(r23)
   13dd0:	90c00117 	ldw	r3,4(r18)
   13dd4:	008006c4 	movi	r2,27
   13dd8:	b8c00315 	stw	r3,12(r23)
   13ddc:	1180072e 	bgeu	r2,r6,13dfc <_realloc_r+0x204>
   13de0:	90c00217 	ldw	r3,8(r18)
   13de4:	ba000604 	addi	r8,r23,24
   13de8:	91000404 	addi	r4,r18,16
   13dec:	b8c00415 	stw	r3,16(r23)
   13df0:	90800317 	ldw	r2,12(r18)
   13df4:	b8800515 	stw	r2,20(r23)
   13df8:	3140e726 	beq	r6,r5,14198 <_realloc_r+0x5a0>
   13dfc:	20800017 	ldw	r2,0(r4)
   13e00:	dd000017 	ldw	r20,0(sp)
   13e04:	b80f883a 	mov	r7,r23
   13e08:	40800015 	stw	r2,0(r8)
   13e0c:	20c00117 	ldw	r3,4(r4)
   13e10:	40c00115 	stw	r3,4(r8)
   13e14:	20800217 	ldw	r2,8(r4)
   13e18:	40800215 	stw	r2,8(r8)
   13e1c:	003f9706 	br	13c7c <_realloc_r+0x84>
   13e20:	98a9883a 	add	r20,r19,r2
   13e24:	a1c01f16 	blt	r20,r7,13ea4 <_realloc_r+0x2ac>
   13e28:	b8c00317 	ldw	r3,12(r23)
   13e2c:	b8800217 	ldw	r2,8(r23)
   13e30:	99bfff04 	addi	r6,r19,-4
   13e34:	01400904 	movi	r5,36
   13e38:	b82b883a 	mov	r21,r23
   13e3c:	18800215 	stw	r2,8(r3)
   13e40:	10c00315 	stw	r3,12(r2)
   13e44:	bc000204 	addi	r16,r23,8
   13e48:	2980c336 	bltu	r5,r6,14158 <_realloc_r+0x560>
   13e4c:	008004c4 	movi	r2,19
   13e50:	9009883a 	mov	r4,r18
   13e54:	8011883a 	mov	r8,r16
   13e58:	11800f2e 	bgeu	r2,r6,13e98 <_realloc_r+0x2a0>
   13e5c:	90800017 	ldw	r2,0(r18)
   13e60:	ba000404 	addi	r8,r23,16
   13e64:	91000204 	addi	r4,r18,8
   13e68:	b8800215 	stw	r2,8(r23)
   13e6c:	90c00117 	ldw	r3,4(r18)
   13e70:	008006c4 	movi	r2,27
   13e74:	b8c00315 	stw	r3,12(r23)
   13e78:	1180072e 	bgeu	r2,r6,13e98 <_realloc_r+0x2a0>
   13e7c:	90c00217 	ldw	r3,8(r18)
   13e80:	ba000604 	addi	r8,r23,24
   13e84:	91000404 	addi	r4,r18,16
   13e88:	b8c00415 	stw	r3,16(r23)
   13e8c:	90800317 	ldw	r2,12(r18)
   13e90:	b8800515 	stw	r2,20(r23)
   13e94:	3140c726 	beq	r6,r5,141b4 <_realloc_r+0x5bc>
   13e98:	20800017 	ldw	r2,0(r4)
   13e9c:	b80f883a 	mov	r7,r23
   13ea0:	003fd906 	br	13e08 <_realloc_r+0x210>
   13ea4:	880b883a 	mov	r5,r17
   13ea8:	b009883a 	mov	r4,r22
   13eac:	0015fec0 	call	15fec <_malloc_r>
   13eb0:	1023883a 	mov	r17,r2
   13eb4:	10002526 	beq	r2,zero,13f4c <_realloc_r+0x354>
   13eb8:	80800117 	ldw	r2,4(r16)
   13ebc:	00ffff84 	movi	r3,-2
   13ec0:	893ffe04 	addi	r4,r17,-8
   13ec4:	10c4703a 	and	r2,r2,r3
   13ec8:	8085883a 	add	r2,r16,r2
   13ecc:	20809526 	beq	r4,r2,14124 <_realloc_r+0x52c>
   13ed0:	99bfff04 	addi	r6,r19,-4
   13ed4:	01c00904 	movi	r7,36
   13ed8:	39804536 	bltu	r7,r6,13ff0 <_realloc_r+0x3f8>
   13edc:	008004c4 	movi	r2,19
   13ee0:	9009883a 	mov	r4,r18
   13ee4:	880b883a 	mov	r5,r17
   13ee8:	11800f2e 	bgeu	r2,r6,13f28 <_realloc_r+0x330>
   13eec:	90800017 	ldw	r2,0(r18)
   13ef0:	89400204 	addi	r5,r17,8
   13ef4:	91000204 	addi	r4,r18,8
   13ef8:	88800015 	stw	r2,0(r17)
   13efc:	90c00117 	ldw	r3,4(r18)
   13f00:	008006c4 	movi	r2,27
   13f04:	88c00115 	stw	r3,4(r17)
   13f08:	1180072e 	bgeu	r2,r6,13f28 <_realloc_r+0x330>
   13f0c:	90c00217 	ldw	r3,8(r18)
   13f10:	89400404 	addi	r5,r17,16
   13f14:	91000404 	addi	r4,r18,16
   13f18:	88c00215 	stw	r3,8(r17)
   13f1c:	90800317 	ldw	r2,12(r18)
   13f20:	88800315 	stw	r2,12(r17)
   13f24:	31c09126 	beq	r6,r7,1416c <_realloc_r+0x574>
   13f28:	20800017 	ldw	r2,0(r4)
   13f2c:	28800015 	stw	r2,0(r5)
   13f30:	20c00117 	ldw	r3,4(r4)
   13f34:	28c00115 	stw	r3,4(r5)
   13f38:	20800217 	ldw	r2,8(r4)
   13f3c:	28800215 	stw	r2,8(r5)
   13f40:	900b883a 	mov	r5,r18
   13f44:	b009883a 	mov	r4,r22
   13f48:	0015cb00 	call	15cb0 <_free_r>
   13f4c:	b009883a 	mov	r4,r22
   13f50:	00175e80 	call	175e8 <__malloc_unlock>
   13f54:	003f5e06 	br	13cd0 <_realloc_r+0xd8>
   13f58:	300b883a 	mov	r5,r6
   13f5c:	dfc00b17 	ldw	ra,44(sp)
   13f60:	df000a17 	ldw	fp,40(sp)
   13f64:	ddc00917 	ldw	r23,36(sp)
   13f68:	dd800817 	ldw	r22,32(sp)
   13f6c:	dd400717 	ldw	r21,28(sp)
   13f70:	dd000617 	ldw	r20,24(sp)
   13f74:	dcc00517 	ldw	r19,20(sp)
   13f78:	dc800417 	ldw	r18,16(sp)
   13f7c:	dc400317 	ldw	r17,12(sp)
   13f80:	dc000217 	ldw	r16,8(sp)
   13f84:	dec00c04 	addi	sp,sp,48
   13f88:	0015fec1 	jmpi	15fec <_malloc_r>
   13f8c:	38800117 	ldw	r2,4(r7)
   13f90:	e54b883a 	add	r5,fp,r21
   13f94:	31000054 	ori	r4,r6,1
   13f98:	1080004c 	andi	r2,r2,1
   13f9c:	1704b03a 	or	r2,r2,fp
   13fa0:	38800115 	stw	r2,4(r7)
   13fa4:	29000115 	stw	r4,4(r5)
   13fa8:	2987883a 	add	r3,r5,r6
   13fac:	18800117 	ldw	r2,4(r3)
   13fb0:	29400204 	addi	r5,r5,8
   13fb4:	b009883a 	mov	r4,r22
   13fb8:	10800054 	ori	r2,r2,1
   13fbc:	18800115 	stw	r2,4(r3)
   13fc0:	0015cb00 	call	15cb0 <_free_r>
   13fc4:	003f3806 	br	13ca8 <_realloc_r+0xb0>
   13fc8:	000d883a 	mov	r6,zero
   13fcc:	0009883a 	mov	r4,zero
   13fd0:	003f5d06 	br	13d48 <_realloc_r+0x150>
   13fd4:	30c00217 	ldw	r3,8(r6)
   13fd8:	30800317 	ldw	r2,12(r6)
   13fdc:	800f883a 	mov	r7,r16
   13fe0:	84000204 	addi	r16,r16,8
   13fe4:	10c00215 	stw	r3,8(r2)
   13fe8:	18800315 	stw	r2,12(r3)
   13fec:	003f2306 	br	13c7c <_realloc_r+0x84>
   13ff0:	8809883a 	mov	r4,r17
   13ff4:	900b883a 	mov	r5,r18
   13ff8:	00167580 	call	16758 <memmove>
   13ffc:	003fd006 	br	13f40 <_realloc_r+0x348>
   14000:	30800117 	ldw	r2,4(r6)
   14004:	e0c00404 	addi	r3,fp,16
   14008:	1108703a 	and	r4,r2,r4
   1400c:	9905883a 	add	r2,r19,r4
   14010:	10ff4d16 	blt	r2,r3,13d48 <_realloc_r+0x150>
   14014:	1705c83a 	sub	r2,r2,fp
   14018:	870b883a 	add	r5,r16,fp
   1401c:	10800054 	ori	r2,r2,1
   14020:	28800115 	stw	r2,4(r5)
   14024:	80c00117 	ldw	r3,4(r16)
   14028:	008000b4 	movhi	r2,2
   1402c:	10a4de04 	addi	r2,r2,-27784
   14030:	b009883a 	mov	r4,r22
   14034:	18c0004c 	andi	r3,r3,1
   14038:	e0c6b03a 	or	r3,fp,r3
   1403c:	11400215 	stw	r5,8(r2)
   14040:	80c00115 	stw	r3,4(r16)
   14044:	00175e80 	call	175e8 <__malloc_unlock>
   14048:	84400204 	addi	r17,r16,8
   1404c:	003f2006 	br	13cd0 <_realloc_r+0xd8>
   14050:	98a9883a 	add	r20,r19,r2
   14054:	2509883a 	add	r4,r4,r20
   14058:	e0800404 	addi	r2,fp,16
   1405c:	d9000115 	stw	r4,4(sp)
   14060:	20bf7016 	blt	r4,r2,13e24 <_realloc_r+0x22c>
   14064:	b8c00317 	ldw	r3,12(r23)
   14068:	b8800217 	ldw	r2,8(r23)
   1406c:	99bfff04 	addi	r6,r19,-4
   14070:	01400904 	movi	r5,36
   14074:	18800215 	stw	r2,8(r3)
   14078:	10c00315 	stw	r3,12(r2)
   1407c:	bc400204 	addi	r17,r23,8
   14080:	29804136 	bltu	r5,r6,14188 <_realloc_r+0x590>
   14084:	008004c4 	movi	r2,19
   14088:	9009883a 	mov	r4,r18
   1408c:	880f883a 	mov	r7,r17
   14090:	11800f2e 	bgeu	r2,r6,140d0 <_realloc_r+0x4d8>
   14094:	90800017 	ldw	r2,0(r18)
   14098:	b9c00404 	addi	r7,r23,16
   1409c:	91000204 	addi	r4,r18,8
   140a0:	b8800215 	stw	r2,8(r23)
   140a4:	90c00117 	ldw	r3,4(r18)
   140a8:	008006c4 	movi	r2,27
   140ac:	b8c00315 	stw	r3,12(r23)
   140b0:	1180072e 	bgeu	r2,r6,140d0 <_realloc_r+0x4d8>
   140b4:	90c00217 	ldw	r3,8(r18)
   140b8:	b9c00604 	addi	r7,r23,24
   140bc:	91000404 	addi	r4,r18,16
   140c0:	b8c00415 	stw	r3,16(r23)
   140c4:	90800317 	ldw	r2,12(r18)
   140c8:	b8800515 	stw	r2,20(r23)
   140cc:	31404026 	beq	r6,r5,141d0 <_realloc_r+0x5d8>
   140d0:	20800017 	ldw	r2,0(r4)
   140d4:	38800015 	stw	r2,0(r7)
   140d8:	20c00117 	ldw	r3,4(r4)
   140dc:	38c00115 	stw	r3,4(r7)
   140e0:	20800217 	ldw	r2,8(r4)
   140e4:	38800215 	stw	r2,8(r7)
   140e8:	d8c00117 	ldw	r3,4(sp)
   140ec:	bf0b883a 	add	r5,r23,fp
   140f0:	b009883a 	mov	r4,r22
   140f4:	1f05c83a 	sub	r2,r3,fp
   140f8:	10800054 	ori	r2,r2,1
   140fc:	28800115 	stw	r2,4(r5)
   14100:	b8c00117 	ldw	r3,4(r23)
   14104:	008000b4 	movhi	r2,2
   14108:	10a4de04 	addi	r2,r2,-27784
   1410c:	11400215 	stw	r5,8(r2)
   14110:	18c0004c 	andi	r3,r3,1
   14114:	e0c6b03a 	or	r3,fp,r3
   14118:	b8c00115 	stw	r3,4(r23)
   1411c:	00175e80 	call	175e8 <__malloc_unlock>
   14120:	003eeb06 	br	13cd0 <_realloc_r+0xd8>
   14124:	20800117 	ldw	r2,4(r4)
   14128:	00ffff04 	movi	r3,-4
   1412c:	800f883a 	mov	r7,r16
   14130:	10c4703a 	and	r2,r2,r3
   14134:	98a9883a 	add	r20,r19,r2
   14138:	84000204 	addi	r16,r16,8
   1413c:	003ecf06 	br	13c7c <_realloc_r+0x84>
   14140:	900b883a 	mov	r5,r18
   14144:	8009883a 	mov	r4,r16
   14148:	00167580 	call	16758 <memmove>
   1414c:	dd000017 	ldw	r20,0(sp)
   14150:	b80f883a 	mov	r7,r23
   14154:	003ec906 	br	13c7c <_realloc_r+0x84>
   14158:	900b883a 	mov	r5,r18
   1415c:	8009883a 	mov	r4,r16
   14160:	00167580 	call	16758 <memmove>
   14164:	b80f883a 	mov	r7,r23
   14168:	003ec406 	br	13c7c <_realloc_r+0x84>
   1416c:	90c00417 	ldw	r3,16(r18)
   14170:	89400604 	addi	r5,r17,24
   14174:	91000604 	addi	r4,r18,24
   14178:	88c00415 	stw	r3,16(r17)
   1417c:	90800517 	ldw	r2,20(r18)
   14180:	88800515 	stw	r2,20(r17)
   14184:	003f6806 	br	13f28 <_realloc_r+0x330>
   14188:	900b883a 	mov	r5,r18
   1418c:	8809883a 	mov	r4,r17
   14190:	00167580 	call	16758 <memmove>
   14194:	003fd406 	br	140e8 <_realloc_r+0x4f0>
   14198:	90c00417 	ldw	r3,16(r18)
   1419c:	91000604 	addi	r4,r18,24
   141a0:	ba000804 	addi	r8,r23,32
   141a4:	b8c00615 	stw	r3,24(r23)
   141a8:	90800517 	ldw	r2,20(r18)
   141ac:	b8800715 	stw	r2,28(r23)
   141b0:	003f1206 	br	13dfc <_realloc_r+0x204>
   141b4:	90c00417 	ldw	r3,16(r18)
   141b8:	91000604 	addi	r4,r18,24
   141bc:	ba000804 	addi	r8,r23,32
   141c0:	b8c00615 	stw	r3,24(r23)
   141c4:	90800517 	ldw	r2,20(r18)
   141c8:	b8800715 	stw	r2,28(r23)
   141cc:	003f3206 	br	13e98 <_realloc_r+0x2a0>
   141d0:	90c00417 	ldw	r3,16(r18)
   141d4:	91000604 	addi	r4,r18,24
   141d8:	b9c00804 	addi	r7,r23,32
   141dc:	b8c00615 	stw	r3,24(r23)
   141e0:	90800517 	ldw	r2,20(r18)
   141e4:	b8800715 	stw	r2,28(r23)
   141e8:	003fb906 	br	140d0 <_realloc_r+0x4d8>

000141ec <strcpy>:
   141ec:	2007883a 	mov	r3,r4
   141f0:	28800003 	ldbu	r2,0(r5)
   141f4:	29400044 	addi	r5,r5,1
   141f8:	18800005 	stb	r2,0(r3)
   141fc:	18c00044 	addi	r3,r3,1
   14200:	103ffb1e 	bne	r2,zero,141f0 <strcpy+0x4>
   14204:	2005883a 	mov	r2,r4
   14208:	f800283a 	ret

0001420c <_write_r>:
   1420c:	defffd04 	addi	sp,sp,-12
   14210:	dc000015 	stw	r16,0(sp)
   14214:	040000b4 	movhi	r16,2
   14218:	84282004 	addi	r16,r16,-24448
   1421c:	dc400115 	stw	r17,4(sp)
   14220:	80000015 	stw	zero,0(r16)
   14224:	2023883a 	mov	r17,r4
   14228:	2809883a 	mov	r4,r5
   1422c:	300b883a 	mov	r5,r6
   14230:	380d883a 	mov	r6,r7
   14234:	dfc00215 	stw	ra,8(sp)
   14238:	00177f80 	call	177f8 <write>
   1423c:	1007883a 	mov	r3,r2
   14240:	00bfffc4 	movi	r2,-1
   14244:	18800626 	beq	r3,r2,14260 <_write_r+0x54>
   14248:	1805883a 	mov	r2,r3
   1424c:	dfc00217 	ldw	ra,8(sp)
   14250:	dc400117 	ldw	r17,4(sp)
   14254:	dc000017 	ldw	r16,0(sp)
   14258:	dec00304 	addi	sp,sp,12
   1425c:	f800283a 	ret
   14260:	80800017 	ldw	r2,0(r16)
   14264:	103ff826 	beq	r2,zero,14248 <_write_r+0x3c>
   14268:	88800015 	stw	r2,0(r17)
   1426c:	1805883a 	mov	r2,r3
   14270:	dfc00217 	ldw	ra,8(sp)
   14274:	dc400117 	ldw	r17,4(sp)
   14278:	dc000017 	ldw	r16,0(sp)
   1427c:	dec00304 	addi	sp,sp,12
   14280:	f800283a 	ret

00014284 <_calloc_r>:
   14284:	defffe04 	addi	sp,sp,-8
   14288:	dc400015 	stw	r17,0(sp)
   1428c:	2023883a 	mov	r17,r4
   14290:	2809883a 	mov	r4,r5
   14294:	300b883a 	mov	r5,r6
   14298:	dfc00115 	stw	ra,4(sp)
   1429c:	0011c3c0 	call	11c3c <__mulsi3>
   142a0:	100b883a 	mov	r5,r2
   142a4:	8809883a 	mov	r4,r17
   142a8:	0015fec0 	call	15fec <_malloc_r>
   142ac:	1023883a 	mov	r17,r2
   142b0:	01c00904 	movi	r7,36
   142b4:	10000d26 	beq	r2,zero,142ec <_calloc_r+0x68>
   142b8:	10ffff17 	ldw	r3,-4(r2)
   142bc:	1009883a 	mov	r4,r2
   142c0:	00bfff04 	movi	r2,-4
   142c4:	1886703a 	and	r3,r3,r2
   142c8:	1887883a 	add	r3,r3,r2
   142cc:	180d883a 	mov	r6,r3
   142d0:	000b883a 	mov	r5,zero
   142d4:	38c01736 	bltu	r7,r3,14334 <_calloc_r+0xb0>
   142d8:	008004c4 	movi	r2,19
   142dc:	10c00836 	bltu	r2,r3,14300 <_calloc_r+0x7c>
   142e0:	20000215 	stw	zero,8(r4)
   142e4:	20000015 	stw	zero,0(r4)
   142e8:	20000115 	stw	zero,4(r4)
   142ec:	8805883a 	mov	r2,r17
   142f0:	dfc00117 	ldw	ra,4(sp)
   142f4:	dc400017 	ldw	r17,0(sp)
   142f8:	dec00204 	addi	sp,sp,8
   142fc:	f800283a 	ret
   14300:	008006c4 	movi	r2,27
   14304:	88000015 	stw	zero,0(r17)
   14308:	88000115 	stw	zero,4(r17)
   1430c:	89000204 	addi	r4,r17,8
   14310:	10fff32e 	bgeu	r2,r3,142e0 <_calloc_r+0x5c>
   14314:	88000215 	stw	zero,8(r17)
   14318:	88000315 	stw	zero,12(r17)
   1431c:	89000404 	addi	r4,r17,16
   14320:	19ffef1e 	bne	r3,r7,142e0 <_calloc_r+0x5c>
   14324:	89000604 	addi	r4,r17,24
   14328:	88000415 	stw	zero,16(r17)
   1432c:	88000515 	stw	zero,20(r17)
   14330:	003feb06 	br	142e0 <_calloc_r+0x5c>
   14334:	00167b80 	call	167b8 <memset>
   14338:	8805883a 	mov	r2,r17
   1433c:	dfc00117 	ldw	ra,4(sp)
   14340:	dc400017 	ldw	r17,0(sp)
   14344:	dec00204 	addi	sp,sp,8
   14348:	f800283a 	ret

0001434c <quorem>:
   1434c:	28c00417 	ldw	r3,16(r5)
   14350:	20800417 	ldw	r2,16(r4)
   14354:	defff104 	addi	sp,sp,-60
   14358:	dfc00e15 	stw	ra,56(sp)
   1435c:	df000d15 	stw	fp,52(sp)
   14360:	ddc00c15 	stw	r23,48(sp)
   14364:	dd800b15 	stw	r22,44(sp)
   14368:	dd400a15 	stw	r21,40(sp)
   1436c:	dd000915 	stw	r20,36(sp)
   14370:	dcc00815 	stw	r19,32(sp)
   14374:	dc800715 	stw	r18,28(sp)
   14378:	dc400615 	stw	r17,24(sp)
   1437c:	dc000515 	stw	r16,20(sp)
   14380:	d9000315 	stw	r4,12(sp)
   14384:	d9400415 	stw	r5,16(sp)
   14388:	10c07f16 	blt	r2,r3,14588 <quorem+0x23c>
   1438c:	1d3fffc4 	addi	r20,r3,-1
   14390:	d8c00417 	ldw	r3,16(sp)
   14394:	d9000317 	ldw	r4,12(sp)
   14398:	a505883a 	add	r2,r20,r20
   1439c:	1085883a 	add	r2,r2,r2
   143a0:	1cc00504 	addi	r19,r3,20
   143a4:	25c00504 	addi	r23,r4,20
   143a8:	98ad883a 	add	r22,r19,r2
   143ac:	15c7883a 	add	r3,r2,r23
   143b0:	b1400017 	ldw	r5,0(r22)
   143b4:	19000017 	ldw	r4,0(r3)
   143b8:	d8c00015 	stw	r3,0(sp)
   143bc:	29400044 	addi	r5,r5,1
   143c0:	d9000215 	stw	r4,8(sp)
   143c4:	00173a80 	call	173a8 <__udivsi3>
   143c8:	1039883a 	mov	fp,r2
   143cc:	10003d1e 	bne	r2,zero,144c4 <quorem+0x178>
   143d0:	d9400417 	ldw	r5,16(sp)
   143d4:	d9000317 	ldw	r4,12(sp)
   143d8:	0012bf00 	call	12bf0 <__mcmp>
   143dc:	10002c16 	blt	r2,zero,14490 <quorem+0x144>
   143e0:	e7000044 	addi	fp,fp,1
   143e4:	b80f883a 	mov	r7,r23
   143e8:	0011883a 	mov	r8,zero
   143ec:	0009883a 	mov	r4,zero
   143f0:	99400017 	ldw	r5,0(r19)
   143f4:	38c00017 	ldw	r3,0(r7)
   143f8:	9cc00104 	addi	r19,r19,4
   143fc:	28bfffcc 	andi	r2,r5,65535
   14400:	2085883a 	add	r2,r4,r2
   14404:	11bfffcc 	andi	r6,r2,65535
   14408:	193fffcc 	andi	r4,r3,65535
   1440c:	1004d43a 	srli	r2,r2,16
   14410:	280ad43a 	srli	r5,r5,16
   14414:	2189c83a 	sub	r4,r4,r6
   14418:	2209883a 	add	r4,r4,r8
   1441c:	1806d43a 	srli	r3,r3,16
   14420:	288b883a 	add	r5,r5,r2
   14424:	200dd43a 	srai	r6,r4,16
   14428:	28bfffcc 	andi	r2,r5,65535
   1442c:	1887c83a 	sub	r3,r3,r2
   14430:	1987883a 	add	r3,r3,r6
   14434:	3900000d 	sth	r4,0(r7)
   14438:	38c0008d 	sth	r3,2(r7)
   1443c:	2808d43a 	srli	r4,r5,16
   14440:	39c00104 	addi	r7,r7,4
   14444:	1811d43a 	srai	r8,r3,16
   14448:	b4ffe92e 	bgeu	r22,r19,143f0 <quorem+0xa4>
   1444c:	a505883a 	add	r2,r20,r20
   14450:	1085883a 	add	r2,r2,r2
   14454:	b885883a 	add	r2,r23,r2
   14458:	10c00017 	ldw	r3,0(r2)
   1445c:	18000c1e 	bne	r3,zero,14490 <quorem+0x144>
   14460:	113fff04 	addi	r4,r2,-4
   14464:	b900082e 	bgeu	r23,r4,14488 <quorem+0x13c>
   14468:	10bfff17 	ldw	r2,-4(r2)
   1446c:	10000326 	beq	r2,zero,1447c <quorem+0x130>
   14470:	00000506 	br	14488 <quorem+0x13c>
   14474:	20800017 	ldw	r2,0(r4)
   14478:	1000031e 	bne	r2,zero,14488 <quorem+0x13c>
   1447c:	213fff04 	addi	r4,r4,-4
   14480:	a53fffc4 	addi	r20,r20,-1
   14484:	b93ffb36 	bltu	r23,r4,14474 <quorem+0x128>
   14488:	d9000317 	ldw	r4,12(sp)
   1448c:	25000415 	stw	r20,16(r4)
   14490:	e005883a 	mov	r2,fp
   14494:	dfc00e17 	ldw	ra,56(sp)
   14498:	df000d17 	ldw	fp,52(sp)
   1449c:	ddc00c17 	ldw	r23,48(sp)
   144a0:	dd800b17 	ldw	r22,44(sp)
   144a4:	dd400a17 	ldw	r21,40(sp)
   144a8:	dd000917 	ldw	r20,36(sp)
   144ac:	dcc00817 	ldw	r19,32(sp)
   144b0:	dc800717 	ldw	r18,28(sp)
   144b4:	dc400617 	ldw	r17,24(sp)
   144b8:	dc000517 	ldw	r16,20(sp)
   144bc:	dec00f04 	addi	sp,sp,60
   144c0:	f800283a 	ret
   144c4:	b823883a 	mov	r17,r23
   144c8:	9825883a 	mov	r18,r19
   144cc:	d8000115 	stw	zero,4(sp)
   144d0:	002b883a 	mov	r21,zero
   144d4:	94000017 	ldw	r16,0(r18)
   144d8:	e009883a 	mov	r4,fp
   144dc:	94800104 	addi	r18,r18,4
   144e0:	817fffcc 	andi	r5,r16,65535
   144e4:	0011c3c0 	call	11c3c <__mulsi3>
   144e8:	800ad43a 	srli	r5,r16,16
   144ec:	e009883a 	mov	r4,fp
   144f0:	a8a1883a 	add	r16,r21,r2
   144f4:	0011c3c0 	call	11c3c <__mulsi3>
   144f8:	89000017 	ldw	r4,0(r17)
   144fc:	80ffffcc 	andi	r3,r16,65535
   14500:	8020d43a 	srli	r16,r16,16
   14504:	217fffcc 	andi	r5,r4,65535
   14508:	28cbc83a 	sub	r5,r5,r3
   1450c:	d8c00117 	ldw	r3,4(sp)
   14510:	2008d43a 	srli	r4,r4,16
   14514:	1405883a 	add	r2,r2,r16
   14518:	28cb883a 	add	r5,r5,r3
   1451c:	280dd43a 	srai	r6,r5,16
   14520:	10ffffcc 	andi	r3,r2,65535
   14524:	20c9c83a 	sub	r4,r4,r3
   14528:	2189883a 	add	r4,r4,r6
   1452c:	8900008d 	sth	r4,2(r17)
   14530:	2009d43a 	srai	r4,r4,16
   14534:	8940000d 	sth	r5,0(r17)
   14538:	102ad43a 	srli	r21,r2,16
   1453c:	8c400104 	addi	r17,r17,4
   14540:	d9000115 	stw	r4,4(sp)
   14544:	b4bfe32e 	bgeu	r22,r18,144d4 <quorem+0x188>
   14548:	d9000217 	ldw	r4,8(sp)
   1454c:	203fa01e 	bne	r4,zero,143d0 <quorem+0x84>
   14550:	d8800017 	ldw	r2,0(sp)
   14554:	10ffff04 	addi	r3,r2,-4
   14558:	b8c0082e 	bgeu	r23,r3,1457c <quorem+0x230>
   1455c:	10bfff17 	ldw	r2,-4(r2)
   14560:	10000326 	beq	r2,zero,14570 <quorem+0x224>
   14564:	00000506 	br	1457c <quorem+0x230>
   14568:	18800017 	ldw	r2,0(r3)
   1456c:	1000031e 	bne	r2,zero,1457c <quorem+0x230>
   14570:	18ffff04 	addi	r3,r3,-4
   14574:	a53fffc4 	addi	r20,r20,-1
   14578:	b8fffb36 	bltu	r23,r3,14568 <quorem+0x21c>
   1457c:	d8c00317 	ldw	r3,12(sp)
   14580:	1d000415 	stw	r20,16(r3)
   14584:	003f9206 	br	143d0 <quorem+0x84>
   14588:	0005883a 	mov	r2,zero
   1458c:	003fc106 	br	14494 <quorem+0x148>

00014590 <_dtoa_r>:
   14590:	deffda04 	addi	sp,sp,-152
   14594:	dc801e15 	stw	r18,120(sp)
   14598:	24800417 	ldw	r18,16(r4)
   1459c:	dd402115 	stw	r21,132(sp)
   145a0:	dd002015 	stw	r20,128(sp)
   145a4:	dcc01f15 	stw	r19,124(sp)
   145a8:	dc401d15 	stw	r17,116(sp)
   145ac:	dfc02515 	stw	ra,148(sp)
   145b0:	df002415 	stw	fp,144(sp)
   145b4:	ddc02315 	stw	r23,140(sp)
   145b8:	dd802215 	stw	r22,136(sp)
   145bc:	dc001c15 	stw	r16,112(sp)
   145c0:	d9001615 	stw	r4,88(sp)
   145c4:	3023883a 	mov	r17,r6
   145c8:	2829883a 	mov	r20,r5
   145cc:	d9c01715 	stw	r7,92(sp)
   145d0:	dcc02817 	ldw	r19,160(sp)
   145d4:	302b883a 	mov	r21,r6
   145d8:	90028326 	beq	r18,zero,14fe8 <_dtoa_r+0xa58>
   145dc:	91800017 	ldw	r6,0(r18)
   145e0:	30000c26 	beq	r6,zero,14614 <_dtoa_r+0x84>
   145e4:	90800117 	ldw	r2,4(r18)
   145e8:	d9001617 	ldw	r4,88(sp)
   145ec:	300b883a 	mov	r5,r6
   145f0:	30800115 	stw	r2,4(r6)
   145f4:	90c00117 	ldw	r3,4(r18)
   145f8:	00800044 	movi	r2,1
   145fc:	10c4983a 	sll	r2,r2,r3
   14600:	30800215 	stw	r2,8(r6)
   14604:	00130140 	call	13014 <_Bfree>
   14608:	d8c01617 	ldw	r3,88(sp)
   1460c:	18800417 	ldw	r2,16(r3)
   14610:	10000015 	stw	zero,0(r2)
   14614:	8800a316 	blt	r17,zero,148a4 <_dtoa_r+0x314>
   14618:	98000015 	stw	zero,0(r19)
   1461c:	a8dffc2c 	andhi	r3,r21,32752
   14620:	009ffc34 	movhi	r2,32752
   14624:	18809126 	beq	r3,r2,1486c <_dtoa_r+0x2dc>
   14628:	000d883a 	mov	r6,zero
   1462c:	000f883a 	mov	r7,zero
   14630:	a009883a 	mov	r4,r20
   14634:	a80b883a 	mov	r5,r21
   14638:	dd001215 	stw	r20,72(sp)
   1463c:	dd401315 	stw	r21,76(sp)
   14640:	0016eec0 	call	16eec <__nedf2>
   14644:	1000171e 	bne	r2,zero,146a4 <_dtoa_r+0x114>
   14648:	d9802717 	ldw	r6,156(sp)
   1464c:	00800044 	movi	r2,1
   14650:	30800015 	stw	r2,0(r6)
   14654:	d8802917 	ldw	r2,164(sp)
   14658:	1002a726 	beq	r2,zero,150f8 <_dtoa_r+0xb68>
   1465c:	d9002917 	ldw	r4,164(sp)
   14660:	008000b4 	movhi	r2,2
   14664:	10a49a44 	addi	r2,r2,-28055
   14668:	10ffffc4 	addi	r3,r2,-1
   1466c:	20800015 	stw	r2,0(r4)
   14670:	1805883a 	mov	r2,r3
   14674:	dfc02517 	ldw	ra,148(sp)
   14678:	df002417 	ldw	fp,144(sp)
   1467c:	ddc02317 	ldw	r23,140(sp)
   14680:	dd802217 	ldw	r22,136(sp)
   14684:	dd402117 	ldw	r21,132(sp)
   14688:	dd002017 	ldw	r20,128(sp)
   1468c:	dcc01f17 	ldw	r19,124(sp)
   14690:	dc801e17 	ldw	r18,120(sp)
   14694:	dc401d17 	ldw	r17,116(sp)
   14698:	dc001c17 	ldw	r16,112(sp)
   1469c:	dec02604 	addi	sp,sp,152
   146a0:	f800283a 	ret
   146a4:	d9001617 	ldw	r4,88(sp)
   146a8:	d9401217 	ldw	r5,72(sp)
   146ac:	d8800104 	addi	r2,sp,4
   146b0:	a80d883a 	mov	r6,r21
   146b4:	d9c00204 	addi	r7,sp,8
   146b8:	d8800015 	stw	r2,0(sp)
   146bc:	001317c0 	call	1317c <__d2b>
   146c0:	d8800715 	stw	r2,28(sp)
   146c4:	a804d53a 	srli	r2,r21,20
   146c8:	1101ffcc 	andi	r4,r2,2047
   146cc:	20008626 	beq	r4,zero,148e8 <_dtoa_r+0x358>
   146d0:	d8c01217 	ldw	r3,72(sp)
   146d4:	00800434 	movhi	r2,16
   146d8:	10bfffc4 	addi	r2,r2,-1
   146dc:	ddc00117 	ldw	r23,4(sp)
   146e0:	a884703a 	and	r2,r21,r2
   146e4:	1811883a 	mov	r8,r3
   146e8:	124ffc34 	orhi	r9,r2,16368
   146ec:	25bf0044 	addi	r22,r4,-1023
   146f0:	d8000815 	stw	zero,32(sp)
   146f4:	0005883a 	mov	r2,zero
   146f8:	00cffe34 	movhi	r3,16376
   146fc:	480b883a 	mov	r5,r9
   14700:	4009883a 	mov	r4,r8
   14704:	180f883a 	mov	r7,r3
   14708:	100d883a 	mov	r6,r2
   1470c:	0010fcc0 	call	10fcc <__subdf3>
   14710:	0218dbf4 	movhi	r8,25455
   14714:	4210d844 	addi	r8,r8,17249
   14718:	024ff4f4 	movhi	r9,16339
   1471c:	4a61e9c4 	addi	r9,r9,-30809
   14720:	480f883a 	mov	r7,r9
   14724:	400d883a 	mov	r6,r8
   14728:	180b883a 	mov	r5,r3
   1472c:	1009883a 	mov	r4,r2
   14730:	00168480 	call	16848 <__muldf3>
   14734:	0222d874 	movhi	r8,35681
   14738:	42322cc4 	addi	r8,r8,-14157
   1473c:	024ff1f4 	movhi	r9,16327
   14740:	4a628a04 	addi	r9,r9,-30168
   14744:	480f883a 	mov	r7,r9
   14748:	400d883a 	mov	r6,r8
   1474c:	180b883a 	mov	r5,r3
   14750:	1009883a 	mov	r4,r2
   14754:	001104c0 	call	1104c <__adddf3>
   14758:	b009883a 	mov	r4,r22
   1475c:	1021883a 	mov	r16,r2
   14760:	1823883a 	mov	r17,r3
   14764:	00110c00 	call	110c0 <__floatsidf>
   14768:	021427f4 	movhi	r8,20639
   1476c:	421e7ec4 	addi	r8,r8,31227
   14770:	024ff4f4 	movhi	r9,16339
   14774:	4a5104c4 	addi	r9,r9,17427
   14778:	480f883a 	mov	r7,r9
   1477c:	400d883a 	mov	r6,r8
   14780:	180b883a 	mov	r5,r3
   14784:	1009883a 	mov	r4,r2
   14788:	00168480 	call	16848 <__muldf3>
   1478c:	180f883a 	mov	r7,r3
   14790:	880b883a 	mov	r5,r17
   14794:	100d883a 	mov	r6,r2
   14798:	8009883a 	mov	r4,r16
   1479c:	001104c0 	call	1104c <__adddf3>
   147a0:	1009883a 	mov	r4,r2
   147a4:	180b883a 	mov	r5,r3
   147a8:	1021883a 	mov	r16,r2
   147ac:	1823883a 	mov	r17,r3
   147b0:	00171940 	call	17194 <__fixdfsi>
   147b4:	000d883a 	mov	r6,zero
   147b8:	000f883a 	mov	r7,zero
   147bc:	8009883a 	mov	r4,r16
   147c0:	880b883a 	mov	r5,r17
   147c4:	d8800d15 	stw	r2,52(sp)
   147c8:	00170840 	call	17084 <__ltdf2>
   147cc:	10032316 	blt	r2,zero,1545c <_dtoa_r+0xecc>
   147d0:	d8c00d17 	ldw	r3,52(sp)
   147d4:	00800584 	movi	r2,22
   147d8:	10c14a2e 	bgeu	r2,r3,14d04 <_dtoa_r+0x774>
   147dc:	01000044 	movi	r4,1
   147e0:	d9000c15 	stw	r4,48(sp)
   147e4:	bd85c83a 	sub	r2,r23,r22
   147e8:	11bfffc4 	addi	r6,r2,-1
   147ec:	30031716 	blt	r6,zero,1544c <_dtoa_r+0xebc>
   147f0:	d9800a15 	stw	r6,40(sp)
   147f4:	d8001115 	stw	zero,68(sp)
   147f8:	d8c00d17 	ldw	r3,52(sp)
   147fc:	18030b16 	blt	r3,zero,1542c <_dtoa_r+0xe9c>
   14800:	d9000a17 	ldw	r4,40(sp)
   14804:	d8c00915 	stw	r3,36(sp)
   14808:	d8001015 	stw	zero,64(sp)
   1480c:	20c9883a 	add	r4,r4,r3
   14810:	d9000a15 	stw	r4,40(sp)
   14814:	d9001717 	ldw	r4,92(sp)
   14818:	00800244 	movi	r2,9
   1481c:	11004636 	bltu	r2,r4,14938 <_dtoa_r+0x3a8>
   14820:	00800144 	movi	r2,5
   14824:	11020d16 	blt	r2,r4,1505c <_dtoa_r+0xacc>
   14828:	04400044 	movi	r17,1
   1482c:	d8c01717 	ldw	r3,92(sp)
   14830:	00800144 	movi	r2,5
   14834:	10c1f636 	bltu	r2,r3,15010 <_dtoa_r+0xa80>
   14838:	18c5883a 	add	r2,r3,r3
   1483c:	1085883a 	add	r2,r2,r2
   14840:	00c00074 	movhi	r3,1
   14844:	18d21504 	addi	r3,r3,18516
   14848:	10c5883a 	add	r2,r2,r3
   1484c:	11000017 	ldw	r4,0(r2)
   14850:	2000683a 	jmp	r4
   14854:	00014940 	call	1494 <__alt_mem_onchip_memory2_0-0xeb6c>
   14858:	00014940 	call	1494 <__alt_mem_onchip_memory2_0-0xeb6c>
   1485c:	00015370 	cmpltui	zero,zero,1357
   14860:	00015348 	cmpgei	zero,zero,1357
   14864:	0001538c 	andi	zero,zero,1358
   14868:	00015398 	cmpnei	zero,zero,1358
   1486c:	d9002717 	ldw	r4,156(sp)
   14870:	0089c3c4 	movi	r2,9999
   14874:	20800015 	stw	r2,0(r4)
   14878:	a0001026 	beq	r20,zero,148bc <_dtoa_r+0x32c>
   1487c:	00c000b4 	movhi	r3,2
   14880:	18e49904 	addi	r3,r3,-28060
   14884:	d9802917 	ldw	r6,164(sp)
   14888:	303f7926 	beq	r6,zero,14670 <_dtoa_r+0xe0>
   1488c:	188000c7 	ldb	r2,3(r3)
   14890:	190000c4 	addi	r4,r3,3
   14894:	1000101e 	bne	r2,zero,148d8 <_dtoa_r+0x348>
   14898:	d8802917 	ldw	r2,164(sp)
   1489c:	11000015 	stw	r4,0(r2)
   148a0:	003f7306 	br	14670 <_dtoa_r+0xe0>
   148a4:	00a00034 	movhi	r2,32768
   148a8:	10bfffc4 	addi	r2,r2,-1
   148ac:	00c00044 	movi	r3,1
   148b0:	88aa703a 	and	r21,r17,r2
   148b4:	98c00015 	stw	r3,0(r19)
   148b8:	003f5806 	br	1461c <_dtoa_r+0x8c>
   148bc:	00800434 	movhi	r2,16
   148c0:	10bfffc4 	addi	r2,r2,-1
   148c4:	a884703a 	and	r2,r21,r2
   148c8:	103fec1e 	bne	r2,zero,1487c <_dtoa_r+0x2ec>
   148cc:	00c000b4 	movhi	r3,2
   148d0:	18e49604 	addi	r3,r3,-28072
   148d4:	003feb06 	br	14884 <_dtoa_r+0x2f4>
   148d8:	d8802917 	ldw	r2,164(sp)
   148dc:	19000204 	addi	r4,r3,8
   148e0:	11000015 	stw	r4,0(r2)
   148e4:	003f6206 	br	14670 <_dtoa_r+0xe0>
   148e8:	ddc00117 	ldw	r23,4(sp)
   148ec:	d8800217 	ldw	r2,8(sp)
   148f0:	01000804 	movi	r4,32
   148f4:	b8c10c84 	addi	r3,r23,1074
   148f8:	18a3883a 	add	r17,r3,r2
   148fc:	2441dc0e 	bge	r4,r17,15070 <_dtoa_r+0xae0>
   14900:	00c01004 	movi	r3,64
   14904:	1c47c83a 	sub	r3,r3,r17
   14908:	88bff804 	addi	r2,r17,-32
   1490c:	a8c6983a 	sll	r3,r21,r3
   14910:	a084d83a 	srl	r2,r20,r2
   14914:	1888b03a 	or	r4,r3,r2
   14918:	00112640 	call	11264 <__floatunsidf>
   1491c:	1011883a 	mov	r8,r2
   14920:	00bf8434 	movhi	r2,65040
   14924:	01000044 	movi	r4,1
   14928:	10d3883a 	add	r9,r2,r3
   1492c:	8dbef344 	addi	r22,r17,-1075
   14930:	d9000815 	stw	r4,32(sp)
   14934:	003f6f06 	br	146f4 <_dtoa_r+0x164>
   14938:	d8001715 	stw	zero,92(sp)
   1493c:	04400044 	movi	r17,1
   14940:	00bfffc4 	movi	r2,-1
   14944:	00c00044 	movi	r3,1
   14948:	d8800e15 	stw	r2,56(sp)
   1494c:	d8002615 	stw	zero,152(sp)
   14950:	d8800f15 	stw	r2,60(sp)
   14954:	d8c00b15 	stw	r3,44(sp)
   14958:	1021883a 	mov	r16,r2
   1495c:	d8801617 	ldw	r2,88(sp)
   14960:	14800417 	ldw	r18,16(r2)
   14964:	90000115 	stw	zero,4(r18)
   14968:	d9001617 	ldw	r4,88(sp)
   1496c:	91400117 	ldw	r5,4(r18)
   14970:	001308c0 	call	1308c <_Balloc>
   14974:	d9001617 	ldw	r4,88(sp)
   14978:	90800015 	stw	r2,0(r18)
   1497c:	00800384 	movi	r2,14
   14980:	20c00417 	ldw	r3,16(r4)
   14984:	18c00017 	ldw	r3,0(r3)
   14988:	d8c00515 	stw	r3,20(sp)
   1498c:	14006836 	bltu	r2,r16,14b30 <_dtoa_r+0x5a0>
   14990:	8805003a 	cmpeq	r2,r17,zero
   14994:	1000661e 	bne	r2,zero,14b30 <_dtoa_r+0x5a0>
   14998:	d9800d17 	ldw	r6,52(sp)
   1499c:	01823a0e 	bge	zero,r6,15288 <_dtoa_r+0xcf8>
   149a0:	308003cc 	andi	r2,r6,15
   149a4:	100490fa 	slli	r2,r2,3
   149a8:	3025d13a 	srai	r18,r6,4
   149ac:	00c000b4 	movhi	r3,2
   149b0:	18e44d04 	addi	r3,r3,-28364
   149b4:	10c5883a 	add	r2,r2,r3
   149b8:	90c0040c 	andi	r3,r18,16
   149bc:	14000017 	ldw	r16,0(r2)
   149c0:	14400117 	ldw	r17,4(r2)
   149c4:	1803741e 	bne	r3,zero,15798 <_dtoa_r+0x1208>
   149c8:	05800084 	movi	r22,2
   149cc:	90001026 	beq	r18,zero,14a10 <_dtoa_r+0x480>
   149d0:	04c000b4 	movhi	r19,2
   149d4:	9ce47f04 	addi	r19,r19,-28164
   149d8:	9080004c 	andi	r2,r18,1
   149dc:	1005003a 	cmpeq	r2,r2,zero
   149e0:	1000081e 	bne	r2,zero,14a04 <_dtoa_r+0x474>
   149e4:	99800017 	ldw	r6,0(r19)
   149e8:	99c00117 	ldw	r7,4(r19)
   149ec:	880b883a 	mov	r5,r17
   149f0:	8009883a 	mov	r4,r16
   149f4:	00168480 	call	16848 <__muldf3>
   149f8:	1021883a 	mov	r16,r2
   149fc:	b5800044 	addi	r22,r22,1
   14a00:	1823883a 	mov	r17,r3
   14a04:	9025d07a 	srai	r18,r18,1
   14a08:	9cc00204 	addi	r19,r19,8
   14a0c:	903ff21e 	bne	r18,zero,149d8 <_dtoa_r+0x448>
   14a10:	a80b883a 	mov	r5,r21
   14a14:	a009883a 	mov	r4,r20
   14a18:	880f883a 	mov	r7,r17
   14a1c:	800d883a 	mov	r6,r16
   14a20:	0016c0c0 	call	16c0c <__divdf3>
   14a24:	1029883a 	mov	r20,r2
   14a28:	182b883a 	mov	r21,r3
   14a2c:	d8c00c17 	ldw	r3,48(sp)
   14a30:	1805003a 	cmpeq	r2,r3,zero
   14a34:	1000081e 	bne	r2,zero,14a58 <_dtoa_r+0x4c8>
   14a38:	0005883a 	mov	r2,zero
   14a3c:	00cffc34 	movhi	r3,16368
   14a40:	180f883a 	mov	r7,r3
   14a44:	a009883a 	mov	r4,r20
   14a48:	a80b883a 	mov	r5,r21
   14a4c:	100d883a 	mov	r6,r2
   14a50:	00170840 	call	17084 <__ltdf2>
   14a54:	10040816 	blt	r2,zero,15a78 <_dtoa_r+0x14e8>
   14a58:	b009883a 	mov	r4,r22
   14a5c:	00110c00 	call	110c0 <__floatsidf>
   14a60:	180b883a 	mov	r5,r3
   14a64:	1009883a 	mov	r4,r2
   14a68:	a00d883a 	mov	r6,r20
   14a6c:	a80f883a 	mov	r7,r21
   14a70:	00168480 	call	16848 <__muldf3>
   14a74:	0011883a 	mov	r8,zero
   14a78:	02500734 	movhi	r9,16412
   14a7c:	1009883a 	mov	r4,r2
   14a80:	180b883a 	mov	r5,r3
   14a84:	480f883a 	mov	r7,r9
   14a88:	400d883a 	mov	r6,r8
   14a8c:	001104c0 	call	1104c <__adddf3>
   14a90:	d9000f17 	ldw	r4,60(sp)
   14a94:	102d883a 	mov	r22,r2
   14a98:	00bf3034 	movhi	r2,64704
   14a9c:	18b9883a 	add	fp,r3,r2
   14aa0:	e02f883a 	mov	r23,fp
   14aa4:	2002991e 	bne	r4,zero,1550c <_dtoa_r+0xf7c>
   14aa8:	0005883a 	mov	r2,zero
   14aac:	00d00534 	movhi	r3,16404
   14ab0:	a009883a 	mov	r4,r20
   14ab4:	a80b883a 	mov	r5,r21
   14ab8:	180f883a 	mov	r7,r3
   14abc:	100d883a 	mov	r6,r2
   14ac0:	0010fcc0 	call	10fcc <__subdf3>
   14ac4:	1009883a 	mov	r4,r2
   14ac8:	e00f883a 	mov	r7,fp
   14acc:	180b883a 	mov	r5,r3
   14ad0:	b00d883a 	mov	r6,r22
   14ad4:	1025883a 	mov	r18,r2
   14ad8:	1827883a 	mov	r19,r3
   14adc:	0016f740 	call	16f74 <__gtdf2>
   14ae0:	00835916 	blt	zero,r2,15848 <_dtoa_r+0x12b8>
   14ae4:	e0e0003c 	xorhi	r3,fp,32768
   14ae8:	9009883a 	mov	r4,r18
   14aec:	980b883a 	mov	r5,r19
   14af0:	180f883a 	mov	r7,r3
   14af4:	b00d883a 	mov	r6,r22
   14af8:	00170840 	call	17084 <__ltdf2>
   14afc:	1000080e 	bge	r2,zero,14b20 <_dtoa_r+0x590>
   14b00:	0027883a 	mov	r19,zero
   14b04:	0025883a 	mov	r18,zero
   14b08:	d8802617 	ldw	r2,152(sp)
   14b0c:	df000517 	ldw	fp,20(sp)
   14b10:	d8000615 	stw	zero,24(sp)
   14b14:	0084303a 	nor	r2,zero,r2
   14b18:	d8800d15 	stw	r2,52(sp)
   14b1c:	0001a506 	br	151b4 <_dtoa_r+0xc24>
   14b20:	d9801217 	ldw	r6,72(sp)
   14b24:	d8801317 	ldw	r2,76(sp)
   14b28:	3029883a 	mov	r20,r6
   14b2c:	102b883a 	mov	r21,r2
   14b30:	d8c00217 	ldw	r3,8(sp)
   14b34:	18008516 	blt	r3,zero,14d4c <_dtoa_r+0x7bc>
   14b38:	d9000d17 	ldw	r4,52(sp)
   14b3c:	00800384 	movi	r2,14
   14b40:	11008216 	blt	r2,r4,14d4c <_dtoa_r+0x7bc>
   14b44:	200490fa 	slli	r2,r4,3
   14b48:	d9802617 	ldw	r6,152(sp)
   14b4c:	00c000b4 	movhi	r3,2
   14b50:	18e44d04 	addi	r3,r3,-28364
   14b54:	10c5883a 	add	r2,r2,r3
   14b58:	14800017 	ldw	r18,0(r2)
   14b5c:	14c00117 	ldw	r19,4(r2)
   14b60:	30032816 	blt	r6,zero,15804 <_dtoa_r+0x1274>
   14b64:	d9000517 	ldw	r4,20(sp)
   14b68:	d8c00f17 	ldw	r3,60(sp)
   14b6c:	a823883a 	mov	r17,r21
   14b70:	a021883a 	mov	r16,r20
   14b74:	192b883a 	add	r21,r3,r4
   14b78:	2039883a 	mov	fp,r4
   14b7c:	00000f06 	br	14bbc <_dtoa_r+0x62c>
   14b80:	0005883a 	mov	r2,zero
   14b84:	00d00934 	movhi	r3,16420
   14b88:	5009883a 	mov	r4,r10
   14b8c:	580b883a 	mov	r5,r11
   14b90:	180f883a 	mov	r7,r3
   14b94:	100d883a 	mov	r6,r2
   14b98:	00168480 	call	16848 <__muldf3>
   14b9c:	180b883a 	mov	r5,r3
   14ba0:	000d883a 	mov	r6,zero
   14ba4:	000f883a 	mov	r7,zero
   14ba8:	1009883a 	mov	r4,r2
   14bac:	1021883a 	mov	r16,r2
   14bb0:	1823883a 	mov	r17,r3
   14bb4:	0016eec0 	call	16eec <__nedf2>
   14bb8:	10004526 	beq	r2,zero,14cd0 <_dtoa_r+0x740>
   14bbc:	900d883a 	mov	r6,r18
   14bc0:	980f883a 	mov	r7,r19
   14bc4:	8009883a 	mov	r4,r16
   14bc8:	880b883a 	mov	r5,r17
   14bcc:	0016c0c0 	call	16c0c <__divdf3>
   14bd0:	180b883a 	mov	r5,r3
   14bd4:	1009883a 	mov	r4,r2
   14bd8:	00171940 	call	17194 <__fixdfsi>
   14bdc:	1009883a 	mov	r4,r2
   14be0:	1029883a 	mov	r20,r2
   14be4:	00110c00 	call	110c0 <__floatsidf>
   14be8:	180f883a 	mov	r7,r3
   14bec:	9009883a 	mov	r4,r18
   14bf0:	980b883a 	mov	r5,r19
   14bf4:	100d883a 	mov	r6,r2
   14bf8:	00168480 	call	16848 <__muldf3>
   14bfc:	180f883a 	mov	r7,r3
   14c00:	880b883a 	mov	r5,r17
   14c04:	8009883a 	mov	r4,r16
   14c08:	100d883a 	mov	r6,r2
   14c0c:	0010fcc0 	call	10fcc <__subdf3>
   14c10:	1015883a 	mov	r10,r2
   14c14:	a0800c04 	addi	r2,r20,48
   14c18:	e0800005 	stb	r2,0(fp)
   14c1c:	e7000044 	addi	fp,fp,1
   14c20:	1817883a 	mov	r11,r3
   14c24:	e57fd61e 	bne	fp,r21,14b80 <_dtoa_r+0x5f0>
   14c28:	500d883a 	mov	r6,r10
   14c2c:	180f883a 	mov	r7,r3
   14c30:	5009883a 	mov	r4,r10
   14c34:	180b883a 	mov	r5,r3
   14c38:	001104c0 	call	1104c <__adddf3>
   14c3c:	100d883a 	mov	r6,r2
   14c40:	9009883a 	mov	r4,r18
   14c44:	980b883a 	mov	r5,r19
   14c48:	180f883a 	mov	r7,r3
   14c4c:	1021883a 	mov	r16,r2
   14c50:	1823883a 	mov	r17,r3
   14c54:	00170840 	call	17084 <__ltdf2>
   14c58:	10000816 	blt	r2,zero,14c7c <_dtoa_r+0x6ec>
   14c5c:	980b883a 	mov	r5,r19
   14c60:	800d883a 	mov	r6,r16
   14c64:	880f883a 	mov	r7,r17
   14c68:	9009883a 	mov	r4,r18
   14c6c:	0016e640 	call	16e64 <__eqdf2>
   14c70:	1000171e 	bne	r2,zero,14cd0 <_dtoa_r+0x740>
   14c74:	a080004c 	andi	r2,r20,1
   14c78:	10001526 	beq	r2,zero,14cd0 <_dtoa_r+0x740>
   14c7c:	d8800d17 	ldw	r2,52(sp)
   14c80:	d8800315 	stw	r2,12(sp)
   14c84:	e009883a 	mov	r4,fp
   14c88:	213fffc4 	addi	r4,r4,-1
   14c8c:	20c00007 	ldb	r3,0(r4)
   14c90:	00800e44 	movi	r2,57
   14c94:	1880081e 	bne	r3,r2,14cb8 <_dtoa_r+0x728>
   14c98:	d8800517 	ldw	r2,20(sp)
   14c9c:	113ffa1e 	bne	r2,r4,14c88 <_dtoa_r+0x6f8>
   14ca0:	d8c00317 	ldw	r3,12(sp)
   14ca4:	d9800517 	ldw	r6,20(sp)
   14ca8:	00800c04 	movi	r2,48
   14cac:	18c00044 	addi	r3,r3,1
   14cb0:	d8c00315 	stw	r3,12(sp)
   14cb4:	30800005 	stb	r2,0(r6)
   14cb8:	20800003 	ldbu	r2,0(r4)
   14cbc:	d8c00317 	ldw	r3,12(sp)
   14cc0:	27000044 	addi	fp,r4,1
   14cc4:	10800044 	addi	r2,r2,1
   14cc8:	d8c00d15 	stw	r3,52(sp)
   14ccc:	20800005 	stb	r2,0(r4)
   14cd0:	d9001617 	ldw	r4,88(sp)
   14cd4:	d9400717 	ldw	r5,28(sp)
   14cd8:	00130140 	call	13014 <_Bfree>
   14cdc:	e0000005 	stb	zero,0(fp)
   14ce0:	d9800d17 	ldw	r6,52(sp)
   14ce4:	d8c02717 	ldw	r3,156(sp)
   14ce8:	d9002917 	ldw	r4,164(sp)
   14cec:	30800044 	addi	r2,r6,1
   14cf0:	18800015 	stw	r2,0(r3)
   14cf4:	2002a626 	beq	r4,zero,15790 <_dtoa_r+0x1200>
   14cf8:	d8c00517 	ldw	r3,20(sp)
   14cfc:	27000015 	stw	fp,0(r4)
   14d00:	003e5b06 	br	14670 <_dtoa_r+0xe0>
   14d04:	d9800d17 	ldw	r6,52(sp)
   14d08:	00c000b4 	movhi	r3,2
   14d0c:	18e44d04 	addi	r3,r3,-28364
   14d10:	d9001217 	ldw	r4,72(sp)
   14d14:	300490fa 	slli	r2,r6,3
   14d18:	d9401317 	ldw	r5,76(sp)
   14d1c:	10c5883a 	add	r2,r2,r3
   14d20:	12000017 	ldw	r8,0(r2)
   14d24:	12400117 	ldw	r9,4(r2)
   14d28:	400d883a 	mov	r6,r8
   14d2c:	480f883a 	mov	r7,r9
   14d30:	00170840 	call	17084 <__ltdf2>
   14d34:	1000030e 	bge	r2,zero,14d44 <_dtoa_r+0x7b4>
   14d38:	d8800d17 	ldw	r2,52(sp)
   14d3c:	10bfffc4 	addi	r2,r2,-1
   14d40:	d8800d15 	stw	r2,52(sp)
   14d44:	d8000c15 	stw	zero,48(sp)
   14d48:	003ea606 	br	147e4 <_dtoa_r+0x254>
   14d4c:	d9000b17 	ldw	r4,44(sp)
   14d50:	202cc03a 	cmpne	r22,r4,zero
   14d54:	b000d11e 	bne	r22,zero,1509c <_dtoa_r+0xb0c>
   14d58:	dc001117 	ldw	r16,68(sp)
   14d5c:	dc801017 	ldw	r18,64(sp)
   14d60:	0027883a 	mov	r19,zero
   14d64:	04000b0e 	bge	zero,r16,14d94 <_dtoa_r+0x804>
   14d68:	d8c00a17 	ldw	r3,40(sp)
   14d6c:	00c0090e 	bge	zero,r3,14d94 <_dtoa_r+0x804>
   14d70:	8005883a 	mov	r2,r16
   14d74:	1c011d16 	blt	r3,r16,151ec <_dtoa_r+0xc5c>
   14d78:	d9000a17 	ldw	r4,40(sp)
   14d7c:	d9801117 	ldw	r6,68(sp)
   14d80:	80a1c83a 	sub	r16,r16,r2
   14d84:	2089c83a 	sub	r4,r4,r2
   14d88:	308dc83a 	sub	r6,r6,r2
   14d8c:	d9000a15 	stw	r4,40(sp)
   14d90:	d9801115 	stw	r6,68(sp)
   14d94:	d8801017 	ldw	r2,64(sp)
   14d98:	0080150e 	bge	zero,r2,14df0 <_dtoa_r+0x860>
   14d9c:	d8c00b17 	ldw	r3,44(sp)
   14da0:	1805003a 	cmpeq	r2,r3,zero
   14da4:	1001d31e 	bne	r2,zero,154f4 <_dtoa_r+0xf64>
   14da8:	04800e0e 	bge	zero,r18,14de4 <_dtoa_r+0x854>
   14dac:	d9001617 	ldw	r4,88(sp)
   14db0:	980b883a 	mov	r5,r19
   14db4:	900d883a 	mov	r6,r18
   14db8:	001398c0 	call	1398c <__pow5mult>
   14dbc:	d9001617 	ldw	r4,88(sp)
   14dc0:	d9800717 	ldw	r6,28(sp)
   14dc4:	100b883a 	mov	r5,r2
   14dc8:	1027883a 	mov	r19,r2
   14dcc:	00135d00 	call	135d0 <__multiply>
   14dd0:	d9001617 	ldw	r4,88(sp)
   14dd4:	d9400717 	ldw	r5,28(sp)
   14dd8:	1023883a 	mov	r17,r2
   14ddc:	00130140 	call	13014 <_Bfree>
   14de0:	dc400715 	stw	r17,28(sp)
   14de4:	d9001017 	ldw	r4,64(sp)
   14de8:	248dc83a 	sub	r6,r4,r18
   14dec:	3001181e 	bne	r6,zero,15250 <_dtoa_r+0xcc0>
   14df0:	d9001617 	ldw	r4,88(sp)
   14df4:	04400044 	movi	r17,1
   14df8:	880b883a 	mov	r5,r17
   14dfc:	00138240 	call	13824 <__i2b>
   14e00:	d9800917 	ldw	r6,36(sp)
   14e04:	1025883a 	mov	r18,r2
   14e08:	0180040e 	bge	zero,r6,14e1c <_dtoa_r+0x88c>
   14e0c:	d9001617 	ldw	r4,88(sp)
   14e10:	100b883a 	mov	r5,r2
   14e14:	001398c0 	call	1398c <__pow5mult>
   14e18:	1025883a 	mov	r18,r2
   14e1c:	d8801717 	ldw	r2,92(sp)
   14e20:	8880fd0e 	bge	r17,r2,15218 <_dtoa_r+0xc88>
   14e24:	0023883a 	mov	r17,zero
   14e28:	d9800917 	ldw	r6,36(sp)
   14e2c:	3001a81e 	bne	r6,zero,154d0 <_dtoa_r+0xf40>
   14e30:	00c00044 	movi	r3,1
   14e34:	d9000a17 	ldw	r4,40(sp)
   14e38:	20c5883a 	add	r2,r4,r3
   14e3c:	10c007cc 	andi	r3,r2,31
   14e40:	18008e1e 	bne	r3,zero,1507c <_dtoa_r+0xaec>
   14e44:	00800704 	movi	r2,28
   14e48:	d9000a17 	ldw	r4,40(sp)
   14e4c:	d9801117 	ldw	r6,68(sp)
   14e50:	80a1883a 	add	r16,r16,r2
   14e54:	2089883a 	add	r4,r4,r2
   14e58:	308d883a 	add	r6,r6,r2
   14e5c:	d9000a15 	stw	r4,40(sp)
   14e60:	d9801115 	stw	r6,68(sp)
   14e64:	d8801117 	ldw	r2,68(sp)
   14e68:	0080050e 	bge	zero,r2,14e80 <_dtoa_r+0x8f0>
   14e6c:	d9400717 	ldw	r5,28(sp)
   14e70:	d9001617 	ldw	r4,88(sp)
   14e74:	100d883a 	mov	r6,r2
   14e78:	00134840 	call	13484 <__lshift>
   14e7c:	d8800715 	stw	r2,28(sp)
   14e80:	d8c00a17 	ldw	r3,40(sp)
   14e84:	00c0050e 	bge	zero,r3,14e9c <_dtoa_r+0x90c>
   14e88:	d9001617 	ldw	r4,88(sp)
   14e8c:	900b883a 	mov	r5,r18
   14e90:	180d883a 	mov	r6,r3
   14e94:	00134840 	call	13484 <__lshift>
   14e98:	1025883a 	mov	r18,r2
   14e9c:	d9000c17 	ldw	r4,48(sp)
   14ea0:	2005003a 	cmpeq	r2,r4,zero
   14ea4:	10017926 	beq	r2,zero,1548c <_dtoa_r+0xefc>
   14ea8:	d9000f17 	ldw	r4,60(sp)
   14eac:	0102210e 	bge	zero,r4,15734 <_dtoa_r+0x11a4>
   14eb0:	d9800b17 	ldw	r6,44(sp)
   14eb4:	3005003a 	cmpeq	r2,r6,zero
   14eb8:	1000921e 	bne	r2,zero,15104 <_dtoa_r+0xb74>
   14ebc:	0400050e 	bge	zero,r16,14ed4 <_dtoa_r+0x944>
   14ec0:	d9001617 	ldw	r4,88(sp)
   14ec4:	980b883a 	mov	r5,r19
   14ec8:	800d883a 	mov	r6,r16
   14ecc:	00134840 	call	13484 <__lshift>
   14ed0:	1027883a 	mov	r19,r2
   14ed4:	8804c03a 	cmpne	r2,r17,zero
   14ed8:	10025e1e 	bne	r2,zero,15854 <_dtoa_r+0x12c4>
   14edc:	980b883a 	mov	r5,r19
   14ee0:	dd800517 	ldw	r22,20(sp)
   14ee4:	dcc00615 	stw	r19,24(sp)
   14ee8:	a700004c 	andi	fp,r20,1
   14eec:	2827883a 	mov	r19,r5
   14ef0:	d9000717 	ldw	r4,28(sp)
   14ef4:	900b883a 	mov	r5,r18
   14ef8:	001434c0 	call	1434c <quorem>
   14efc:	d9000717 	ldw	r4,28(sp)
   14f00:	d9400617 	ldw	r5,24(sp)
   14f04:	1023883a 	mov	r17,r2
   14f08:	8dc00c04 	addi	r23,r17,48
   14f0c:	0012bf00 	call	12bf0 <__mcmp>
   14f10:	d9001617 	ldw	r4,88(sp)
   14f14:	900b883a 	mov	r5,r18
   14f18:	980d883a 	mov	r6,r19
   14f1c:	1029883a 	mov	r20,r2
   14f20:	00132f80 	call	132f8 <__mdiff>
   14f24:	102b883a 	mov	r21,r2
   14f28:	10800317 	ldw	r2,12(r2)
   14f2c:	1001321e 	bne	r2,zero,153f8 <_dtoa_r+0xe68>
   14f30:	d9000717 	ldw	r4,28(sp)
   14f34:	a80b883a 	mov	r5,r21
   14f38:	0012bf00 	call	12bf0 <__mcmp>
   14f3c:	d9001617 	ldw	r4,88(sp)
   14f40:	1021883a 	mov	r16,r2
   14f44:	a80b883a 	mov	r5,r21
   14f48:	00130140 	call	13014 <_Bfree>
   14f4c:	8000041e 	bne	r16,zero,14f60 <_dtoa_r+0x9d0>
   14f50:	d8801717 	ldw	r2,92(sp)
   14f54:	1000021e 	bne	r2,zero,14f60 <_dtoa_r+0x9d0>
   14f58:	e004c03a 	cmpne	r2,fp,zero
   14f5c:	10012126 	beq	r2,zero,153e4 <_dtoa_r+0xe54>
   14f60:	a0011016 	blt	r20,zero,153a4 <_dtoa_r+0xe14>
   14f64:	a000041e 	bne	r20,zero,14f78 <_dtoa_r+0x9e8>
   14f68:	d8c01717 	ldw	r3,92(sp)
   14f6c:	1800021e 	bne	r3,zero,14f78 <_dtoa_r+0x9e8>
   14f70:	e004c03a 	cmpne	r2,fp,zero
   14f74:	10010b26 	beq	r2,zero,153a4 <_dtoa_r+0xe14>
   14f78:	04024716 	blt	zero,r16,15898 <_dtoa_r+0x1308>
   14f7c:	b5c00005 	stb	r23,0(r22)
   14f80:	d9800517 	ldw	r6,20(sp)
   14f84:	d9000f17 	ldw	r4,60(sp)
   14f88:	b5800044 	addi	r22,r22,1
   14f8c:	3105883a 	add	r2,r6,r4
   14f90:	b0806f26 	beq	r22,r2,15150 <_dtoa_r+0xbc0>
   14f94:	d9400717 	ldw	r5,28(sp)
   14f98:	d9001617 	ldw	r4,88(sp)
   14f9c:	01800284 	movi	r6,10
   14fa0:	000f883a 	mov	r7,zero
   14fa4:	00138600 	call	13860 <__multadd>
   14fa8:	d8800715 	stw	r2,28(sp)
   14fac:	d8800617 	ldw	r2,24(sp)
   14fb0:	14c11626 	beq	r2,r19,1540c <_dtoa_r+0xe7c>
   14fb4:	d9400617 	ldw	r5,24(sp)
   14fb8:	d9001617 	ldw	r4,88(sp)
   14fbc:	01800284 	movi	r6,10
   14fc0:	000f883a 	mov	r7,zero
   14fc4:	00138600 	call	13860 <__multadd>
   14fc8:	d9001617 	ldw	r4,88(sp)
   14fcc:	980b883a 	mov	r5,r19
   14fd0:	01800284 	movi	r6,10
   14fd4:	000f883a 	mov	r7,zero
   14fd8:	d8800615 	stw	r2,24(sp)
   14fdc:	00138600 	call	13860 <__multadd>
   14fe0:	1027883a 	mov	r19,r2
   14fe4:	003fc206 	br	14ef0 <_dtoa_r+0x960>
   14fe8:	01000404 	movi	r4,16
   14fec:	0015fd80 	call	15fd8 <malloc>
   14ff0:	1025883a 	mov	r18,r2
   14ff4:	d8801617 	ldw	r2,88(sp)
   14ff8:	90000115 	stw	zero,4(r18)
   14ffc:	90000215 	stw	zero,8(r18)
   15000:	14800415 	stw	r18,16(r2)
   15004:	90000015 	stw	zero,0(r18)
   15008:	90000315 	stw	zero,12(r18)
   1500c:	003d7306 	br	145dc <_dtoa_r+0x4c>
   15010:	01bfffc4 	movi	r6,-1
   15014:	00800044 	movi	r2,1
   15018:	d9800e15 	stw	r6,56(sp)
   1501c:	d9800f15 	stw	r6,60(sp)
   15020:	d8800b15 	stw	r2,44(sp)
   15024:	d8c01617 	ldw	r3,88(sp)
   15028:	008005c4 	movi	r2,23
   1502c:	1c800417 	ldw	r18,16(r3)
   15030:	90000115 	stw	zero,4(r18)
   15034:	1580072e 	bgeu	r2,r22,15054 <_dtoa_r+0xac4>
   15038:	00c00104 	movi	r3,4
   1503c:	0009883a 	mov	r4,zero
   15040:	18c7883a 	add	r3,r3,r3
   15044:	18800504 	addi	r2,r3,20
   15048:	21000044 	addi	r4,r4,1
   1504c:	b0bffc2e 	bgeu	r22,r2,15040 <_dtoa_r+0xab0>
   15050:	91000115 	stw	r4,4(r18)
   15054:	dc000f17 	ldw	r16,60(sp)
   15058:	003e4306 	br	14968 <_dtoa_r+0x3d8>
   1505c:	d9801717 	ldw	r6,92(sp)
   15060:	0023883a 	mov	r17,zero
   15064:	31bfff04 	addi	r6,r6,-4
   15068:	d9801715 	stw	r6,92(sp)
   1506c:	003def06 	br	1482c <_dtoa_r+0x29c>
   15070:	2445c83a 	sub	r2,r4,r17
   15074:	a088983a 	sll	r4,r20,r2
   15078:	003e2706 	br	14918 <_dtoa_r+0x388>
   1507c:	00800804 	movi	r2,32
   15080:	10c9c83a 	sub	r4,r2,r3
   15084:	00c00104 	movi	r3,4
   15088:	19005a16 	blt	r3,r4,151f4 <_dtoa_r+0xc64>
   1508c:	008000c4 	movi	r2,3
   15090:	113f7416 	blt	r2,r4,14e64 <_dtoa_r+0x8d4>
   15094:	20800704 	addi	r2,r4,28
   15098:	003f6b06 	br	14e48 <_dtoa_r+0x8b8>
   1509c:	d9801717 	ldw	r6,92(sp)
   150a0:	00800044 	movi	r2,1
   150a4:	1180a10e 	bge	r2,r6,1532c <_dtoa_r+0xd9c>
   150a8:	d9800f17 	ldw	r6,60(sp)
   150ac:	d8c01017 	ldw	r3,64(sp)
   150b0:	30bfffc4 	addi	r2,r6,-1
   150b4:	1881c616 	blt	r3,r2,157d0 <_dtoa_r+0x1240>
   150b8:	18a5c83a 	sub	r18,r3,r2
   150bc:	d8800f17 	ldw	r2,60(sp)
   150c0:	10026216 	blt	r2,zero,15a4c <_dtoa_r+0x14bc>
   150c4:	dc001117 	ldw	r16,68(sp)
   150c8:	1007883a 	mov	r3,r2
   150cc:	d9800a17 	ldw	r6,40(sp)
   150d0:	d8801117 	ldw	r2,68(sp)
   150d4:	d9001617 	ldw	r4,88(sp)
   150d8:	30cd883a 	add	r6,r6,r3
   150dc:	10c5883a 	add	r2,r2,r3
   150e0:	01400044 	movi	r5,1
   150e4:	d9800a15 	stw	r6,40(sp)
   150e8:	d8801115 	stw	r2,68(sp)
   150ec:	00138240 	call	13824 <__i2b>
   150f0:	1027883a 	mov	r19,r2
   150f4:	003f1b06 	br	14d64 <_dtoa_r+0x7d4>
   150f8:	00c000b4 	movhi	r3,2
   150fc:	18e49a04 	addi	r3,r3,-28056
   15100:	003d5b06 	br	14670 <_dtoa_r+0xe0>
   15104:	dd800517 	ldw	r22,20(sp)
   15108:	04000044 	movi	r16,1
   1510c:	00000706 	br	1512c <_dtoa_r+0xb9c>
   15110:	d9400717 	ldw	r5,28(sp)
   15114:	d9001617 	ldw	r4,88(sp)
   15118:	01800284 	movi	r6,10
   1511c:	000f883a 	mov	r7,zero
   15120:	00138600 	call	13860 <__multadd>
   15124:	d8800715 	stw	r2,28(sp)
   15128:	84000044 	addi	r16,r16,1
   1512c:	d9000717 	ldw	r4,28(sp)
   15130:	900b883a 	mov	r5,r18
   15134:	001434c0 	call	1434c <quorem>
   15138:	15c00c04 	addi	r23,r2,48
   1513c:	b5c00005 	stb	r23,0(r22)
   15140:	d8c00f17 	ldw	r3,60(sp)
   15144:	b5800044 	addi	r22,r22,1
   15148:	80fff116 	blt	r16,r3,15110 <_dtoa_r+0xb80>
   1514c:	d8000615 	stw	zero,24(sp)
   15150:	d9400717 	ldw	r5,28(sp)
   15154:	d9001617 	ldw	r4,88(sp)
   15158:	01800044 	movi	r6,1
   1515c:	00134840 	call	13484 <__lshift>
   15160:	1009883a 	mov	r4,r2
   15164:	900b883a 	mov	r5,r18
   15168:	d8800715 	stw	r2,28(sp)
   1516c:	0012bf00 	call	12bf0 <__mcmp>
   15170:	00803c0e 	bge	zero,r2,15264 <_dtoa_r+0xcd4>
   15174:	b009883a 	mov	r4,r22
   15178:	213fffc4 	addi	r4,r4,-1
   1517c:	21400003 	ldbu	r5,0(r4)
   15180:	00800e44 	movi	r2,57
   15184:	28c03fcc 	andi	r3,r5,255
   15188:	18c0201c 	xori	r3,r3,128
   1518c:	18ffe004 	addi	r3,r3,-128
   15190:	1881981e 	bne	r3,r2,157f4 <_dtoa_r+0x1264>
   15194:	d9800517 	ldw	r6,20(sp)
   15198:	21bff71e 	bne	r4,r6,15178 <_dtoa_r+0xbe8>
   1519c:	d8800d17 	ldw	r2,52(sp)
   151a0:	37000044 	addi	fp,r6,1
   151a4:	10800044 	addi	r2,r2,1
   151a8:	d8800d15 	stw	r2,52(sp)
   151ac:	00800c44 	movi	r2,49
   151b0:	30800005 	stb	r2,0(r6)
   151b4:	d9001617 	ldw	r4,88(sp)
   151b8:	900b883a 	mov	r5,r18
   151bc:	00130140 	call	13014 <_Bfree>
   151c0:	983ec326 	beq	r19,zero,14cd0 <_dtoa_r+0x740>
   151c4:	d8c00617 	ldw	r3,24(sp)
   151c8:	18000426 	beq	r3,zero,151dc <_dtoa_r+0xc4c>
   151cc:	1cc00326 	beq	r3,r19,151dc <_dtoa_r+0xc4c>
   151d0:	d9001617 	ldw	r4,88(sp)
   151d4:	180b883a 	mov	r5,r3
   151d8:	00130140 	call	13014 <_Bfree>
   151dc:	d9001617 	ldw	r4,88(sp)
   151e0:	980b883a 	mov	r5,r19
   151e4:	00130140 	call	13014 <_Bfree>
   151e8:	003eb906 	br	14cd0 <_dtoa_r+0x740>
   151ec:	1805883a 	mov	r2,r3
   151f0:	003ee106 	br	14d78 <_dtoa_r+0x7e8>
   151f4:	d9800a17 	ldw	r6,40(sp)
   151f8:	d8c01117 	ldw	r3,68(sp)
   151fc:	20bfff04 	addi	r2,r4,-4
   15200:	308d883a 	add	r6,r6,r2
   15204:	1887883a 	add	r3,r3,r2
   15208:	80a1883a 	add	r16,r16,r2
   1520c:	d9800a15 	stw	r6,40(sp)
   15210:	d8c01115 	stw	r3,68(sp)
   15214:	003f1306 	br	14e64 <_dtoa_r+0x8d4>
   15218:	a03f021e 	bne	r20,zero,14e24 <_dtoa_r+0x894>
   1521c:	00800434 	movhi	r2,16
   15220:	10bfffc4 	addi	r2,r2,-1
   15224:	a884703a 	and	r2,r21,r2
   15228:	103efe1e 	bne	r2,zero,14e24 <_dtoa_r+0x894>
   1522c:	a89ffc2c 	andhi	r2,r21,32752
   15230:	103efc26 	beq	r2,zero,14e24 <_dtoa_r+0x894>
   15234:	d8c01117 	ldw	r3,68(sp)
   15238:	d9000a17 	ldw	r4,40(sp)
   1523c:	18c00044 	addi	r3,r3,1
   15240:	21000044 	addi	r4,r4,1
   15244:	d8c01115 	stw	r3,68(sp)
   15248:	d9000a15 	stw	r4,40(sp)
   1524c:	003ef606 	br	14e28 <_dtoa_r+0x898>
   15250:	d9400717 	ldw	r5,28(sp)
   15254:	d9001617 	ldw	r4,88(sp)
   15258:	001398c0 	call	1398c <__pow5mult>
   1525c:	d8800715 	stw	r2,28(sp)
   15260:	003ee306 	br	14df0 <_dtoa_r+0x860>
   15264:	1000021e 	bne	r2,zero,15270 <_dtoa_r+0xce0>
   15268:	b880004c 	andi	r2,r23,1
   1526c:	103fc11e 	bne	r2,zero,15174 <_dtoa_r+0xbe4>
   15270:	b5bfffc4 	addi	r22,r22,-1
   15274:	b0c00007 	ldb	r3,0(r22)
   15278:	00800c04 	movi	r2,48
   1527c:	18bffc26 	beq	r3,r2,15270 <_dtoa_r+0xce0>
   15280:	b7000044 	addi	fp,r22,1
   15284:	003fcb06 	br	151b4 <_dtoa_r+0xc24>
   15288:	d8800d17 	ldw	r2,52(sp)
   1528c:	008fc83a 	sub	r7,zero,r2
   15290:	3801f726 	beq	r7,zero,15a70 <_dtoa_r+0x14e0>
   15294:	398003cc 	andi	r6,r7,15
   15298:	300c90fa 	slli	r6,r6,3
   1529c:	014000b4 	movhi	r5,2
   152a0:	29644d04 	addi	r5,r5,-28364
   152a4:	d9001217 	ldw	r4,72(sp)
   152a8:	314d883a 	add	r6,r6,r5
   152ac:	30c00117 	ldw	r3,4(r6)
   152b0:	30800017 	ldw	r2,0(r6)
   152b4:	d9401317 	ldw	r5,76(sp)
   152b8:	3821d13a 	srai	r16,r7,4
   152bc:	100d883a 	mov	r6,r2
   152c0:	180f883a 	mov	r7,r3
   152c4:	00168480 	call	16848 <__muldf3>
   152c8:	1011883a 	mov	r8,r2
   152cc:	1813883a 	mov	r9,r3
   152d0:	1029883a 	mov	r20,r2
   152d4:	182b883a 	mov	r21,r3
   152d8:	8001e526 	beq	r16,zero,15a70 <_dtoa_r+0x14e0>
   152dc:	05800084 	movi	r22,2
   152e0:	044000b4 	movhi	r17,2
   152e4:	8c647f04 	addi	r17,r17,-28164
   152e8:	8080004c 	andi	r2,r16,1
   152ec:	1005003a 	cmpeq	r2,r2,zero
   152f0:	1000081e 	bne	r2,zero,15314 <_dtoa_r+0xd84>
   152f4:	89800017 	ldw	r6,0(r17)
   152f8:	89c00117 	ldw	r7,4(r17)
   152fc:	480b883a 	mov	r5,r9
   15300:	4009883a 	mov	r4,r8
   15304:	00168480 	call	16848 <__muldf3>
   15308:	1011883a 	mov	r8,r2
   1530c:	b5800044 	addi	r22,r22,1
   15310:	1813883a 	mov	r9,r3
   15314:	8021d07a 	srai	r16,r16,1
   15318:	8c400204 	addi	r17,r17,8
   1531c:	803ff21e 	bne	r16,zero,152e8 <_dtoa_r+0xd58>
   15320:	4029883a 	mov	r20,r8
   15324:	482b883a 	mov	r21,r9
   15328:	003dc006 	br	14a2c <_dtoa_r+0x49c>
   1532c:	d9000817 	ldw	r4,32(sp)
   15330:	2005003a 	cmpeq	r2,r4,zero
   15334:	1001f61e 	bne	r2,zero,15b10 <_dtoa_r+0x1580>
   15338:	dc001117 	ldw	r16,68(sp)
   1533c:	dc801017 	ldw	r18,64(sp)
   15340:	18c10cc4 	addi	r3,r3,1075
   15344:	003f6106 	br	150cc <_dtoa_r+0xb3c>
   15348:	d8000b15 	stw	zero,44(sp)
   1534c:	d9802617 	ldw	r6,152(sp)
   15350:	d8c00d17 	ldw	r3,52(sp)
   15354:	30800044 	addi	r2,r6,1
   15358:	18ad883a 	add	r22,r3,r2
   1535c:	b13fffc4 	addi	r4,r22,-1
   15360:	d9000e15 	stw	r4,56(sp)
   15364:	0581f60e 	bge	zero,r22,15b40 <_dtoa_r+0x15b0>
   15368:	dd800f15 	stw	r22,60(sp)
   1536c:	003f2d06 	br	15024 <_dtoa_r+0xa94>
   15370:	d8000b15 	stw	zero,44(sp)
   15374:	d9002617 	ldw	r4,152(sp)
   15378:	0101eb0e 	bge	zero,r4,15b28 <_dtoa_r+0x1598>
   1537c:	202d883a 	mov	r22,r4
   15380:	d9000e15 	stw	r4,56(sp)
   15384:	d9000f15 	stw	r4,60(sp)
   15388:	003f2606 	br	15024 <_dtoa_r+0xa94>
   1538c:	01800044 	movi	r6,1
   15390:	d9800b15 	stw	r6,44(sp)
   15394:	003ff706 	br	15374 <_dtoa_r+0xde4>
   15398:	01000044 	movi	r4,1
   1539c:	d9000b15 	stw	r4,44(sp)
   153a0:	003fea06 	br	1534c <_dtoa_r+0xdbc>
   153a4:	04000c0e 	bge	zero,r16,153d8 <_dtoa_r+0xe48>
   153a8:	d9400717 	ldw	r5,28(sp)
   153ac:	d9001617 	ldw	r4,88(sp)
   153b0:	01800044 	movi	r6,1
   153b4:	00134840 	call	13484 <__lshift>
   153b8:	1009883a 	mov	r4,r2
   153bc:	900b883a 	mov	r5,r18
   153c0:	d8800715 	stw	r2,28(sp)
   153c4:	0012bf00 	call	12bf0 <__mcmp>
   153c8:	0081e00e 	bge	zero,r2,15b4c <_dtoa_r+0x15bc>
   153cc:	bdc00044 	addi	r23,r23,1
   153d0:	00800e84 	movi	r2,58
   153d4:	b881a226 	beq	r23,r2,15a60 <_dtoa_r+0x14d0>
   153d8:	b7000044 	addi	fp,r22,1
   153dc:	b5c00005 	stb	r23,0(r22)
   153e0:	003f7406 	br	151b4 <_dtoa_r+0xc24>
   153e4:	00800e44 	movi	r2,57
   153e8:	b8819d26 	beq	r23,r2,15a60 <_dtoa_r+0x14d0>
   153ec:	053ffa0e 	bge	zero,r20,153d8 <_dtoa_r+0xe48>
   153f0:	8dc00c44 	addi	r23,r17,49
   153f4:	003ff806 	br	153d8 <_dtoa_r+0xe48>
   153f8:	d9001617 	ldw	r4,88(sp)
   153fc:	a80b883a 	mov	r5,r21
   15400:	04000044 	movi	r16,1
   15404:	00130140 	call	13014 <_Bfree>
   15408:	003ed506 	br	14f60 <_dtoa_r+0x9d0>
   1540c:	d9001617 	ldw	r4,88(sp)
   15410:	980b883a 	mov	r5,r19
   15414:	01800284 	movi	r6,10
   15418:	000f883a 	mov	r7,zero
   1541c:	00138600 	call	13860 <__multadd>
   15420:	1027883a 	mov	r19,r2
   15424:	d8800615 	stw	r2,24(sp)
   15428:	003eb106 	br	14ef0 <_dtoa_r+0x960>
   1542c:	d9801117 	ldw	r6,68(sp)
   15430:	d8800d17 	ldw	r2,52(sp)
   15434:	d8000915 	stw	zero,36(sp)
   15438:	308dc83a 	sub	r6,r6,r2
   1543c:	0087c83a 	sub	r3,zero,r2
   15440:	d9801115 	stw	r6,68(sp)
   15444:	d8c01015 	stw	r3,64(sp)
   15448:	003cf206 	br	14814 <_dtoa_r+0x284>
   1544c:	018dc83a 	sub	r6,zero,r6
   15450:	d9801115 	stw	r6,68(sp)
   15454:	d8000a15 	stw	zero,40(sp)
   15458:	003ce706 	br	147f8 <_dtoa_r+0x268>
   1545c:	d9000d17 	ldw	r4,52(sp)
   15460:	00110c00 	call	110c0 <__floatsidf>
   15464:	880b883a 	mov	r5,r17
   15468:	8009883a 	mov	r4,r16
   1546c:	180f883a 	mov	r7,r3
   15470:	100d883a 	mov	r6,r2
   15474:	0016eec0 	call	16eec <__nedf2>
   15478:	103cd526 	beq	r2,zero,147d0 <_dtoa_r+0x240>
   1547c:	d9800d17 	ldw	r6,52(sp)
   15480:	31bfffc4 	addi	r6,r6,-1
   15484:	d9800d15 	stw	r6,52(sp)
   15488:	003cd106 	br	147d0 <_dtoa_r+0x240>
   1548c:	d9000717 	ldw	r4,28(sp)
   15490:	900b883a 	mov	r5,r18
   15494:	0012bf00 	call	12bf0 <__mcmp>
   15498:	103e830e 	bge	r2,zero,14ea8 <_dtoa_r+0x918>
   1549c:	d9400717 	ldw	r5,28(sp)
   154a0:	d9001617 	ldw	r4,88(sp)
   154a4:	01800284 	movi	r6,10
   154a8:	000f883a 	mov	r7,zero
   154ac:	00138600 	call	13860 <__multadd>
   154b0:	d9800d17 	ldw	r6,52(sp)
   154b4:	d8800715 	stw	r2,28(sp)
   154b8:	31bfffc4 	addi	r6,r6,-1
   154bc:	d9800d15 	stw	r6,52(sp)
   154c0:	b001a71e 	bne	r22,zero,15b60 <_dtoa_r+0x15d0>
   154c4:	d8800e17 	ldw	r2,56(sp)
   154c8:	d8800f15 	stw	r2,60(sp)
   154cc:	003e7606 	br	14ea8 <_dtoa_r+0x918>
   154d0:	90800417 	ldw	r2,16(r18)
   154d4:	1085883a 	add	r2,r2,r2
   154d8:	1085883a 	add	r2,r2,r2
   154dc:	1485883a 	add	r2,r2,r18
   154e0:	11000417 	ldw	r4,16(r2)
   154e4:	0012abc0 	call	12abc <__hi0bits>
   154e8:	00c00804 	movi	r3,32
   154ec:	1887c83a 	sub	r3,r3,r2
   154f0:	003e5006 	br	14e34 <_dtoa_r+0x8a4>
   154f4:	d9400717 	ldw	r5,28(sp)
   154f8:	d9801017 	ldw	r6,64(sp)
   154fc:	d9001617 	ldw	r4,88(sp)
   15500:	001398c0 	call	1398c <__pow5mult>
   15504:	d8800715 	stw	r2,28(sp)
   15508:	003e3906 	br	14df0 <_dtoa_r+0x860>
   1550c:	d9800f17 	ldw	r6,60(sp)
   15510:	d8800d17 	ldw	r2,52(sp)
   15514:	d9800415 	stw	r6,16(sp)
   15518:	d8800315 	stw	r2,12(sp)
   1551c:	d8c00b17 	ldw	r3,44(sp)
   15520:	1805003a 	cmpeq	r2,r3,zero
   15524:	1000e21e 	bne	r2,zero,158b0 <_dtoa_r+0x1320>
   15528:	d9000417 	ldw	r4,16(sp)
   1552c:	0005883a 	mov	r2,zero
   15530:	00cff834 	movhi	r3,16352
   15534:	200c90fa 	slli	r6,r4,3
   15538:	010000b4 	movhi	r4,2
   1553c:	21244d04 	addi	r4,r4,-28364
   15540:	180b883a 	mov	r5,r3
   15544:	310d883a 	add	r6,r6,r4
   15548:	327fff17 	ldw	r9,-4(r6)
   1554c:	323ffe17 	ldw	r8,-8(r6)
   15550:	1009883a 	mov	r4,r2
   15554:	480f883a 	mov	r7,r9
   15558:	400d883a 	mov	r6,r8
   1555c:	0016c0c0 	call	16c0c <__divdf3>
   15560:	180b883a 	mov	r5,r3
   15564:	b00d883a 	mov	r6,r22
   15568:	b80f883a 	mov	r7,r23
   1556c:	1009883a 	mov	r4,r2
   15570:	0010fcc0 	call	10fcc <__subdf3>
   15574:	a80b883a 	mov	r5,r21
   15578:	a009883a 	mov	r4,r20
   1557c:	d8c01915 	stw	r3,100(sp)
   15580:	d8801815 	stw	r2,96(sp)
   15584:	00171940 	call	17194 <__fixdfsi>
   15588:	1009883a 	mov	r4,r2
   1558c:	1027883a 	mov	r19,r2
   15590:	00110c00 	call	110c0 <__floatsidf>
   15594:	a80b883a 	mov	r5,r21
   15598:	a009883a 	mov	r4,r20
   1559c:	180f883a 	mov	r7,r3
   155a0:	100d883a 	mov	r6,r2
   155a4:	0010fcc0 	call	10fcc <__subdf3>
   155a8:	d9801817 	ldw	r6,96(sp)
   155ac:	1823883a 	mov	r17,r3
   155b0:	d8801415 	stw	r2,80(sp)
   155b4:	302d883a 	mov	r22,r6
   155b8:	d9800517 	ldw	r6,20(sp)
   155bc:	9cc00c04 	addi	r19,r19,48
   155c0:	dc401515 	stw	r17,84(sp)
   155c4:	d8c01917 	ldw	r3,100(sp)
   155c8:	34c00005 	stb	r19,0(r6)
   155cc:	d8800517 	ldw	r2,20(sp)
   155d0:	d9401917 	ldw	r5,100(sp)
   155d4:	d9801417 	ldw	r6,80(sp)
   155d8:	b009883a 	mov	r4,r22
   155dc:	880f883a 	mov	r7,r17
   155e0:	182f883a 	mov	r23,r3
   155e4:	17000044 	addi	fp,r2,1
   155e8:	0016f740 	call	16f74 <__gtdf2>
   155ec:	00804e16 	blt	zero,r2,15728 <_dtoa_r+0x1198>
   155f0:	d9801417 	ldw	r6,80(sp)
   155f4:	0005883a 	mov	r2,zero
   155f8:	00cffc34 	movhi	r3,16368
   155fc:	180b883a 	mov	r5,r3
   15600:	880f883a 	mov	r7,r17
   15604:	1009883a 	mov	r4,r2
   15608:	0010fcc0 	call	10fcc <__subdf3>
   1560c:	d9401917 	ldw	r5,100(sp)
   15610:	180f883a 	mov	r7,r3
   15614:	b009883a 	mov	r4,r22
   15618:	100d883a 	mov	r6,r2
   1561c:	0016f740 	call	16f74 <__gtdf2>
   15620:	00bd9816 	blt	zero,r2,14c84 <_dtoa_r+0x6f4>
   15624:	d8c00417 	ldw	r3,16(sp)
   15628:	00800044 	movi	r2,1
   1562c:	10c01216 	blt	r2,r3,15678 <_dtoa_r+0x10e8>
   15630:	003d3b06 	br	14b20 <_dtoa_r+0x590>
   15634:	d9801417 	ldw	r6,80(sp)
   15638:	0005883a 	mov	r2,zero
   1563c:	00cffc34 	movhi	r3,16368
   15640:	180b883a 	mov	r5,r3
   15644:	880f883a 	mov	r7,r17
   15648:	1009883a 	mov	r4,r2
   1564c:	0010fcc0 	call	10fcc <__subdf3>
   15650:	d9c01b17 	ldw	r7,108(sp)
   15654:	180b883a 	mov	r5,r3
   15658:	1009883a 	mov	r4,r2
   1565c:	b00d883a 	mov	r6,r22
   15660:	00170840 	call	17084 <__ltdf2>
   15664:	103d8716 	blt	r2,zero,14c84 <_dtoa_r+0x6f4>
   15668:	d9800517 	ldw	r6,20(sp)
   1566c:	d9000417 	ldw	r4,16(sp)
   15670:	3105883a 	add	r2,r6,r4
   15674:	e0bd2a26 	beq	fp,r2,14b20 <_dtoa_r+0x590>
   15678:	04500934 	movhi	r17,16420
   1567c:	0021883a 	mov	r16,zero
   15680:	b80b883a 	mov	r5,r23
   15684:	b009883a 	mov	r4,r22
   15688:	800d883a 	mov	r6,r16
   1568c:	880f883a 	mov	r7,r17
   15690:	00168480 	call	16848 <__muldf3>
   15694:	d9401517 	ldw	r5,84(sp)
   15698:	d9001417 	ldw	r4,80(sp)
   1569c:	880f883a 	mov	r7,r17
   156a0:	000d883a 	mov	r6,zero
   156a4:	d8801a15 	stw	r2,104(sp)
   156a8:	d8c01b15 	stw	r3,108(sp)
   156ac:	00168480 	call	16848 <__muldf3>
   156b0:	180b883a 	mov	r5,r3
   156b4:	1009883a 	mov	r4,r2
   156b8:	1823883a 	mov	r17,r3
   156bc:	1021883a 	mov	r16,r2
   156c0:	00171940 	call	17194 <__fixdfsi>
   156c4:	1009883a 	mov	r4,r2
   156c8:	102b883a 	mov	r21,r2
   156cc:	00110c00 	call	110c0 <__floatsidf>
   156d0:	880b883a 	mov	r5,r17
   156d4:	8009883a 	mov	r4,r16
   156d8:	180f883a 	mov	r7,r3
   156dc:	100d883a 	mov	r6,r2
   156e0:	0010fcc0 	call	10fcc <__subdf3>
   156e4:	1021883a 	mov	r16,r2
   156e8:	d9001b17 	ldw	r4,108(sp)
   156ec:	1823883a 	mov	r17,r3
   156f0:	dc001415 	stw	r16,80(sp)
   156f4:	ad400c04 	addi	r21,r21,48
   156f8:	dc401515 	stw	r17,84(sp)
   156fc:	d8801a17 	ldw	r2,104(sp)
   15700:	e5400005 	stb	r21,0(fp)
   15704:	202f883a 	mov	r23,r4
   15708:	d9c01b17 	ldw	r7,108(sp)
   1570c:	d9001417 	ldw	r4,80(sp)
   15710:	880b883a 	mov	r5,r17
   15714:	100d883a 	mov	r6,r2
   15718:	102d883a 	mov	r22,r2
   1571c:	e7000044 	addi	fp,fp,1
   15720:	00170840 	call	17084 <__ltdf2>
   15724:	103fc30e 	bge	r2,zero,15634 <_dtoa_r+0x10a4>
   15728:	d9000317 	ldw	r4,12(sp)
   1572c:	d9000d15 	stw	r4,52(sp)
   15730:	003d6706 	br	14cd0 <_dtoa_r+0x740>
   15734:	d9801717 	ldw	r6,92(sp)
   15738:	00800084 	movi	r2,2
   1573c:	11bddc0e 	bge	r2,r6,14eb0 <_dtoa_r+0x920>
   15740:	203cf11e 	bne	r4,zero,14b08 <_dtoa_r+0x578>
   15744:	d9001617 	ldw	r4,88(sp)
   15748:	900b883a 	mov	r5,r18
   1574c:	01800144 	movi	r6,5
   15750:	000f883a 	mov	r7,zero
   15754:	00138600 	call	13860 <__multadd>
   15758:	d9000717 	ldw	r4,28(sp)
   1575c:	100b883a 	mov	r5,r2
   15760:	1025883a 	mov	r18,r2
   15764:	0012bf00 	call	12bf0 <__mcmp>
   15768:	00bce70e 	bge	zero,r2,14b08 <_dtoa_r+0x578>
   1576c:	d8c00d17 	ldw	r3,52(sp)
   15770:	d9000517 	ldw	r4,20(sp)
   15774:	d8000615 	stw	zero,24(sp)
   15778:	18c00044 	addi	r3,r3,1
   1577c:	d8c00d15 	stw	r3,52(sp)
   15780:	00800c44 	movi	r2,49
   15784:	27000044 	addi	fp,r4,1
   15788:	20800005 	stb	r2,0(r4)
   1578c:	003e8906 	br	151b4 <_dtoa_r+0xc24>
   15790:	d8c00517 	ldw	r3,20(sp)
   15794:	003bb606 	br	14670 <_dtoa_r+0xe0>
   15798:	018000b4 	movhi	r6,2
   1579c:	31a47f04 	addi	r6,r6,-28164
   157a0:	30c00917 	ldw	r3,36(r6)
   157a4:	30800817 	ldw	r2,32(r6)
   157a8:	d9001217 	ldw	r4,72(sp)
   157ac:	d9401317 	ldw	r5,76(sp)
   157b0:	180f883a 	mov	r7,r3
   157b4:	100d883a 	mov	r6,r2
   157b8:	0016c0c0 	call	16c0c <__divdf3>
   157bc:	948003cc 	andi	r18,r18,15
   157c0:	058000c4 	movi	r22,3
   157c4:	1029883a 	mov	r20,r2
   157c8:	182b883a 	mov	r21,r3
   157cc:	003c7f06 	br	149cc <_dtoa_r+0x43c>
   157d0:	d9001017 	ldw	r4,64(sp)
   157d4:	d9800917 	ldw	r6,36(sp)
   157d8:	0025883a 	mov	r18,zero
   157dc:	1105c83a 	sub	r2,r2,r4
   157e0:	2089883a 	add	r4,r4,r2
   157e4:	308d883a 	add	r6,r6,r2
   157e8:	d9001015 	stw	r4,64(sp)
   157ec:	d9800915 	stw	r6,36(sp)
   157f0:	003e3206 	br	150bc <_dtoa_r+0xb2c>
   157f4:	28800044 	addi	r2,r5,1
   157f8:	27000044 	addi	fp,r4,1
   157fc:	20800005 	stb	r2,0(r4)
   15800:	003e6c06 	br	151b4 <_dtoa_r+0xc24>
   15804:	d8800f17 	ldw	r2,60(sp)
   15808:	00bcd616 	blt	zero,r2,14b64 <_dtoa_r+0x5d4>
   1580c:	d9800f17 	ldw	r6,60(sp)
   15810:	303cbb1e 	bne	r6,zero,14b00 <_dtoa_r+0x570>
   15814:	0005883a 	mov	r2,zero
   15818:	00d00534 	movhi	r3,16404
   1581c:	980b883a 	mov	r5,r19
   15820:	180f883a 	mov	r7,r3
   15824:	9009883a 	mov	r4,r18
   15828:	100d883a 	mov	r6,r2
   1582c:	00168480 	call	16848 <__muldf3>
   15830:	180b883a 	mov	r5,r3
   15834:	a80f883a 	mov	r7,r21
   15838:	1009883a 	mov	r4,r2
   1583c:	a00d883a 	mov	r6,r20
   15840:	0016ffc0 	call	16ffc <__gedf2>
   15844:	103cae0e 	bge	r2,zero,14b00 <_dtoa_r+0x570>
   15848:	0027883a 	mov	r19,zero
   1584c:	0025883a 	mov	r18,zero
   15850:	003fc606 	br	1576c <_dtoa_r+0x11dc>
   15854:	99400117 	ldw	r5,4(r19)
   15858:	d9001617 	ldw	r4,88(sp)
   1585c:	001308c0 	call	1308c <_Balloc>
   15860:	99800417 	ldw	r6,16(r19)
   15864:	11000304 	addi	r4,r2,12
   15868:	99400304 	addi	r5,r19,12
   1586c:	318d883a 	add	r6,r6,r6
   15870:	318d883a 	add	r6,r6,r6
   15874:	31800204 	addi	r6,r6,8
   15878:	1023883a 	mov	r17,r2
   1587c:	001672c0 	call	1672c <memcpy>
   15880:	d9001617 	ldw	r4,88(sp)
   15884:	880b883a 	mov	r5,r17
   15888:	01800044 	movi	r6,1
   1588c:	00134840 	call	13484 <__lshift>
   15890:	100b883a 	mov	r5,r2
   15894:	003d9206 	br	14ee0 <_dtoa_r+0x950>
   15898:	00800e44 	movi	r2,57
   1589c:	b8807026 	beq	r23,r2,15a60 <_dtoa_r+0x14d0>
   158a0:	b8800044 	addi	r2,r23,1
   158a4:	b7000044 	addi	fp,r22,1
   158a8:	b0800005 	stb	r2,0(r22)
   158ac:	003e4106 	br	151b4 <_dtoa_r+0xc24>
   158b0:	d8800417 	ldw	r2,16(sp)
   158b4:	018000b4 	movhi	r6,2
   158b8:	31a44d04 	addi	r6,r6,-28364
   158bc:	b009883a 	mov	r4,r22
   158c0:	100e90fa 	slli	r7,r2,3
   158c4:	b80b883a 	mov	r5,r23
   158c8:	398f883a 	add	r7,r7,r6
   158cc:	38bffe17 	ldw	r2,-8(r7)
   158d0:	d9800517 	ldw	r6,20(sp)
   158d4:	38ffff17 	ldw	r3,-4(r7)
   158d8:	37000044 	addi	fp,r6,1
   158dc:	180f883a 	mov	r7,r3
   158e0:	100d883a 	mov	r6,r2
   158e4:	00168480 	call	16848 <__muldf3>
   158e8:	a80b883a 	mov	r5,r21
   158ec:	a009883a 	mov	r4,r20
   158f0:	182f883a 	mov	r23,r3
   158f4:	102d883a 	mov	r22,r2
   158f8:	00171940 	call	17194 <__fixdfsi>
   158fc:	1009883a 	mov	r4,r2
   15900:	1027883a 	mov	r19,r2
   15904:	00110c00 	call	110c0 <__floatsidf>
   15908:	a80b883a 	mov	r5,r21
   1590c:	a009883a 	mov	r4,r20
   15910:	180f883a 	mov	r7,r3
   15914:	100d883a 	mov	r6,r2
   15918:	0010fcc0 	call	10fcc <__subdf3>
   1591c:	180b883a 	mov	r5,r3
   15920:	d8c00517 	ldw	r3,20(sp)
   15924:	9cc00c04 	addi	r19,r19,48
   15928:	1009883a 	mov	r4,r2
   1592c:	1cc00005 	stb	r19,0(r3)
   15930:	2021883a 	mov	r16,r4
   15934:	d9000417 	ldw	r4,16(sp)
   15938:	00800044 	movi	r2,1
   1593c:	2823883a 	mov	r17,r5
   15940:	20802226 	beq	r4,r2,159cc <_dtoa_r+0x143c>
   15944:	1029883a 	mov	r20,r2
   15948:	0005883a 	mov	r2,zero
   1594c:	00d00934 	movhi	r3,16420
   15950:	180f883a 	mov	r7,r3
   15954:	100d883a 	mov	r6,r2
   15958:	880b883a 	mov	r5,r17
   1595c:	8009883a 	mov	r4,r16
   15960:	00168480 	call	16848 <__muldf3>
   15964:	180b883a 	mov	r5,r3
   15968:	1009883a 	mov	r4,r2
   1596c:	1823883a 	mov	r17,r3
   15970:	1021883a 	mov	r16,r2
   15974:	00171940 	call	17194 <__fixdfsi>
   15978:	1009883a 	mov	r4,r2
   1597c:	102b883a 	mov	r21,r2
   15980:	00110c00 	call	110c0 <__floatsidf>
   15984:	880b883a 	mov	r5,r17
   15988:	8009883a 	mov	r4,r16
   1598c:	180f883a 	mov	r7,r3
   15990:	100d883a 	mov	r6,r2
   15994:	0010fcc0 	call	10fcc <__subdf3>
   15998:	180b883a 	mov	r5,r3
   1599c:	d8c00517 	ldw	r3,20(sp)
   159a0:	1009883a 	mov	r4,r2
   159a4:	ad400c04 	addi	r21,r21,48
   159a8:	1d05883a 	add	r2,r3,r20
   159ac:	15400005 	stb	r21,0(r2)
   159b0:	2021883a 	mov	r16,r4
   159b4:	d9000417 	ldw	r4,16(sp)
   159b8:	a5000044 	addi	r20,r20,1
   159bc:	2823883a 	mov	r17,r5
   159c0:	a13fe11e 	bne	r20,r4,15948 <_dtoa_r+0x13b8>
   159c4:	e505883a 	add	r2,fp,r20
   159c8:	173fffc4 	addi	fp,r2,-1
   159cc:	0025883a 	mov	r18,zero
   159d0:	04cff834 	movhi	r19,16352
   159d4:	b009883a 	mov	r4,r22
   159d8:	b80b883a 	mov	r5,r23
   159dc:	900d883a 	mov	r6,r18
   159e0:	980f883a 	mov	r7,r19
   159e4:	001104c0 	call	1104c <__adddf3>
   159e8:	180b883a 	mov	r5,r3
   159ec:	1009883a 	mov	r4,r2
   159f0:	800d883a 	mov	r6,r16
   159f4:	880f883a 	mov	r7,r17
   159f8:	00170840 	call	17084 <__ltdf2>
   159fc:	103ca116 	blt	r2,zero,14c84 <_dtoa_r+0x6f4>
   15a00:	0009883a 	mov	r4,zero
   15a04:	980b883a 	mov	r5,r19
   15a08:	b80f883a 	mov	r7,r23
   15a0c:	b00d883a 	mov	r6,r22
   15a10:	0010fcc0 	call	10fcc <__subdf3>
   15a14:	180b883a 	mov	r5,r3
   15a18:	880f883a 	mov	r7,r17
   15a1c:	1009883a 	mov	r4,r2
   15a20:	800d883a 	mov	r6,r16
   15a24:	0016f740 	call	16f74 <__gtdf2>
   15a28:	00bc3d0e 	bge	zero,r2,14b20 <_dtoa_r+0x590>
   15a2c:	00c00c04 	movi	r3,48
   15a30:	e73fffc4 	addi	fp,fp,-1
   15a34:	e0800007 	ldb	r2,0(fp)
   15a38:	10fffd26 	beq	r2,r3,15a30 <_dtoa_r+0x14a0>
   15a3c:	d9800317 	ldw	r6,12(sp)
   15a40:	e7000044 	addi	fp,fp,1
   15a44:	d9800d15 	stw	r6,52(sp)
   15a48:	003ca106 	br	14cd0 <_dtoa_r+0x740>
   15a4c:	d8c00f17 	ldw	r3,60(sp)
   15a50:	d9001117 	ldw	r4,68(sp)
   15a54:	20e1c83a 	sub	r16,r4,r3
   15a58:	0007883a 	mov	r3,zero
   15a5c:	003d9b06 	br	150cc <_dtoa_r+0xb3c>
   15a60:	00800e44 	movi	r2,57
   15a64:	b0800005 	stb	r2,0(r22)
   15a68:	b5800044 	addi	r22,r22,1
   15a6c:	003dc106 	br	15174 <_dtoa_r+0xbe4>
   15a70:	05800084 	movi	r22,2
   15a74:	003bed06 	br	14a2c <_dtoa_r+0x49c>
   15a78:	d9000f17 	ldw	r4,60(sp)
   15a7c:	013bf60e 	bge	zero,r4,14a58 <_dtoa_r+0x4c8>
   15a80:	d9800e17 	ldw	r6,56(sp)
   15a84:	01bc260e 	bge	zero,r6,14b20 <_dtoa_r+0x590>
   15a88:	0005883a 	mov	r2,zero
   15a8c:	00d00934 	movhi	r3,16420
   15a90:	a80b883a 	mov	r5,r21
   15a94:	180f883a 	mov	r7,r3
   15a98:	a009883a 	mov	r4,r20
   15a9c:	100d883a 	mov	r6,r2
   15aa0:	00168480 	call	16848 <__muldf3>
   15aa4:	b1000044 	addi	r4,r22,1
   15aa8:	1021883a 	mov	r16,r2
   15aac:	1823883a 	mov	r17,r3
   15ab0:	00110c00 	call	110c0 <__floatsidf>
   15ab4:	880b883a 	mov	r5,r17
   15ab8:	8009883a 	mov	r4,r16
   15abc:	180f883a 	mov	r7,r3
   15ac0:	100d883a 	mov	r6,r2
   15ac4:	00168480 	call	16848 <__muldf3>
   15ac8:	0011883a 	mov	r8,zero
   15acc:	02500734 	movhi	r9,16412
   15ad0:	180b883a 	mov	r5,r3
   15ad4:	480f883a 	mov	r7,r9
   15ad8:	1009883a 	mov	r4,r2
   15adc:	400d883a 	mov	r6,r8
   15ae0:	001104c0 	call	1104c <__adddf3>
   15ae4:	102d883a 	mov	r22,r2
   15ae8:	00bf3034 	movhi	r2,64704
   15aec:	10ef883a 	add	r23,r2,r3
   15af0:	d8800d17 	ldw	r2,52(sp)
   15af4:	d8c00e17 	ldw	r3,56(sp)
   15af8:	8029883a 	mov	r20,r16
   15afc:	10bfffc4 	addi	r2,r2,-1
   15b00:	882b883a 	mov	r21,r17
   15b04:	d8800315 	stw	r2,12(sp)
   15b08:	d8c00415 	stw	r3,16(sp)
   15b0c:	003e8306 	br	1551c <_dtoa_r+0xf8c>
   15b10:	d8800117 	ldw	r2,4(sp)
   15b14:	dc001117 	ldw	r16,68(sp)
   15b18:	dc801017 	ldw	r18,64(sp)
   15b1c:	00c00d84 	movi	r3,54
   15b20:	1887c83a 	sub	r3,r3,r2
   15b24:	003d6906 	br	150cc <_dtoa_r+0xb3c>
   15b28:	01800044 	movi	r6,1
   15b2c:	3021883a 	mov	r16,r6
   15b30:	d9800f15 	stw	r6,60(sp)
   15b34:	d9802615 	stw	r6,152(sp)
   15b38:	d9800e15 	stw	r6,56(sp)
   15b3c:	003b8706 	br	1495c <_dtoa_r+0x3cc>
   15b40:	b021883a 	mov	r16,r22
   15b44:	dd800f15 	stw	r22,60(sp)
   15b48:	003b8406 	br	1495c <_dtoa_r+0x3cc>
   15b4c:	103e221e 	bne	r2,zero,153d8 <_dtoa_r+0xe48>
   15b50:	b880004c 	andi	r2,r23,1
   15b54:	1005003a 	cmpeq	r2,r2,zero
   15b58:	103e1f1e 	bne	r2,zero,153d8 <_dtoa_r+0xe48>
   15b5c:	003e1b06 	br	153cc <_dtoa_r+0xe3c>
   15b60:	d9001617 	ldw	r4,88(sp)
   15b64:	980b883a 	mov	r5,r19
   15b68:	01800284 	movi	r6,10
   15b6c:	000f883a 	mov	r7,zero
   15b70:	00138600 	call	13860 <__multadd>
   15b74:	d8c00e17 	ldw	r3,56(sp)
   15b78:	1027883a 	mov	r19,r2
   15b7c:	d8c00f15 	stw	r3,60(sp)
   15b80:	003cc906 	br	14ea8 <_dtoa_r+0x918>

00015b84 <_malloc_trim_r>:
   15b84:	defffb04 	addi	sp,sp,-20
   15b88:	dcc00315 	stw	r19,12(sp)
   15b8c:	04c000b4 	movhi	r19,2
   15b90:	9ce4de04 	addi	r19,r19,-27784
   15b94:	dc800215 	stw	r18,8(sp)
   15b98:	dc400115 	stw	r17,4(sp)
   15b9c:	dc000015 	stw	r16,0(sp)
   15ba0:	2823883a 	mov	r17,r5
   15ba4:	2025883a 	mov	r18,r4
   15ba8:	dfc00415 	stw	ra,16(sp)
   15bac:	00175c80 	call	175c8 <__malloc_lock>
   15bb0:	98800217 	ldw	r2,8(r19)
   15bb4:	9009883a 	mov	r4,r18
   15bb8:	000b883a 	mov	r5,zero
   15bbc:	10c00117 	ldw	r3,4(r2)
   15bc0:	00bfff04 	movi	r2,-4
   15bc4:	18a0703a 	and	r16,r3,r2
   15bc8:	8463c83a 	sub	r17,r16,r17
   15bcc:	8c401bc4 	addi	r17,r17,111
   15bd0:	8822d1fa 	srli	r17,r17,7
   15bd4:	00801fc4 	movi	r2,127
   15bd8:	8c7fffc4 	addi	r17,r17,-1
   15bdc:	882291fa 	slli	r17,r17,7
   15be0:	1440060e 	bge	r2,r17,15bfc <_malloc_trim_r+0x78>
   15be4:	00167d80 	call	167d8 <_sbrk_r>
   15be8:	98c00217 	ldw	r3,8(r19)
   15bec:	9009883a 	mov	r4,r18
   15bf0:	044bc83a 	sub	r5,zero,r17
   15bf4:	80c7883a 	add	r3,r16,r3
   15bf8:	10c00926 	beq	r2,r3,15c20 <_malloc_trim_r+0x9c>
   15bfc:	00175e80 	call	175e8 <__malloc_unlock>
   15c00:	0005883a 	mov	r2,zero
   15c04:	dfc00417 	ldw	ra,16(sp)
   15c08:	dcc00317 	ldw	r19,12(sp)
   15c0c:	dc800217 	ldw	r18,8(sp)
   15c10:	dc400117 	ldw	r17,4(sp)
   15c14:	dc000017 	ldw	r16,0(sp)
   15c18:	dec00504 	addi	sp,sp,20
   15c1c:	f800283a 	ret
   15c20:	9009883a 	mov	r4,r18
   15c24:	00167d80 	call	167d8 <_sbrk_r>
   15c28:	844dc83a 	sub	r6,r16,r17
   15c2c:	00ffffc4 	movi	r3,-1
   15c30:	9009883a 	mov	r4,r18
   15c34:	000b883a 	mov	r5,zero
   15c38:	01c000b4 	movhi	r7,2
   15c3c:	39e82a04 	addi	r7,r7,-24408
   15c40:	31800054 	ori	r6,r6,1
   15c44:	10c00926 	beq	r2,r3,15c6c <_malloc_trim_r+0xe8>
   15c48:	38800017 	ldw	r2,0(r7)
   15c4c:	98c00217 	ldw	r3,8(r19)
   15c50:	9009883a 	mov	r4,r18
   15c54:	1445c83a 	sub	r2,r2,r17
   15c58:	38800015 	stw	r2,0(r7)
   15c5c:	19800115 	stw	r6,4(r3)
   15c60:	00175e80 	call	175e8 <__malloc_unlock>
   15c64:	00800044 	movi	r2,1
   15c68:	003fe606 	br	15c04 <_malloc_trim_r+0x80>
   15c6c:	00167d80 	call	167d8 <_sbrk_r>
   15c70:	99800217 	ldw	r6,8(r19)
   15c74:	100f883a 	mov	r7,r2
   15c78:	9009883a 	mov	r4,r18
   15c7c:	1187c83a 	sub	r3,r2,r6
   15c80:	008003c4 	movi	r2,15
   15c84:	19400054 	ori	r5,r3,1
   15c88:	10ffdc0e 	bge	r2,r3,15bfc <_malloc_trim_r+0x78>
   15c8c:	008000b4 	movhi	r2,2
   15c90:	10a65804 	addi	r2,r2,-26272
   15c94:	10c00017 	ldw	r3,0(r2)
   15c98:	008000b4 	movhi	r2,2
   15c9c:	10a82a04 	addi	r2,r2,-24408
   15ca0:	31400115 	stw	r5,4(r6)
   15ca4:	38c7c83a 	sub	r3,r7,r3
   15ca8:	10c00015 	stw	r3,0(r2)
   15cac:	003fd306 	br	15bfc <_malloc_trim_r+0x78>

00015cb0 <_free_r>:
   15cb0:	defffd04 	addi	sp,sp,-12
   15cb4:	dc400115 	stw	r17,4(sp)
   15cb8:	dc000015 	stw	r16,0(sp)
   15cbc:	dfc00215 	stw	ra,8(sp)
   15cc0:	2821883a 	mov	r16,r5
   15cc4:	2023883a 	mov	r17,r4
   15cc8:	28005a26 	beq	r5,zero,15e34 <_free_r+0x184>
   15ccc:	00175c80 	call	175c8 <__malloc_lock>
   15cd0:	823ffe04 	addi	r8,r16,-8
   15cd4:	41400117 	ldw	r5,4(r8)
   15cd8:	00bfff84 	movi	r2,-2
   15cdc:	028000b4 	movhi	r10,2
   15ce0:	52a4de04 	addi	r10,r10,-27784
   15ce4:	288e703a 	and	r7,r5,r2
   15ce8:	41cd883a 	add	r6,r8,r7
   15cec:	30c00117 	ldw	r3,4(r6)
   15cf0:	51000217 	ldw	r4,8(r10)
   15cf4:	00bfff04 	movi	r2,-4
   15cf8:	1892703a 	and	r9,r3,r2
   15cfc:	5017883a 	mov	r11,r10
   15d00:	31006726 	beq	r6,r4,15ea0 <_free_r+0x1f0>
   15d04:	2880004c 	andi	r2,r5,1
   15d08:	1005003a 	cmpeq	r2,r2,zero
   15d0c:	32400115 	stw	r9,4(r6)
   15d10:	10001a1e 	bne	r2,zero,15d7c <_free_r+0xcc>
   15d14:	000b883a 	mov	r5,zero
   15d18:	3247883a 	add	r3,r6,r9
   15d1c:	18800117 	ldw	r2,4(r3)
   15d20:	1080004c 	andi	r2,r2,1
   15d24:	1000231e 	bne	r2,zero,15db4 <_free_r+0x104>
   15d28:	280ac03a 	cmpne	r5,r5,zero
   15d2c:	3a4f883a 	add	r7,r7,r9
   15d30:	2800451e 	bne	r5,zero,15e48 <_free_r+0x198>
   15d34:	31000217 	ldw	r4,8(r6)
   15d38:	008000b4 	movhi	r2,2
   15d3c:	10a4e004 	addi	r2,r2,-27776
   15d40:	20807b26 	beq	r4,r2,15f30 <_free_r+0x280>
   15d44:	30800317 	ldw	r2,12(r6)
   15d48:	3a07883a 	add	r3,r7,r8
   15d4c:	19c00015 	stw	r7,0(r3)
   15d50:	11000215 	stw	r4,8(r2)
   15d54:	20800315 	stw	r2,12(r4)
   15d58:	38800054 	ori	r2,r7,1
   15d5c:	40800115 	stw	r2,4(r8)
   15d60:	28001a26 	beq	r5,zero,15dcc <_free_r+0x11c>
   15d64:	8809883a 	mov	r4,r17
   15d68:	dfc00217 	ldw	ra,8(sp)
   15d6c:	dc400117 	ldw	r17,4(sp)
   15d70:	dc000017 	ldw	r16,0(sp)
   15d74:	dec00304 	addi	sp,sp,12
   15d78:	00175e81 	jmpi	175e8 <__malloc_unlock>
   15d7c:	80bffe17 	ldw	r2,-8(r16)
   15d80:	50c00204 	addi	r3,r10,8
   15d84:	4091c83a 	sub	r8,r8,r2
   15d88:	41000217 	ldw	r4,8(r8)
   15d8c:	388f883a 	add	r7,r7,r2
   15d90:	20c06126 	beq	r4,r3,15f18 <_free_r+0x268>
   15d94:	40800317 	ldw	r2,12(r8)
   15d98:	3247883a 	add	r3,r6,r9
   15d9c:	000b883a 	mov	r5,zero
   15da0:	11000215 	stw	r4,8(r2)
   15da4:	20800315 	stw	r2,12(r4)
   15da8:	18800117 	ldw	r2,4(r3)
   15dac:	1080004c 	andi	r2,r2,1
   15db0:	103fdd26 	beq	r2,zero,15d28 <_free_r+0x78>
   15db4:	38800054 	ori	r2,r7,1
   15db8:	3a07883a 	add	r3,r7,r8
   15dbc:	280ac03a 	cmpne	r5,r5,zero
   15dc0:	40800115 	stw	r2,4(r8)
   15dc4:	19c00015 	stw	r7,0(r3)
   15dc8:	283fe61e 	bne	r5,zero,15d64 <_free_r+0xb4>
   15dcc:	00807fc4 	movi	r2,511
   15dd0:	11c01f2e 	bgeu	r2,r7,15e50 <_free_r+0x1a0>
   15dd4:	3806d27a 	srli	r3,r7,9
   15dd8:	1800481e 	bne	r3,zero,15efc <_free_r+0x24c>
   15ddc:	3804d0fa 	srli	r2,r7,3
   15de0:	100690fa 	slli	r3,r2,3
   15de4:	1acd883a 	add	r6,r3,r11
   15de8:	31400217 	ldw	r5,8(r6)
   15dec:	31405926 	beq	r6,r5,15f54 <_free_r+0x2a4>
   15df0:	28800117 	ldw	r2,4(r5)
   15df4:	00ffff04 	movi	r3,-4
   15df8:	10c4703a 	and	r2,r2,r3
   15dfc:	3880022e 	bgeu	r7,r2,15e08 <_free_r+0x158>
   15e00:	29400217 	ldw	r5,8(r5)
   15e04:	317ffa1e 	bne	r6,r5,15df0 <_free_r+0x140>
   15e08:	29800317 	ldw	r6,12(r5)
   15e0c:	41800315 	stw	r6,12(r8)
   15e10:	41400215 	stw	r5,8(r8)
   15e14:	8809883a 	mov	r4,r17
   15e18:	2a000315 	stw	r8,12(r5)
   15e1c:	32000215 	stw	r8,8(r6)
   15e20:	dfc00217 	ldw	ra,8(sp)
   15e24:	dc400117 	ldw	r17,4(sp)
   15e28:	dc000017 	ldw	r16,0(sp)
   15e2c:	dec00304 	addi	sp,sp,12
   15e30:	00175e81 	jmpi	175e8 <__malloc_unlock>
   15e34:	dfc00217 	ldw	ra,8(sp)
   15e38:	dc400117 	ldw	r17,4(sp)
   15e3c:	dc000017 	ldw	r16,0(sp)
   15e40:	dec00304 	addi	sp,sp,12
   15e44:	f800283a 	ret
   15e48:	31000217 	ldw	r4,8(r6)
   15e4c:	003fbd06 	br	15d44 <_free_r+0x94>
   15e50:	3806d0fa 	srli	r3,r7,3
   15e54:	00800044 	movi	r2,1
   15e58:	51400117 	ldw	r5,4(r10)
   15e5c:	180890fa 	slli	r4,r3,3
   15e60:	1807d0ba 	srai	r3,r3,2
   15e64:	22c9883a 	add	r4,r4,r11
   15e68:	21800217 	ldw	r6,8(r4)
   15e6c:	10c4983a 	sll	r2,r2,r3
   15e70:	41000315 	stw	r4,12(r8)
   15e74:	41800215 	stw	r6,8(r8)
   15e78:	288ab03a 	or	r5,r5,r2
   15e7c:	22000215 	stw	r8,8(r4)
   15e80:	8809883a 	mov	r4,r17
   15e84:	51400115 	stw	r5,4(r10)
   15e88:	32000315 	stw	r8,12(r6)
   15e8c:	dfc00217 	ldw	ra,8(sp)
   15e90:	dc400117 	ldw	r17,4(sp)
   15e94:	dc000017 	ldw	r16,0(sp)
   15e98:	dec00304 	addi	sp,sp,12
   15e9c:	00175e81 	jmpi	175e8 <__malloc_unlock>
   15ea0:	2880004c 	andi	r2,r5,1
   15ea4:	3a4d883a 	add	r6,r7,r9
   15ea8:	1000071e 	bne	r2,zero,15ec8 <_free_r+0x218>
   15eac:	80bffe17 	ldw	r2,-8(r16)
   15eb0:	4091c83a 	sub	r8,r8,r2
   15eb4:	41000317 	ldw	r4,12(r8)
   15eb8:	40c00217 	ldw	r3,8(r8)
   15ebc:	308d883a 	add	r6,r6,r2
   15ec0:	20c00215 	stw	r3,8(r4)
   15ec4:	19000315 	stw	r4,12(r3)
   15ec8:	008000b4 	movhi	r2,2
   15ecc:	10a65704 	addi	r2,r2,-26276
   15ed0:	11000017 	ldw	r4,0(r2)
   15ed4:	30c00054 	ori	r3,r6,1
   15ed8:	52000215 	stw	r8,8(r10)
   15edc:	40c00115 	stw	r3,4(r8)
   15ee0:	313fa036 	bltu	r6,r4,15d64 <_free_r+0xb4>
   15ee4:	008000b4 	movhi	r2,2
   15ee8:	10a82104 	addi	r2,r2,-24444
   15eec:	11400017 	ldw	r5,0(r2)
   15ef0:	8809883a 	mov	r4,r17
   15ef4:	0015b840 	call	15b84 <_malloc_trim_r>
   15ef8:	003f9a06 	br	15d64 <_free_r+0xb4>
   15efc:	00800104 	movi	r2,4
   15f00:	10c0072e 	bgeu	r2,r3,15f20 <_free_r+0x270>
   15f04:	00800504 	movi	r2,20
   15f08:	10c01936 	bltu	r2,r3,15f70 <_free_r+0x2c0>
   15f0c:	188016c4 	addi	r2,r3,91
   15f10:	100690fa 	slli	r3,r2,3
   15f14:	003fb306 	br	15de4 <_free_r+0x134>
   15f18:	01400044 	movi	r5,1
   15f1c:	003f7e06 	br	15d18 <_free_r+0x68>
   15f20:	3804d1ba 	srli	r2,r7,6
   15f24:	10800e04 	addi	r2,r2,56
   15f28:	100690fa 	slli	r3,r2,3
   15f2c:	003fad06 	br	15de4 <_free_r+0x134>
   15f30:	22000315 	stw	r8,12(r4)
   15f34:	22000215 	stw	r8,8(r4)
   15f38:	3a05883a 	add	r2,r7,r8
   15f3c:	38c00054 	ori	r3,r7,1
   15f40:	11c00015 	stw	r7,0(r2)
   15f44:	41000215 	stw	r4,8(r8)
   15f48:	40c00115 	stw	r3,4(r8)
   15f4c:	41000315 	stw	r4,12(r8)
   15f50:	003f8406 	br	15d64 <_free_r+0xb4>
   15f54:	1005d0ba 	srai	r2,r2,2
   15f58:	00c00044 	movi	r3,1
   15f5c:	51000117 	ldw	r4,4(r10)
   15f60:	1886983a 	sll	r3,r3,r2
   15f64:	20c8b03a 	or	r4,r4,r3
   15f68:	51000115 	stw	r4,4(r10)
   15f6c:	003fa706 	br	15e0c <_free_r+0x15c>
   15f70:	00801504 	movi	r2,84
   15f74:	10c00436 	bltu	r2,r3,15f88 <_free_r+0x2d8>
   15f78:	3804d33a 	srli	r2,r7,12
   15f7c:	10801b84 	addi	r2,r2,110
   15f80:	100690fa 	slli	r3,r2,3
   15f84:	003f9706 	br	15de4 <_free_r+0x134>
   15f88:	00805504 	movi	r2,340
   15f8c:	10c00436 	bltu	r2,r3,15fa0 <_free_r+0x2f0>
   15f90:	3804d3fa 	srli	r2,r7,15
   15f94:	10801dc4 	addi	r2,r2,119
   15f98:	100690fa 	slli	r3,r2,3
   15f9c:	003f9106 	br	15de4 <_free_r+0x134>
   15fa0:	00815504 	movi	r2,1364
   15fa4:	10c0032e 	bgeu	r2,r3,15fb4 <_free_r+0x304>
   15fa8:	00801f84 	movi	r2,126
   15fac:	00c0fc04 	movi	r3,1008
   15fb0:	003f8c06 	br	15de4 <_free_r+0x134>
   15fb4:	3804d4ba 	srli	r2,r7,18
   15fb8:	10801f04 	addi	r2,r2,124
   15fbc:	100690fa 	slli	r3,r2,3
   15fc0:	003f8806 	br	15de4 <_free_r+0x134>

00015fc4 <free>:
   15fc4:	008000b4 	movhi	r2,2
   15fc8:	10a65504 	addi	r2,r2,-26284
   15fcc:	200b883a 	mov	r5,r4
   15fd0:	11000017 	ldw	r4,0(r2)
   15fd4:	0015cb01 	jmpi	15cb0 <_free_r>

00015fd8 <malloc>:
   15fd8:	008000b4 	movhi	r2,2
   15fdc:	10a65504 	addi	r2,r2,-26284
   15fe0:	200b883a 	mov	r5,r4
   15fe4:	11000017 	ldw	r4,0(r2)
   15fe8:	0015fec1 	jmpi	15fec <_malloc_r>

00015fec <_malloc_r>:
   15fec:	defff604 	addi	sp,sp,-40
   15ff0:	28c002c4 	addi	r3,r5,11
   15ff4:	00800584 	movi	r2,22
   15ff8:	dc800215 	stw	r18,8(sp)
   15ffc:	dfc00915 	stw	ra,36(sp)
   16000:	df000815 	stw	fp,32(sp)
   16004:	ddc00715 	stw	r23,28(sp)
   16008:	dd800615 	stw	r22,24(sp)
   1600c:	dd400515 	stw	r21,20(sp)
   16010:	dd000415 	stw	r20,16(sp)
   16014:	dcc00315 	stw	r19,12(sp)
   16018:	dc400115 	stw	r17,4(sp)
   1601c:	dc000015 	stw	r16,0(sp)
   16020:	2025883a 	mov	r18,r4
   16024:	10c01236 	bltu	r2,r3,16070 <_malloc_r+0x84>
   16028:	04400404 	movi	r17,16
   1602c:	8940142e 	bgeu	r17,r5,16080 <_malloc_r+0x94>
   16030:	00800304 	movi	r2,12
   16034:	0007883a 	mov	r3,zero
   16038:	90800015 	stw	r2,0(r18)
   1603c:	1805883a 	mov	r2,r3
   16040:	dfc00917 	ldw	ra,36(sp)
   16044:	df000817 	ldw	fp,32(sp)
   16048:	ddc00717 	ldw	r23,28(sp)
   1604c:	dd800617 	ldw	r22,24(sp)
   16050:	dd400517 	ldw	r21,20(sp)
   16054:	dd000417 	ldw	r20,16(sp)
   16058:	dcc00317 	ldw	r19,12(sp)
   1605c:	dc800217 	ldw	r18,8(sp)
   16060:	dc400117 	ldw	r17,4(sp)
   16064:	dc000017 	ldw	r16,0(sp)
   16068:	dec00a04 	addi	sp,sp,40
   1606c:	f800283a 	ret
   16070:	00bffe04 	movi	r2,-8
   16074:	18a2703a 	and	r17,r3,r2
   16078:	883fed16 	blt	r17,zero,16030 <_malloc_r+0x44>
   1607c:	897fec36 	bltu	r17,r5,16030 <_malloc_r+0x44>
   16080:	9009883a 	mov	r4,r18
   16084:	00175c80 	call	175c8 <__malloc_lock>
   16088:	00807dc4 	movi	r2,503
   1608c:	14402b2e 	bgeu	r2,r17,1613c <_malloc_r+0x150>
   16090:	8806d27a 	srli	r3,r17,9
   16094:	18003f1e 	bne	r3,zero,16194 <_malloc_r+0x1a8>
   16098:	880cd0fa 	srli	r6,r17,3
   1609c:	300490fa 	slli	r2,r6,3
   160a0:	02c000b4 	movhi	r11,2
   160a4:	5ae4de04 	addi	r11,r11,-27784
   160a8:	12cb883a 	add	r5,r2,r11
   160ac:	2c000317 	ldw	r16,12(r5)
   160b0:	580f883a 	mov	r7,r11
   160b4:	2c00041e 	bne	r5,r16,160c8 <_malloc_r+0xdc>
   160b8:	00000a06 	br	160e4 <_malloc_r+0xf8>
   160bc:	1800860e 	bge	r3,zero,162d8 <_malloc_r+0x2ec>
   160c0:	84000317 	ldw	r16,12(r16)
   160c4:	2c000726 	beq	r5,r16,160e4 <_malloc_r+0xf8>
   160c8:	80800117 	ldw	r2,4(r16)
   160cc:	00ffff04 	movi	r3,-4
   160d0:	10c8703a 	and	r4,r2,r3
   160d4:	2447c83a 	sub	r3,r4,r17
   160d8:	008003c4 	movi	r2,15
   160dc:	10fff70e 	bge	r2,r3,160bc <_malloc_r+0xd0>
   160e0:	31bfffc4 	addi	r6,r6,-1
   160e4:	32400044 	addi	r9,r6,1
   160e8:	028000b4 	movhi	r10,2
   160ec:	52a4e004 	addi	r10,r10,-27776
   160f0:	54000217 	ldw	r16,8(r10)
   160f4:	8280a026 	beq	r16,r10,16378 <_malloc_r+0x38c>
   160f8:	80800117 	ldw	r2,4(r16)
   160fc:	00ffff04 	movi	r3,-4
   16100:	10ca703a 	and	r5,r2,r3
   16104:	2c4dc83a 	sub	r6,r5,r17
   16108:	008003c4 	movi	r2,15
   1610c:	11808316 	blt	r2,r6,1631c <_malloc_r+0x330>
   16110:	52800315 	stw	r10,12(r10)
   16114:	52800215 	stw	r10,8(r10)
   16118:	30002916 	blt	r6,zero,161c0 <_malloc_r+0x1d4>
   1611c:	8147883a 	add	r3,r16,r5
   16120:	18800117 	ldw	r2,4(r3)
   16124:	9009883a 	mov	r4,r18
   16128:	10800054 	ori	r2,r2,1
   1612c:	18800115 	stw	r2,4(r3)
   16130:	00175e80 	call	175e8 <__malloc_unlock>
   16134:	80c00204 	addi	r3,r16,8
   16138:	003fc006 	br	1603c <_malloc_r+0x50>
   1613c:	02c000b4 	movhi	r11,2
   16140:	5ae4de04 	addi	r11,r11,-27784
   16144:	8ac5883a 	add	r2,r17,r11
   16148:	14000317 	ldw	r16,12(r2)
   1614c:	580f883a 	mov	r7,r11
   16150:	8806d0fa 	srli	r3,r17,3
   16154:	14006c26 	beq	r2,r16,16308 <_malloc_r+0x31c>
   16158:	80c00117 	ldw	r3,4(r16)
   1615c:	00bfff04 	movi	r2,-4
   16160:	81800317 	ldw	r6,12(r16)
   16164:	1886703a 	and	r3,r3,r2
   16168:	80c7883a 	add	r3,r16,r3
   1616c:	18800117 	ldw	r2,4(r3)
   16170:	81400217 	ldw	r5,8(r16)
   16174:	9009883a 	mov	r4,r18
   16178:	10800054 	ori	r2,r2,1
   1617c:	18800115 	stw	r2,4(r3)
   16180:	31400215 	stw	r5,8(r6)
   16184:	29800315 	stw	r6,12(r5)
   16188:	00175e80 	call	175e8 <__malloc_unlock>
   1618c:	80c00204 	addi	r3,r16,8
   16190:	003faa06 	br	1603c <_malloc_r+0x50>
   16194:	00800104 	movi	r2,4
   16198:	10c0052e 	bgeu	r2,r3,161b0 <_malloc_r+0x1c4>
   1619c:	00800504 	movi	r2,20
   161a0:	10c07836 	bltu	r2,r3,16384 <_malloc_r+0x398>
   161a4:	198016c4 	addi	r6,r3,91
   161a8:	300490fa 	slli	r2,r6,3
   161ac:	003fbc06 	br	160a0 <_malloc_r+0xb4>
   161b0:	8804d1ba 	srli	r2,r17,6
   161b4:	11800e04 	addi	r6,r2,56
   161b8:	300490fa 	slli	r2,r6,3
   161bc:	003fb806 	br	160a0 <_malloc_r+0xb4>
   161c0:	00807fc4 	movi	r2,511
   161c4:	1140bb36 	bltu	r2,r5,164b4 <_malloc_r+0x4c8>
   161c8:	2806d0fa 	srli	r3,r5,3
   161cc:	573ffe04 	addi	fp,r10,-8
   161d0:	00800044 	movi	r2,1
   161d4:	180890fa 	slli	r4,r3,3
   161d8:	1807d0ba 	srai	r3,r3,2
   161dc:	e1c00117 	ldw	r7,4(fp)
   161e0:	5909883a 	add	r4,r11,r4
   161e4:	21400217 	ldw	r5,8(r4)
   161e8:	10c4983a 	sll	r2,r2,r3
   161ec:	81000315 	stw	r4,12(r16)
   161f0:	81400215 	stw	r5,8(r16)
   161f4:	388eb03a 	or	r7,r7,r2
   161f8:	2c000315 	stw	r16,12(r5)
   161fc:	24000215 	stw	r16,8(r4)
   16200:	e1c00115 	stw	r7,4(fp)
   16204:	4807883a 	mov	r3,r9
   16208:	4800cd16 	blt	r9,zero,16540 <_malloc_r+0x554>
   1620c:	1807d0ba 	srai	r3,r3,2
   16210:	00800044 	movi	r2,1
   16214:	10c8983a 	sll	r4,r2,r3
   16218:	39004436 	bltu	r7,r4,1632c <_malloc_r+0x340>
   1621c:	21c4703a 	and	r2,r4,r7
   16220:	10000a1e 	bne	r2,zero,1624c <_malloc_r+0x260>
   16224:	2109883a 	add	r4,r4,r4
   16228:	00bfff04 	movi	r2,-4
   1622c:	4884703a 	and	r2,r9,r2
   16230:	3906703a 	and	r3,r7,r4
   16234:	12400104 	addi	r9,r2,4
   16238:	1800041e 	bne	r3,zero,1624c <_malloc_r+0x260>
   1623c:	2109883a 	add	r4,r4,r4
   16240:	3904703a 	and	r2,r7,r4
   16244:	4a400104 	addi	r9,r9,4
   16248:	103ffc26 	beq	r2,zero,1623c <_malloc_r+0x250>
   1624c:	480490fa 	slli	r2,r9,3
   16250:	4819883a 	mov	r12,r9
   16254:	023fff04 	movi	r8,-4
   16258:	589b883a 	add	r13,r11,r2
   1625c:	6807883a 	mov	r3,r13
   16260:	014003c4 	movi	r5,15
   16264:	1c000317 	ldw	r16,12(r3)
   16268:	1c00041e 	bne	r3,r16,1627c <_malloc_r+0x290>
   1626c:	0000a706 	br	1650c <_malloc_r+0x520>
   16270:	3000ab0e 	bge	r6,zero,16520 <_malloc_r+0x534>
   16274:	84000317 	ldw	r16,12(r16)
   16278:	1c00a426 	beq	r3,r16,1650c <_malloc_r+0x520>
   1627c:	80800117 	ldw	r2,4(r16)
   16280:	1204703a 	and	r2,r2,r8
   16284:	144dc83a 	sub	r6,r2,r17
   16288:	29bff90e 	bge	r5,r6,16270 <_malloc_r+0x284>
   1628c:	81000317 	ldw	r4,12(r16)
   16290:	80c00217 	ldw	r3,8(r16)
   16294:	89400054 	ori	r5,r17,1
   16298:	8445883a 	add	r2,r16,r17
   1629c:	20c00215 	stw	r3,8(r4)
   162a0:	19000315 	stw	r4,12(r3)
   162a4:	81400115 	stw	r5,4(r16)
   162a8:	1187883a 	add	r3,r2,r6
   162ac:	31000054 	ori	r4,r6,1
   162b0:	50800315 	stw	r2,12(r10)
   162b4:	50800215 	stw	r2,8(r10)
   162b8:	19800015 	stw	r6,0(r3)
   162bc:	11000115 	stw	r4,4(r2)
   162c0:	12800215 	stw	r10,8(r2)
   162c4:	12800315 	stw	r10,12(r2)
   162c8:	9009883a 	mov	r4,r18
   162cc:	00175e80 	call	175e8 <__malloc_unlock>
   162d0:	80c00204 	addi	r3,r16,8
   162d4:	003f5906 	br	1603c <_malloc_r+0x50>
   162d8:	8109883a 	add	r4,r16,r4
   162dc:	20800117 	ldw	r2,4(r4)
   162e0:	80c00217 	ldw	r3,8(r16)
   162e4:	81400317 	ldw	r5,12(r16)
   162e8:	10800054 	ori	r2,r2,1
   162ec:	20800115 	stw	r2,4(r4)
   162f0:	28c00215 	stw	r3,8(r5)
   162f4:	19400315 	stw	r5,12(r3)
   162f8:	9009883a 	mov	r4,r18
   162fc:	00175e80 	call	175e8 <__malloc_unlock>
   16300:	80c00204 	addi	r3,r16,8
   16304:	003f4d06 	br	1603c <_malloc_r+0x50>
   16308:	80800204 	addi	r2,r16,8
   1630c:	14000317 	ldw	r16,12(r2)
   16310:	143f911e 	bne	r2,r16,16158 <_malloc_r+0x16c>
   16314:	1a400084 	addi	r9,r3,2
   16318:	003f7306 	br	160e8 <_malloc_r+0xfc>
   1631c:	88c00054 	ori	r3,r17,1
   16320:	8445883a 	add	r2,r16,r17
   16324:	80c00115 	stw	r3,4(r16)
   16328:	003fdf06 	br	162a8 <_malloc_r+0x2bc>
   1632c:	e4000217 	ldw	r16,8(fp)
   16330:	00bfff04 	movi	r2,-4
   16334:	80c00117 	ldw	r3,4(r16)
   16338:	802d883a 	mov	r22,r16
   1633c:	18aa703a 	and	r21,r3,r2
   16340:	ac401636 	bltu	r21,r17,1639c <_malloc_r+0x3b0>
   16344:	ac49c83a 	sub	r4,r21,r17
   16348:	008003c4 	movi	r2,15
   1634c:	1100130e 	bge	r2,r4,1639c <_malloc_r+0x3b0>
   16350:	88800054 	ori	r2,r17,1
   16354:	8447883a 	add	r3,r16,r17
   16358:	80800115 	stw	r2,4(r16)
   1635c:	20800054 	ori	r2,r4,1
   16360:	18800115 	stw	r2,4(r3)
   16364:	e0c00215 	stw	r3,8(fp)
   16368:	9009883a 	mov	r4,r18
   1636c:	00175e80 	call	175e8 <__malloc_unlock>
   16370:	80c00204 	addi	r3,r16,8
   16374:	003f3106 	br	1603c <_malloc_r+0x50>
   16378:	39c00117 	ldw	r7,4(r7)
   1637c:	573ffe04 	addi	fp,r10,-8
   16380:	003fa006 	br	16204 <_malloc_r+0x218>
   16384:	00801504 	movi	r2,84
   16388:	10c06736 	bltu	r2,r3,16528 <_malloc_r+0x53c>
   1638c:	8804d33a 	srli	r2,r17,12
   16390:	11801b84 	addi	r6,r2,110
   16394:	300490fa 	slli	r2,r6,3
   16398:	003f4106 	br	160a0 <_malloc_r+0xb4>
   1639c:	d0a1cc17 	ldw	r2,-30928(gp)
   163a0:	d0e00317 	ldw	r3,-32756(gp)
   163a4:	053fffc4 	movi	r20,-1
   163a8:	10800404 	addi	r2,r2,16
   163ac:	88a7883a 	add	r19,r17,r2
   163b0:	1d000326 	beq	r3,r20,163c0 <_malloc_r+0x3d4>
   163b4:	98c01fc4 	addi	r3,r19,127
   163b8:	00bfe004 	movi	r2,-128
   163bc:	18a6703a 	and	r19,r3,r2
   163c0:	9009883a 	mov	r4,r18
   163c4:	980b883a 	mov	r5,r19
   163c8:	00167d80 	call	167d8 <_sbrk_r>
   163cc:	1009883a 	mov	r4,r2
   163d0:	15000426 	beq	r2,r20,163e4 <_malloc_r+0x3f8>
   163d4:	854b883a 	add	r5,r16,r21
   163d8:	1029883a 	mov	r20,r2
   163dc:	11405a2e 	bgeu	r2,r5,16548 <_malloc_r+0x55c>
   163e0:	87000c26 	beq	r16,fp,16414 <_malloc_r+0x428>
   163e4:	e4000217 	ldw	r16,8(fp)
   163e8:	80c00117 	ldw	r3,4(r16)
   163ec:	00bfff04 	movi	r2,-4
   163f0:	1884703a 	and	r2,r3,r2
   163f4:	14400336 	bltu	r2,r17,16404 <_malloc_r+0x418>
   163f8:	1449c83a 	sub	r4,r2,r17
   163fc:	008003c4 	movi	r2,15
   16400:	113fd316 	blt	r2,r4,16350 <_malloc_r+0x364>
   16404:	9009883a 	mov	r4,r18
   16408:	00175e80 	call	175e8 <__malloc_unlock>
   1640c:	0007883a 	mov	r3,zero
   16410:	003f0a06 	br	1603c <_malloc_r+0x50>
   16414:	05c000b4 	movhi	r23,2
   16418:	bde82a04 	addi	r23,r23,-24408
   1641c:	b8800017 	ldw	r2,0(r23)
   16420:	988d883a 	add	r6,r19,r2
   16424:	b9800015 	stw	r6,0(r23)
   16428:	d0e00317 	ldw	r3,-32756(gp)
   1642c:	00bfffc4 	movi	r2,-1
   16430:	18808e26 	beq	r3,r2,1666c <_malloc_r+0x680>
   16434:	2145c83a 	sub	r2,r4,r5
   16438:	3085883a 	add	r2,r6,r2
   1643c:	b8800015 	stw	r2,0(r23)
   16440:	20c001cc 	andi	r3,r4,7
   16444:	18005f1e 	bne	r3,zero,165c4 <_malloc_r+0x5d8>
   16448:	000b883a 	mov	r5,zero
   1644c:	a4c5883a 	add	r2,r20,r19
   16450:	10801fcc 	andi	r2,r2,127
   16454:	00c02004 	movi	r3,128
   16458:	1887c83a 	sub	r3,r3,r2
   1645c:	28e7883a 	add	r19,r5,r3
   16460:	9009883a 	mov	r4,r18
   16464:	980b883a 	mov	r5,r19
   16468:	00167d80 	call	167d8 <_sbrk_r>
   1646c:	1007883a 	mov	r3,r2
   16470:	00bfffc4 	movi	r2,-1
   16474:	18807a26 	beq	r3,r2,16660 <_malloc_r+0x674>
   16478:	1d05c83a 	sub	r2,r3,r20
   1647c:	9885883a 	add	r2,r19,r2
   16480:	10c00054 	ori	r3,r2,1
   16484:	b8800017 	ldw	r2,0(r23)
   16488:	a021883a 	mov	r16,r20
   1648c:	a0c00115 	stw	r3,4(r20)
   16490:	9885883a 	add	r2,r19,r2
   16494:	b8800015 	stw	r2,0(r23)
   16498:	e5000215 	stw	r20,8(fp)
   1649c:	b7003626 	beq	r22,fp,16578 <_malloc_r+0x58c>
   164a0:	018003c4 	movi	r6,15
   164a4:	35404b36 	bltu	r6,r21,165d4 <_malloc_r+0x5e8>
   164a8:	00800044 	movi	r2,1
   164ac:	a0800115 	stw	r2,4(r20)
   164b0:	003fcd06 	br	163e8 <_malloc_r+0x3fc>
   164b4:	2808d27a 	srli	r4,r5,9
   164b8:	2000371e 	bne	r4,zero,16598 <_malloc_r+0x5ac>
   164bc:	2808d0fa 	srli	r4,r5,3
   164c0:	200690fa 	slli	r3,r4,3
   164c4:	58d1883a 	add	r8,r11,r3
   164c8:	41800217 	ldw	r6,8(r8)
   164cc:	41805b26 	beq	r8,r6,1663c <_malloc_r+0x650>
   164d0:	30800117 	ldw	r2,4(r6)
   164d4:	00ffff04 	movi	r3,-4
   164d8:	10c4703a 	and	r2,r2,r3
   164dc:	2880022e 	bgeu	r5,r2,164e8 <_malloc_r+0x4fc>
   164e0:	31800217 	ldw	r6,8(r6)
   164e4:	41bffa1e 	bne	r8,r6,164d0 <_malloc_r+0x4e4>
   164e8:	32000317 	ldw	r8,12(r6)
   164ec:	39c00117 	ldw	r7,4(r7)
   164f0:	82000315 	stw	r8,12(r16)
   164f4:	81800215 	stw	r6,8(r16)
   164f8:	070000b4 	movhi	fp,2
   164fc:	e724de04 	addi	fp,fp,-27784
   16500:	34000315 	stw	r16,12(r6)
   16504:	44000215 	stw	r16,8(r8)
   16508:	003f3e06 	br	16204 <_malloc_r+0x218>
   1650c:	63000044 	addi	r12,r12,1
   16510:	608000cc 	andi	r2,r12,3
   16514:	10005d26 	beq	r2,zero,1668c <_malloc_r+0x6a0>
   16518:	18c00204 	addi	r3,r3,8
   1651c:	003f5106 	br	16264 <_malloc_r+0x278>
   16520:	8089883a 	add	r4,r16,r2
   16524:	003f6d06 	br	162dc <_malloc_r+0x2f0>
   16528:	00805504 	movi	r2,340
   1652c:	10c02036 	bltu	r2,r3,165b0 <_malloc_r+0x5c4>
   16530:	8804d3fa 	srli	r2,r17,15
   16534:	11801dc4 	addi	r6,r2,119
   16538:	300490fa 	slli	r2,r6,3
   1653c:	003ed806 	br	160a0 <_malloc_r+0xb4>
   16540:	48c000c4 	addi	r3,r9,3
   16544:	003f3106 	br	1620c <_malloc_r+0x220>
   16548:	05c000b4 	movhi	r23,2
   1654c:	bde82a04 	addi	r23,r23,-24408
   16550:	b8800017 	ldw	r2,0(r23)
   16554:	988d883a 	add	r6,r19,r2
   16558:	b9800015 	stw	r6,0(r23)
   1655c:	293fb21e 	bne	r5,r4,16428 <_malloc_r+0x43c>
   16560:	20801fcc 	andi	r2,r4,127
   16564:	103fb01e 	bne	r2,zero,16428 <_malloc_r+0x43c>
   16568:	e4000217 	ldw	r16,8(fp)
   1656c:	9d45883a 	add	r2,r19,r21
   16570:	10800054 	ori	r2,r2,1
   16574:	80800115 	stw	r2,4(r16)
   16578:	b8c00017 	ldw	r3,0(r23)
   1657c:	d0a1cd17 	ldw	r2,-30924(gp)
   16580:	10c0012e 	bgeu	r2,r3,16588 <_malloc_r+0x59c>
   16584:	d0e1cd15 	stw	r3,-30924(gp)
   16588:	d0a1ce17 	ldw	r2,-30920(gp)
   1658c:	10ff962e 	bgeu	r2,r3,163e8 <_malloc_r+0x3fc>
   16590:	d0e1ce15 	stw	r3,-30920(gp)
   16594:	003f9406 	br	163e8 <_malloc_r+0x3fc>
   16598:	00800104 	movi	r2,4
   1659c:	11001e36 	bltu	r2,r4,16618 <_malloc_r+0x62c>
   165a0:	2804d1ba 	srli	r2,r5,6
   165a4:	11000e04 	addi	r4,r2,56
   165a8:	200690fa 	slli	r3,r4,3
   165ac:	003fc506 	br	164c4 <_malloc_r+0x4d8>
   165b0:	00815504 	movi	r2,1364
   165b4:	10c01d2e 	bgeu	r2,r3,1662c <_malloc_r+0x640>
   165b8:	01801f84 	movi	r6,126
   165bc:	0080fc04 	movi	r2,1008
   165c0:	003eb706 	br	160a0 <_malloc_r+0xb4>
   165c4:	00800204 	movi	r2,8
   165c8:	10cbc83a 	sub	r5,r2,r3
   165cc:	2169883a 	add	r20,r4,r5
   165d0:	003f9e06 	br	1644c <_malloc_r+0x460>
   165d4:	00bffe04 	movi	r2,-8
   165d8:	a93ffd04 	addi	r4,r21,-12
   165dc:	2088703a 	and	r4,r4,r2
   165e0:	b10b883a 	add	r5,r22,r4
   165e4:	00c00144 	movi	r3,5
   165e8:	28c00215 	stw	r3,8(r5)
   165ec:	28c00115 	stw	r3,4(r5)
   165f0:	b0800117 	ldw	r2,4(r22)
   165f4:	1080004c 	andi	r2,r2,1
   165f8:	2084b03a 	or	r2,r4,r2
   165fc:	b0800115 	stw	r2,4(r22)
   16600:	313fdd2e 	bgeu	r6,r4,16578 <_malloc_r+0x58c>
   16604:	b1400204 	addi	r5,r22,8
   16608:	9009883a 	mov	r4,r18
   1660c:	0015cb00 	call	15cb0 <_free_r>
   16610:	e4000217 	ldw	r16,8(fp)
   16614:	003fd806 	br	16578 <_malloc_r+0x58c>
   16618:	00800504 	movi	r2,20
   1661c:	11001536 	bltu	r2,r4,16674 <_malloc_r+0x688>
   16620:	210016c4 	addi	r4,r4,91
   16624:	200690fa 	slli	r3,r4,3
   16628:	003fa606 	br	164c4 <_malloc_r+0x4d8>
   1662c:	8804d4ba 	srli	r2,r17,18
   16630:	11801f04 	addi	r6,r2,124
   16634:	300490fa 	slli	r2,r6,3
   16638:	003e9906 	br	160a0 <_malloc_r+0xb4>
   1663c:	2009d0ba 	srai	r4,r4,2
   16640:	014000b4 	movhi	r5,2
   16644:	2964de04 	addi	r5,r5,-27784
   16648:	00c00044 	movi	r3,1
   1664c:	28800117 	ldw	r2,4(r5)
   16650:	1906983a 	sll	r3,r3,r4
   16654:	10c4b03a 	or	r2,r2,r3
   16658:	28800115 	stw	r2,4(r5)
   1665c:	003fa306 	br	164ec <_malloc_r+0x500>
   16660:	0027883a 	mov	r19,zero
   16664:	00c00044 	movi	r3,1
   16668:	003f8606 	br	16484 <_malloc_r+0x498>
   1666c:	d1200315 	stw	r4,-32756(gp)
   16670:	003f7306 	br	16440 <_malloc_r+0x454>
   16674:	00801504 	movi	r2,84
   16678:	11001936 	bltu	r2,r4,166e0 <_malloc_r+0x6f4>
   1667c:	2804d33a 	srli	r2,r5,12
   16680:	11001b84 	addi	r4,r2,110
   16684:	200690fa 	slli	r3,r4,3
   16688:	003f8e06 	br	164c4 <_malloc_r+0x4d8>
   1668c:	480b883a 	mov	r5,r9
   16690:	6807883a 	mov	r3,r13
   16694:	288000cc 	andi	r2,r5,3
   16698:	18fffe04 	addi	r3,r3,-8
   1669c:	297fffc4 	addi	r5,r5,-1
   166a0:	10001526 	beq	r2,zero,166f8 <_malloc_r+0x70c>
   166a4:	18800217 	ldw	r2,8(r3)
   166a8:	10fffa26 	beq	r2,r3,16694 <_malloc_r+0x6a8>
   166ac:	2109883a 	add	r4,r4,r4
   166b0:	393f1e36 	bltu	r7,r4,1632c <_malloc_r+0x340>
   166b4:	203f1d26 	beq	r4,zero,1632c <_malloc_r+0x340>
   166b8:	21c4703a 	and	r2,r4,r7
   166bc:	10000226 	beq	r2,zero,166c8 <_malloc_r+0x6dc>
   166c0:	6013883a 	mov	r9,r12
   166c4:	003ee106 	br	1624c <_malloc_r+0x260>
   166c8:	2109883a 	add	r4,r4,r4
   166cc:	3904703a 	and	r2,r7,r4
   166d0:	63000104 	addi	r12,r12,4
   166d4:	103ffc26 	beq	r2,zero,166c8 <_malloc_r+0x6dc>
   166d8:	6013883a 	mov	r9,r12
   166dc:	003edb06 	br	1624c <_malloc_r+0x260>
   166e0:	00805504 	movi	r2,340
   166e4:	11000836 	bltu	r2,r4,16708 <_malloc_r+0x71c>
   166e8:	2804d3fa 	srli	r2,r5,15
   166ec:	11001dc4 	addi	r4,r2,119
   166f0:	200690fa 	slli	r3,r4,3
   166f4:	003f7306 	br	164c4 <_malloc_r+0x4d8>
   166f8:	0104303a 	nor	r2,zero,r4
   166fc:	388e703a 	and	r7,r7,r2
   16700:	e1c00115 	stw	r7,4(fp)
   16704:	003fe906 	br	166ac <_malloc_r+0x6c0>
   16708:	00815504 	movi	r2,1364
   1670c:	1100032e 	bgeu	r2,r4,1671c <_malloc_r+0x730>
   16710:	01001f84 	movi	r4,126
   16714:	00c0fc04 	movi	r3,1008
   16718:	003f6a06 	br	164c4 <_malloc_r+0x4d8>
   1671c:	2804d4ba 	srli	r2,r5,18
   16720:	11001f04 	addi	r4,r2,124
   16724:	200690fa 	slli	r3,r4,3
   16728:	003f6606 	br	164c4 <_malloc_r+0x4d8>

0001672c <memcpy>:
   1672c:	2011883a 	mov	r8,r4
   16730:	30000726 	beq	r6,zero,16750 <memcpy+0x24>
   16734:	000f883a 	mov	r7,zero
   16738:	29c5883a 	add	r2,r5,r7
   1673c:	11000003 	ldbu	r4,0(r2)
   16740:	41c7883a 	add	r3,r8,r7
   16744:	39c00044 	addi	r7,r7,1
   16748:	19000005 	stb	r4,0(r3)
   1674c:	39bffa1e 	bne	r7,r6,16738 <memcpy+0xc>
   16750:	4005883a 	mov	r2,r8
   16754:	f800283a 	ret

00016758 <memmove>:
   16758:	2011883a 	mov	r8,r4
   1675c:	2900022e 	bgeu	r5,r4,16768 <memmove+0x10>
   16760:	2989883a 	add	r4,r5,r6
   16764:	41000a36 	bltu	r8,r4,16790 <memmove+0x38>
   16768:	30000726 	beq	r6,zero,16788 <memmove+0x30>
   1676c:	000f883a 	mov	r7,zero
   16770:	29c5883a 	add	r2,r5,r7
   16774:	11000003 	ldbu	r4,0(r2)
   16778:	3a07883a 	add	r3,r7,r8
   1677c:	39c00044 	addi	r7,r7,1
   16780:	19000005 	stb	r4,0(r3)
   16784:	31fffa1e 	bne	r6,r7,16770 <memmove+0x18>
   16788:	4005883a 	mov	r2,r8
   1678c:	f800283a 	ret
   16790:	303ffd26 	beq	r6,zero,16788 <memmove+0x30>
   16794:	4187883a 	add	r3,r8,r6
   16798:	198dc83a 	sub	r6,r3,r6
   1679c:	213fffc4 	addi	r4,r4,-1
   167a0:	20800003 	ldbu	r2,0(r4)
   167a4:	18ffffc4 	addi	r3,r3,-1
   167a8:	18800005 	stb	r2,0(r3)
   167ac:	19bffb1e 	bne	r3,r6,1679c <memmove+0x44>
   167b0:	4005883a 	mov	r2,r8
   167b4:	f800283a 	ret

000167b8 <memset>:
   167b8:	30000526 	beq	r6,zero,167d0 <memset+0x18>
   167bc:	310d883a 	add	r6,r6,r4
   167c0:	2005883a 	mov	r2,r4
   167c4:	11400005 	stb	r5,0(r2)
   167c8:	10800044 	addi	r2,r2,1
   167cc:	11bffd1e 	bne	r2,r6,167c4 <memset+0xc>
   167d0:	2005883a 	mov	r2,r4
   167d4:	f800283a 	ret

000167d8 <_sbrk_r>:
   167d8:	defffd04 	addi	sp,sp,-12
   167dc:	dc000015 	stw	r16,0(sp)
   167e0:	040000b4 	movhi	r16,2
   167e4:	84282004 	addi	r16,r16,-24448
   167e8:	dc400115 	stw	r17,4(sp)
   167ec:	80000015 	stw	zero,0(r16)
   167f0:	2023883a 	mov	r17,r4
   167f4:	2809883a 	mov	r4,r5
   167f8:	dfc00215 	stw	ra,8(sp)
   167fc:	00176480 	call	17648 <sbrk>
   16800:	1007883a 	mov	r3,r2
   16804:	00bfffc4 	movi	r2,-1
   16808:	18800626 	beq	r3,r2,16824 <_sbrk_r+0x4c>
   1680c:	1805883a 	mov	r2,r3
   16810:	dfc00217 	ldw	ra,8(sp)
   16814:	dc400117 	ldw	r17,4(sp)
   16818:	dc000017 	ldw	r16,0(sp)
   1681c:	dec00304 	addi	sp,sp,12
   16820:	f800283a 	ret
   16824:	80800017 	ldw	r2,0(r16)
   16828:	103ff826 	beq	r2,zero,1680c <_sbrk_r+0x34>
   1682c:	88800015 	stw	r2,0(r17)
   16830:	1805883a 	mov	r2,r3
   16834:	dfc00217 	ldw	ra,8(sp)
   16838:	dc400117 	ldw	r17,4(sp)
   1683c:	dc000017 	ldw	r16,0(sp)
   16840:	dec00304 	addi	sp,sp,12
   16844:	f800283a 	ret

00016848 <__muldf3>:
   16848:	deffe004 	addi	sp,sp,-128
   1684c:	dc401815 	stw	r17,96(sp)
   16850:	dc400404 	addi	r17,sp,16
   16854:	2011883a 	mov	r8,r4
   16858:	2813883a 	mov	r9,r5
   1685c:	dc001715 	stw	r16,92(sp)
   16860:	d809883a 	mov	r4,sp
   16864:	880b883a 	mov	r5,r17
   16868:	dc000904 	addi	r16,sp,36
   1686c:	dfc01f15 	stw	ra,124(sp)
   16870:	da400115 	stw	r9,4(sp)
   16874:	d9c00315 	stw	r7,12(sp)
   16878:	da000015 	stw	r8,0(sp)
   1687c:	d9800215 	stw	r6,8(sp)
   16880:	ddc01e15 	stw	r23,120(sp)
   16884:	dd801d15 	stw	r22,116(sp)
   16888:	dd401c15 	stw	r21,112(sp)
   1688c:	dd001b15 	stw	r20,108(sp)
   16890:	dcc01a15 	stw	r19,104(sp)
   16894:	dc801915 	stw	r18,100(sp)
   16898:	0011b040 	call	11b04 <__unpack_d>
   1689c:	d9000204 	addi	r4,sp,8
   168a0:	800b883a 	mov	r5,r16
   168a4:	0011b040 	call	11b04 <__unpack_d>
   168a8:	d9000417 	ldw	r4,16(sp)
   168ac:	00800044 	movi	r2,1
   168b0:	1100102e 	bgeu	r2,r4,168f4 <__muldf3+0xac>
   168b4:	d8c00917 	ldw	r3,36(sp)
   168b8:	10c0062e 	bgeu	r2,r3,168d4 <__muldf3+0x8c>
   168bc:	00800104 	movi	r2,4
   168c0:	20800a26 	beq	r4,r2,168ec <__muldf3+0xa4>
   168c4:	1880cc26 	beq	r3,r2,16bf8 <__muldf3+0x3b0>
   168c8:	00800084 	movi	r2,2
   168cc:	20800926 	beq	r4,r2,168f4 <__muldf3+0xac>
   168d0:	1880191e 	bne	r3,r2,16938 <__muldf3+0xf0>
   168d4:	d8c00a17 	ldw	r3,40(sp)
   168d8:	d8800517 	ldw	r2,20(sp)
   168dc:	8009883a 	mov	r4,r16
   168e0:	10c4c03a 	cmpne	r2,r2,r3
   168e4:	d8800a15 	stw	r2,40(sp)
   168e8:	00000706 	br	16908 <__muldf3+0xc0>
   168ec:	00800084 	movi	r2,2
   168f0:	1880c326 	beq	r3,r2,16c00 <__muldf3+0x3b8>
   168f4:	d8800517 	ldw	r2,20(sp)
   168f8:	d8c00a17 	ldw	r3,40(sp)
   168fc:	8809883a 	mov	r4,r17
   16900:	10c4c03a 	cmpne	r2,r2,r3
   16904:	d8800515 	stw	r2,20(sp)
   16908:	00117f00 	call	117f0 <__pack_d>
   1690c:	dfc01f17 	ldw	ra,124(sp)
   16910:	ddc01e17 	ldw	r23,120(sp)
   16914:	dd801d17 	ldw	r22,116(sp)
   16918:	dd401c17 	ldw	r21,112(sp)
   1691c:	dd001b17 	ldw	r20,108(sp)
   16920:	dcc01a17 	ldw	r19,104(sp)
   16924:	dc801917 	ldw	r18,100(sp)
   16928:	dc401817 	ldw	r17,96(sp)
   1692c:	dc001717 	ldw	r16,92(sp)
   16930:	dec02004 	addi	sp,sp,128
   16934:	f800283a 	ret
   16938:	dd800717 	ldw	r22,28(sp)
   1693c:	dc800c17 	ldw	r18,48(sp)
   16940:	002b883a 	mov	r21,zero
   16944:	0023883a 	mov	r17,zero
   16948:	a80b883a 	mov	r5,r21
   1694c:	b00d883a 	mov	r6,r22
   16950:	880f883a 	mov	r7,r17
   16954:	ddc00817 	ldw	r23,32(sp)
   16958:	dcc00d17 	ldw	r19,52(sp)
   1695c:	9009883a 	mov	r4,r18
   16960:	00113f80 	call	113f8 <__muldi3>
   16964:	001b883a 	mov	r13,zero
   16968:	680f883a 	mov	r7,r13
   1696c:	b009883a 	mov	r4,r22
   16970:	000b883a 	mov	r5,zero
   16974:	980d883a 	mov	r6,r19
   16978:	b82d883a 	mov	r22,r23
   1697c:	002f883a 	mov	r23,zero
   16980:	db401615 	stw	r13,88(sp)
   16984:	d8801315 	stw	r2,76(sp)
   16988:	d8c01415 	stw	r3,80(sp)
   1698c:	dcc01515 	stw	r19,84(sp)
   16990:	00113f80 	call	113f8 <__muldi3>
   16994:	b00d883a 	mov	r6,r22
   16998:	000b883a 	mov	r5,zero
   1699c:	9009883a 	mov	r4,r18
   169a0:	b80f883a 	mov	r7,r23
   169a4:	1021883a 	mov	r16,r2
   169a8:	1823883a 	mov	r17,r3
   169ac:	00113f80 	call	113f8 <__muldi3>
   169b0:	8085883a 	add	r2,r16,r2
   169b4:	140d803a 	cmpltu	r6,r2,r16
   169b8:	88c7883a 	add	r3,r17,r3
   169bc:	30cd883a 	add	r6,r6,r3
   169c0:	1029883a 	mov	r20,r2
   169c4:	302b883a 	mov	r21,r6
   169c8:	da801317 	ldw	r10,76(sp)
   169cc:	dac01417 	ldw	r11,80(sp)
   169d0:	db001517 	ldw	r12,84(sp)
   169d4:	db401617 	ldw	r13,88(sp)
   169d8:	3440612e 	bgeu	r6,r17,16b60 <__muldf3+0x318>
   169dc:	0009883a 	mov	r4,zero
   169e0:	5105883a 	add	r2,r10,r4
   169e4:	128d803a 	cmpltu	r6,r2,r10
   169e8:	5d07883a 	add	r3,r11,r20
   169ec:	30cd883a 	add	r6,r6,r3
   169f0:	0021883a 	mov	r16,zero
   169f4:	04400044 	movi	r17,1
   169f8:	1025883a 	mov	r18,r2
   169fc:	3027883a 	mov	r19,r6
   16a00:	32c06236 	bltu	r6,r11,16b8c <__muldf3+0x344>
   16a04:	59807a26 	beq	r11,r6,16bf0 <__muldf3+0x3a8>
   16a08:	680b883a 	mov	r5,r13
   16a0c:	b80f883a 	mov	r7,r23
   16a10:	6009883a 	mov	r4,r12
   16a14:	b00d883a 	mov	r6,r22
   16a18:	00113f80 	call	113f8 <__muldi3>
   16a1c:	1009883a 	mov	r4,r2
   16a20:	000f883a 	mov	r7,zero
   16a24:	1545883a 	add	r2,r2,r21
   16a28:	1111803a 	cmpltu	r8,r2,r4
   16a2c:	19c7883a 	add	r3,r3,r7
   16a30:	40c7883a 	add	r3,r8,r3
   16a34:	88cb883a 	add	r5,r17,r3
   16a38:	d8c00617 	ldw	r3,24(sp)
   16a3c:	8089883a 	add	r4,r16,r2
   16a40:	d8800b17 	ldw	r2,44(sp)
   16a44:	18c00104 	addi	r3,r3,4
   16a48:	240d803a 	cmpltu	r6,r4,r16
   16a4c:	10c7883a 	add	r3,r2,r3
   16a50:	2013883a 	mov	r9,r4
   16a54:	d8800a17 	ldw	r2,40(sp)
   16a58:	d9000517 	ldw	r4,20(sp)
   16a5c:	314d883a 	add	r6,r6,r5
   16a60:	3015883a 	mov	r10,r6
   16a64:	2088c03a 	cmpne	r4,r4,r2
   16a68:	00880034 	movhi	r2,8192
   16a6c:	10bfffc4 	addi	r2,r2,-1
   16a70:	d9000f15 	stw	r4,60(sp)
   16a74:	d8c01015 	stw	r3,64(sp)
   16a78:	1180162e 	bgeu	r2,r6,16ad4 <__muldf3+0x28c>
   16a7c:	1811883a 	mov	r8,r3
   16a80:	101f883a 	mov	r15,r2
   16a84:	980497fa 	slli	r2,r19,31
   16a88:	9016d07a 	srli	r11,r18,1
   16a8c:	500697fa 	slli	r3,r10,31
   16a90:	480cd07a 	srli	r6,r9,1
   16a94:	500ed07a 	srli	r7,r10,1
   16a98:	12d6b03a 	or	r11,r2,r11
   16a9c:	00800044 	movi	r2,1
   16aa0:	198cb03a 	or	r6,r3,r6
   16aa4:	4888703a 	and	r4,r9,r2
   16aa8:	9818d07a 	srli	r12,r19,1
   16aac:	001b883a 	mov	r13,zero
   16ab0:	03a00034 	movhi	r14,32768
   16ab4:	3013883a 	mov	r9,r6
   16ab8:	3815883a 	mov	r10,r7
   16abc:	4091883a 	add	r8,r8,r2
   16ac0:	20000226 	beq	r4,zero,16acc <__muldf3+0x284>
   16ac4:	5b64b03a 	or	r18,r11,r13
   16ac8:	63a6b03a 	or	r19,r12,r14
   16acc:	7abfed36 	bltu	r15,r10,16a84 <__muldf3+0x23c>
   16ad0:	da001015 	stw	r8,64(sp)
   16ad4:	00840034 	movhi	r2,4096
   16ad8:	10bfffc4 	addi	r2,r2,-1
   16adc:	12801436 	bltu	r2,r10,16b30 <__muldf3+0x2e8>
   16ae0:	da001017 	ldw	r8,64(sp)
   16ae4:	101f883a 	mov	r15,r2
   16ae8:	4a45883a 	add	r2,r9,r9
   16aec:	124d803a 	cmpltu	r6,r2,r9
   16af0:	5287883a 	add	r3,r10,r10
   16af4:	9497883a 	add	r11,r18,r18
   16af8:	5c8f803a 	cmpltu	r7,r11,r18
   16afc:	9cd9883a 	add	r12,r19,r19
   16b00:	01000044 	movi	r4,1
   16b04:	30cd883a 	add	r6,r6,r3
   16b08:	3b0f883a 	add	r7,r7,r12
   16b0c:	423fffc4 	addi	r8,r8,-1
   16b10:	1013883a 	mov	r9,r2
   16b14:	3015883a 	mov	r10,r6
   16b18:	111ab03a 	or	r13,r2,r4
   16b1c:	98003016 	blt	r19,zero,16be0 <__muldf3+0x398>
   16b20:	5825883a 	mov	r18,r11
   16b24:	3827883a 	mov	r19,r7
   16b28:	7abfef2e 	bgeu	r15,r10,16ae8 <__muldf3+0x2a0>
   16b2c:	da001015 	stw	r8,64(sp)
   16b30:	00803fc4 	movi	r2,255
   16b34:	488e703a 	and	r7,r9,r2
   16b38:	00802004 	movi	r2,128
   16b3c:	0007883a 	mov	r3,zero
   16b40:	0011883a 	mov	r8,zero
   16b44:	38801826 	beq	r7,r2,16ba8 <__muldf3+0x360>
   16b48:	008000c4 	movi	r2,3
   16b4c:	d9000e04 	addi	r4,sp,56
   16b50:	da801215 	stw	r10,72(sp)
   16b54:	d8800e15 	stw	r2,56(sp)
   16b58:	da401115 	stw	r9,68(sp)
   16b5c:	003f6a06 	br	16908 <__muldf3+0xc0>
   16b60:	89802126 	beq	r17,r6,16be8 <__muldf3+0x3a0>
   16b64:	0009883a 	mov	r4,zero
   16b68:	5105883a 	add	r2,r10,r4
   16b6c:	128d803a 	cmpltu	r6,r2,r10
   16b70:	5d07883a 	add	r3,r11,r20
   16b74:	30cd883a 	add	r6,r6,r3
   16b78:	0021883a 	mov	r16,zero
   16b7c:	0023883a 	mov	r17,zero
   16b80:	1025883a 	mov	r18,r2
   16b84:	3027883a 	mov	r19,r6
   16b88:	32ff9e2e 	bgeu	r6,r11,16a04 <__muldf3+0x1bc>
   16b8c:	00800044 	movi	r2,1
   16b90:	8089883a 	add	r4,r16,r2
   16b94:	240d803a 	cmpltu	r6,r4,r16
   16b98:	344d883a 	add	r6,r6,r17
   16b9c:	2021883a 	mov	r16,r4
   16ba0:	3023883a 	mov	r17,r6
   16ba4:	003f9806 	br	16a08 <__muldf3+0x1c0>
   16ba8:	403fe71e 	bne	r8,zero,16b48 <__muldf3+0x300>
   16bac:	01004004 	movi	r4,256
   16bb0:	4904703a 	and	r2,r9,r4
   16bb4:	10c4b03a 	or	r2,r2,r3
   16bb8:	103fe31e 	bne	r2,zero,16b48 <__muldf3+0x300>
   16bbc:	94c4b03a 	or	r2,r18,r19
   16bc0:	103fe126 	beq	r2,zero,16b48 <__muldf3+0x300>
   16bc4:	49c5883a 	add	r2,r9,r7
   16bc8:	1251803a 	cmpltu	r8,r2,r9
   16bcc:	4291883a 	add	r8,r8,r10
   16bd0:	013fc004 	movi	r4,-256
   16bd4:	1112703a 	and	r9,r2,r4
   16bd8:	4015883a 	mov	r10,r8
   16bdc:	003fda06 	br	16b48 <__muldf3+0x300>
   16be0:	6813883a 	mov	r9,r13
   16be4:	003fce06 	br	16b20 <__muldf3+0x2d8>
   16be8:	143f7c36 	bltu	r2,r16,169dc <__muldf3+0x194>
   16bec:	003fdd06 	br	16b64 <__muldf3+0x31c>
   16bf0:	12bf852e 	bgeu	r2,r10,16a08 <__muldf3+0x1c0>
   16bf4:	003fe506 	br	16b8c <__muldf3+0x344>
   16bf8:	00800084 	movi	r2,2
   16bfc:	20bf351e 	bne	r4,r2,168d4 <__muldf3+0x8c>
   16c00:	010000b4 	movhi	r4,2
   16c04:	21240704 	addi	r4,r4,-28644
   16c08:	003f3f06 	br	16908 <__muldf3+0xc0>

00016c0c <__divdf3>:
   16c0c:	deffed04 	addi	sp,sp,-76
   16c10:	dcc01115 	stw	r19,68(sp)
   16c14:	dcc00404 	addi	r19,sp,16
   16c18:	2011883a 	mov	r8,r4
   16c1c:	2813883a 	mov	r9,r5
   16c20:	dc000e15 	stw	r16,56(sp)
   16c24:	d809883a 	mov	r4,sp
   16c28:	980b883a 	mov	r5,r19
   16c2c:	dc000904 	addi	r16,sp,36
   16c30:	dfc01215 	stw	ra,72(sp)
   16c34:	da400115 	stw	r9,4(sp)
   16c38:	d9c00315 	stw	r7,12(sp)
   16c3c:	da000015 	stw	r8,0(sp)
   16c40:	d9800215 	stw	r6,8(sp)
   16c44:	dc801015 	stw	r18,64(sp)
   16c48:	dc400f15 	stw	r17,60(sp)
   16c4c:	0011b040 	call	11b04 <__unpack_d>
   16c50:	d9000204 	addi	r4,sp,8
   16c54:	800b883a 	mov	r5,r16
   16c58:	0011b040 	call	11b04 <__unpack_d>
   16c5c:	d9000417 	ldw	r4,16(sp)
   16c60:	00800044 	movi	r2,1
   16c64:	11000b2e 	bgeu	r2,r4,16c94 <__divdf3+0x88>
   16c68:	d9400917 	ldw	r5,36(sp)
   16c6c:	1140762e 	bgeu	r2,r5,16e48 <__divdf3+0x23c>
   16c70:	d8800517 	ldw	r2,20(sp)
   16c74:	d8c00a17 	ldw	r3,40(sp)
   16c78:	01800104 	movi	r6,4
   16c7c:	10c4f03a 	xor	r2,r2,r3
   16c80:	d8800515 	stw	r2,20(sp)
   16c84:	21800226 	beq	r4,r6,16c90 <__divdf3+0x84>
   16c88:	00800084 	movi	r2,2
   16c8c:	2080141e 	bne	r4,r2,16ce0 <__divdf3+0xd4>
   16c90:	29000926 	beq	r5,r4,16cb8 <__divdf3+0xac>
   16c94:	9809883a 	mov	r4,r19
   16c98:	00117f00 	call	117f0 <__pack_d>
   16c9c:	dfc01217 	ldw	ra,72(sp)
   16ca0:	dcc01117 	ldw	r19,68(sp)
   16ca4:	dc801017 	ldw	r18,64(sp)
   16ca8:	dc400f17 	ldw	r17,60(sp)
   16cac:	dc000e17 	ldw	r16,56(sp)
   16cb0:	dec01304 	addi	sp,sp,76
   16cb4:	f800283a 	ret
   16cb8:	010000b4 	movhi	r4,2
   16cbc:	21240704 	addi	r4,r4,-28644
   16cc0:	00117f00 	call	117f0 <__pack_d>
   16cc4:	dfc01217 	ldw	ra,72(sp)
   16cc8:	dcc01117 	ldw	r19,68(sp)
   16ccc:	dc801017 	ldw	r18,64(sp)
   16cd0:	dc400f17 	ldw	r17,60(sp)
   16cd4:	dc000e17 	ldw	r16,56(sp)
   16cd8:	dec01304 	addi	sp,sp,76
   16cdc:	f800283a 	ret
   16ce0:	29805b26 	beq	r5,r6,16e50 <__divdf3+0x244>
   16ce4:	28802d26 	beq	r5,r2,16d9c <__divdf3+0x190>
   16ce8:	d8c00617 	ldw	r3,24(sp)
   16cec:	d8800b17 	ldw	r2,44(sp)
   16cf0:	d9c00817 	ldw	r7,32(sp)
   16cf4:	dc400d17 	ldw	r17,52(sp)
   16cf8:	188bc83a 	sub	r5,r3,r2
   16cfc:	d9800717 	ldw	r6,28(sp)
   16d00:	dc000c17 	ldw	r16,48(sp)
   16d04:	d9400615 	stw	r5,24(sp)
   16d08:	3c403836 	bltu	r7,r17,16dec <__divdf3+0x1e0>
   16d0c:	89c03626 	beq	r17,r7,16de8 <__divdf3+0x1dc>
   16d10:	0015883a 	mov	r10,zero
   16d14:	001d883a 	mov	r14,zero
   16d18:	02c40034 	movhi	r11,4096
   16d1c:	001f883a 	mov	r15,zero
   16d20:	003f883a 	mov	ra,zero
   16d24:	04800f44 	movi	r18,61
   16d28:	00000f06 	br	16d68 <__divdf3+0x15c>
   16d2c:	601d883a 	mov	r14,r12
   16d30:	681f883a 	mov	r15,r13
   16d34:	400d883a 	mov	r6,r8
   16d38:	100f883a 	mov	r7,r2
   16d3c:	3191883a 	add	r8,r6,r6
   16d40:	5808d07a 	srli	r4,r11,1
   16d44:	4185803a 	cmpltu	r2,r8,r6
   16d48:	39d3883a 	add	r9,r7,r7
   16d4c:	28c6b03a 	or	r3,r5,r3
   16d50:	1245883a 	add	r2,r2,r9
   16d54:	1815883a 	mov	r10,r3
   16d58:	2017883a 	mov	r11,r4
   16d5c:	400d883a 	mov	r6,r8
   16d60:	100f883a 	mov	r7,r2
   16d64:	fc801726 	beq	ra,r18,16dc4 <__divdf3+0x1b8>
   16d68:	580a97fa 	slli	r5,r11,31
   16d6c:	5006d07a 	srli	r3,r10,1
   16d70:	ffc00044 	addi	ra,ra,1
   16d74:	3c7ff136 	bltu	r7,r17,16d3c <__divdf3+0x130>
   16d78:	3411c83a 	sub	r8,r6,r16
   16d7c:	3205803a 	cmpltu	r2,r6,r8
   16d80:	3c53c83a 	sub	r9,r7,r17
   16d84:	7298b03a 	or	r12,r14,r10
   16d88:	7adab03a 	or	r13,r15,r11
   16d8c:	4885c83a 	sub	r2,r9,r2
   16d90:	89ffe61e 	bne	r17,r7,16d2c <__divdf3+0x120>
   16d94:	343fe936 	bltu	r6,r16,16d3c <__divdf3+0x130>
   16d98:	003fe406 	br	16d2c <__divdf3+0x120>
   16d9c:	9809883a 	mov	r4,r19
   16da0:	d9800415 	stw	r6,16(sp)
   16da4:	00117f00 	call	117f0 <__pack_d>
   16da8:	dfc01217 	ldw	ra,72(sp)
   16dac:	dcc01117 	ldw	r19,68(sp)
   16db0:	dc801017 	ldw	r18,64(sp)
   16db4:	dc400f17 	ldw	r17,60(sp)
   16db8:	dc000e17 	ldw	r16,56(sp)
   16dbc:	dec01304 	addi	sp,sp,76
   16dc0:	f800283a 	ret
   16dc4:	00803fc4 	movi	r2,255
   16dc8:	7090703a 	and	r8,r14,r2
   16dcc:	00802004 	movi	r2,128
   16dd0:	0007883a 	mov	r3,zero
   16dd4:	0013883a 	mov	r9,zero
   16dd8:	40800d26 	beq	r8,r2,16e10 <__divdf3+0x204>
   16ddc:	dbc00815 	stw	r15,32(sp)
   16de0:	db800715 	stw	r14,28(sp)
   16de4:	003fab06 	br	16c94 <__divdf3+0x88>
   16de8:	343fc92e 	bgeu	r6,r16,16d10 <__divdf3+0x104>
   16dec:	3185883a 	add	r2,r6,r6
   16df0:	1189803a 	cmpltu	r4,r2,r6
   16df4:	39c7883a 	add	r3,r7,r7
   16df8:	20c9883a 	add	r4,r4,r3
   16dfc:	297fffc4 	addi	r5,r5,-1
   16e00:	100d883a 	mov	r6,r2
   16e04:	200f883a 	mov	r7,r4
   16e08:	d9400615 	stw	r5,24(sp)
   16e0c:	003fc006 	br	16d10 <__divdf3+0x104>
   16e10:	483ff21e 	bne	r9,zero,16ddc <__divdf3+0x1d0>
   16e14:	01004004 	movi	r4,256
   16e18:	7104703a 	and	r2,r14,r4
   16e1c:	10c4b03a 	or	r2,r2,r3
   16e20:	103fee1e 	bne	r2,zero,16ddc <__divdf3+0x1d0>
   16e24:	31c4b03a 	or	r2,r6,r7
   16e28:	103fec26 	beq	r2,zero,16ddc <__divdf3+0x1d0>
   16e2c:	7205883a 	add	r2,r14,r8
   16e30:	1391803a 	cmpltu	r8,r2,r14
   16e34:	43d1883a 	add	r8,r8,r15
   16e38:	013fc004 	movi	r4,-256
   16e3c:	111c703a 	and	r14,r2,r4
   16e40:	401f883a 	mov	r15,r8
   16e44:	003fe506 	br	16ddc <__divdf3+0x1d0>
   16e48:	8009883a 	mov	r4,r16
   16e4c:	003f9206 	br	16c98 <__divdf3+0x8c>
   16e50:	9809883a 	mov	r4,r19
   16e54:	d8000715 	stw	zero,28(sp)
   16e58:	d8000815 	stw	zero,32(sp)
   16e5c:	d8000615 	stw	zero,24(sp)
   16e60:	003f8d06 	br	16c98 <__divdf3+0x8c>

00016e64 <__eqdf2>:
   16e64:	deffef04 	addi	sp,sp,-68
   16e68:	dc400f15 	stw	r17,60(sp)
   16e6c:	dc400404 	addi	r17,sp,16
   16e70:	2005883a 	mov	r2,r4
   16e74:	2807883a 	mov	r3,r5
   16e78:	dc000e15 	stw	r16,56(sp)
   16e7c:	d809883a 	mov	r4,sp
   16e80:	880b883a 	mov	r5,r17
   16e84:	dc000904 	addi	r16,sp,36
   16e88:	d8c00115 	stw	r3,4(sp)
   16e8c:	d8800015 	stw	r2,0(sp)
   16e90:	d9800215 	stw	r6,8(sp)
   16e94:	dfc01015 	stw	ra,64(sp)
   16e98:	d9c00315 	stw	r7,12(sp)
   16e9c:	0011b040 	call	11b04 <__unpack_d>
   16ea0:	d9000204 	addi	r4,sp,8
   16ea4:	800b883a 	mov	r5,r16
   16ea8:	0011b040 	call	11b04 <__unpack_d>
   16eac:	d8800417 	ldw	r2,16(sp)
   16eb0:	00c00044 	movi	r3,1
   16eb4:	180d883a 	mov	r6,r3
   16eb8:	1880062e 	bgeu	r3,r2,16ed4 <__eqdf2+0x70>
   16ebc:	d8800917 	ldw	r2,36(sp)
   16ec0:	8809883a 	mov	r4,r17
   16ec4:	800b883a 	mov	r5,r16
   16ec8:	1880022e 	bgeu	r3,r2,16ed4 <__eqdf2+0x70>
   16ecc:	00173b80 	call	173b8 <__fpcmp_parts_d>
   16ed0:	100d883a 	mov	r6,r2
   16ed4:	3005883a 	mov	r2,r6
   16ed8:	dfc01017 	ldw	ra,64(sp)
   16edc:	dc400f17 	ldw	r17,60(sp)
   16ee0:	dc000e17 	ldw	r16,56(sp)
   16ee4:	dec01104 	addi	sp,sp,68
   16ee8:	f800283a 	ret

00016eec <__nedf2>:
   16eec:	deffef04 	addi	sp,sp,-68
   16ef0:	dc400f15 	stw	r17,60(sp)
   16ef4:	dc400404 	addi	r17,sp,16
   16ef8:	2005883a 	mov	r2,r4
   16efc:	2807883a 	mov	r3,r5
   16f00:	dc000e15 	stw	r16,56(sp)
   16f04:	d809883a 	mov	r4,sp
   16f08:	880b883a 	mov	r5,r17
   16f0c:	dc000904 	addi	r16,sp,36
   16f10:	d8c00115 	stw	r3,4(sp)
   16f14:	d8800015 	stw	r2,0(sp)
   16f18:	d9800215 	stw	r6,8(sp)
   16f1c:	dfc01015 	stw	ra,64(sp)
   16f20:	d9c00315 	stw	r7,12(sp)
   16f24:	0011b040 	call	11b04 <__unpack_d>
   16f28:	d9000204 	addi	r4,sp,8
   16f2c:	800b883a 	mov	r5,r16
   16f30:	0011b040 	call	11b04 <__unpack_d>
   16f34:	d8800417 	ldw	r2,16(sp)
   16f38:	00c00044 	movi	r3,1
   16f3c:	180d883a 	mov	r6,r3
   16f40:	1880062e 	bgeu	r3,r2,16f5c <__nedf2+0x70>
   16f44:	d8800917 	ldw	r2,36(sp)
   16f48:	8809883a 	mov	r4,r17
   16f4c:	800b883a 	mov	r5,r16
   16f50:	1880022e 	bgeu	r3,r2,16f5c <__nedf2+0x70>
   16f54:	00173b80 	call	173b8 <__fpcmp_parts_d>
   16f58:	100d883a 	mov	r6,r2
   16f5c:	3005883a 	mov	r2,r6
   16f60:	dfc01017 	ldw	ra,64(sp)
   16f64:	dc400f17 	ldw	r17,60(sp)
   16f68:	dc000e17 	ldw	r16,56(sp)
   16f6c:	dec01104 	addi	sp,sp,68
   16f70:	f800283a 	ret

00016f74 <__gtdf2>:
   16f74:	deffef04 	addi	sp,sp,-68
   16f78:	dc400f15 	stw	r17,60(sp)
   16f7c:	dc400404 	addi	r17,sp,16
   16f80:	2005883a 	mov	r2,r4
   16f84:	2807883a 	mov	r3,r5
   16f88:	dc000e15 	stw	r16,56(sp)
   16f8c:	d809883a 	mov	r4,sp
   16f90:	880b883a 	mov	r5,r17
   16f94:	dc000904 	addi	r16,sp,36
   16f98:	d8c00115 	stw	r3,4(sp)
   16f9c:	d8800015 	stw	r2,0(sp)
   16fa0:	d9800215 	stw	r6,8(sp)
   16fa4:	dfc01015 	stw	ra,64(sp)
   16fa8:	d9c00315 	stw	r7,12(sp)
   16fac:	0011b040 	call	11b04 <__unpack_d>
   16fb0:	d9000204 	addi	r4,sp,8
   16fb4:	800b883a 	mov	r5,r16
   16fb8:	0011b040 	call	11b04 <__unpack_d>
   16fbc:	d8800417 	ldw	r2,16(sp)
   16fc0:	00c00044 	movi	r3,1
   16fc4:	01bfffc4 	movi	r6,-1
   16fc8:	1880062e 	bgeu	r3,r2,16fe4 <__gtdf2+0x70>
   16fcc:	d8800917 	ldw	r2,36(sp)
   16fd0:	8809883a 	mov	r4,r17
   16fd4:	800b883a 	mov	r5,r16
   16fd8:	1880022e 	bgeu	r3,r2,16fe4 <__gtdf2+0x70>
   16fdc:	00173b80 	call	173b8 <__fpcmp_parts_d>
   16fe0:	100d883a 	mov	r6,r2
   16fe4:	3005883a 	mov	r2,r6
   16fe8:	dfc01017 	ldw	ra,64(sp)
   16fec:	dc400f17 	ldw	r17,60(sp)
   16ff0:	dc000e17 	ldw	r16,56(sp)
   16ff4:	dec01104 	addi	sp,sp,68
   16ff8:	f800283a 	ret

00016ffc <__gedf2>:
   16ffc:	deffef04 	addi	sp,sp,-68
   17000:	dc400f15 	stw	r17,60(sp)
   17004:	dc400404 	addi	r17,sp,16
   17008:	2005883a 	mov	r2,r4
   1700c:	2807883a 	mov	r3,r5
   17010:	dc000e15 	stw	r16,56(sp)
   17014:	d809883a 	mov	r4,sp
   17018:	880b883a 	mov	r5,r17
   1701c:	dc000904 	addi	r16,sp,36
   17020:	d8c00115 	stw	r3,4(sp)
   17024:	d8800015 	stw	r2,0(sp)
   17028:	d9800215 	stw	r6,8(sp)
   1702c:	dfc01015 	stw	ra,64(sp)
   17030:	d9c00315 	stw	r7,12(sp)
   17034:	0011b040 	call	11b04 <__unpack_d>
   17038:	d9000204 	addi	r4,sp,8
   1703c:	800b883a 	mov	r5,r16
   17040:	0011b040 	call	11b04 <__unpack_d>
   17044:	d8800417 	ldw	r2,16(sp)
   17048:	00c00044 	movi	r3,1
   1704c:	01bfffc4 	movi	r6,-1
   17050:	1880062e 	bgeu	r3,r2,1706c <__gedf2+0x70>
   17054:	d8800917 	ldw	r2,36(sp)
   17058:	8809883a 	mov	r4,r17
   1705c:	800b883a 	mov	r5,r16
   17060:	1880022e 	bgeu	r3,r2,1706c <__gedf2+0x70>
   17064:	00173b80 	call	173b8 <__fpcmp_parts_d>
   17068:	100d883a 	mov	r6,r2
   1706c:	3005883a 	mov	r2,r6
   17070:	dfc01017 	ldw	ra,64(sp)
   17074:	dc400f17 	ldw	r17,60(sp)
   17078:	dc000e17 	ldw	r16,56(sp)
   1707c:	dec01104 	addi	sp,sp,68
   17080:	f800283a 	ret

00017084 <__ltdf2>:
   17084:	deffef04 	addi	sp,sp,-68
   17088:	dc400f15 	stw	r17,60(sp)
   1708c:	dc400404 	addi	r17,sp,16
   17090:	2005883a 	mov	r2,r4
   17094:	2807883a 	mov	r3,r5
   17098:	dc000e15 	stw	r16,56(sp)
   1709c:	d809883a 	mov	r4,sp
   170a0:	880b883a 	mov	r5,r17
   170a4:	dc000904 	addi	r16,sp,36
   170a8:	d8c00115 	stw	r3,4(sp)
   170ac:	d8800015 	stw	r2,0(sp)
   170b0:	d9800215 	stw	r6,8(sp)
   170b4:	dfc01015 	stw	ra,64(sp)
   170b8:	d9c00315 	stw	r7,12(sp)
   170bc:	0011b040 	call	11b04 <__unpack_d>
   170c0:	d9000204 	addi	r4,sp,8
   170c4:	800b883a 	mov	r5,r16
   170c8:	0011b040 	call	11b04 <__unpack_d>
   170cc:	d8800417 	ldw	r2,16(sp)
   170d0:	00c00044 	movi	r3,1
   170d4:	180d883a 	mov	r6,r3
   170d8:	1880062e 	bgeu	r3,r2,170f4 <__ltdf2+0x70>
   170dc:	d8800917 	ldw	r2,36(sp)
   170e0:	8809883a 	mov	r4,r17
   170e4:	800b883a 	mov	r5,r16
   170e8:	1880022e 	bgeu	r3,r2,170f4 <__ltdf2+0x70>
   170ec:	00173b80 	call	173b8 <__fpcmp_parts_d>
   170f0:	100d883a 	mov	r6,r2
   170f4:	3005883a 	mov	r2,r6
   170f8:	dfc01017 	ldw	ra,64(sp)
   170fc:	dc400f17 	ldw	r17,60(sp)
   17100:	dc000e17 	ldw	r16,56(sp)
   17104:	dec01104 	addi	sp,sp,68
   17108:	f800283a 	ret

0001710c <__ledf2>:
   1710c:	deffef04 	addi	sp,sp,-68
   17110:	dc400f15 	stw	r17,60(sp)
   17114:	dc400404 	addi	r17,sp,16
   17118:	2005883a 	mov	r2,r4
   1711c:	2807883a 	mov	r3,r5
   17120:	dc000e15 	stw	r16,56(sp)
   17124:	d809883a 	mov	r4,sp
   17128:	880b883a 	mov	r5,r17
   1712c:	dc000904 	addi	r16,sp,36
   17130:	d8c00115 	stw	r3,4(sp)
   17134:	d8800015 	stw	r2,0(sp)
   17138:	d9800215 	stw	r6,8(sp)
   1713c:	dfc01015 	stw	ra,64(sp)
   17140:	d9c00315 	stw	r7,12(sp)
   17144:	0011b040 	call	11b04 <__unpack_d>
   17148:	d9000204 	addi	r4,sp,8
   1714c:	800b883a 	mov	r5,r16
   17150:	0011b040 	call	11b04 <__unpack_d>
   17154:	d8800417 	ldw	r2,16(sp)
   17158:	00c00044 	movi	r3,1
   1715c:	180d883a 	mov	r6,r3
   17160:	1880062e 	bgeu	r3,r2,1717c <__ledf2+0x70>
   17164:	d8800917 	ldw	r2,36(sp)
   17168:	8809883a 	mov	r4,r17
   1716c:	800b883a 	mov	r5,r16
   17170:	1880022e 	bgeu	r3,r2,1717c <__ledf2+0x70>
   17174:	00173b80 	call	173b8 <__fpcmp_parts_d>
   17178:	100d883a 	mov	r6,r2
   1717c:	3005883a 	mov	r2,r6
   17180:	dfc01017 	ldw	ra,64(sp)
   17184:	dc400f17 	ldw	r17,60(sp)
   17188:	dc000e17 	ldw	r16,56(sp)
   1718c:	dec01104 	addi	sp,sp,68
   17190:	f800283a 	ret

00017194 <__fixdfsi>:
   17194:	defff804 	addi	sp,sp,-32
   17198:	2005883a 	mov	r2,r4
   1719c:	2807883a 	mov	r3,r5
   171a0:	d809883a 	mov	r4,sp
   171a4:	d9400204 	addi	r5,sp,8
   171a8:	d8c00115 	stw	r3,4(sp)
   171ac:	d8800015 	stw	r2,0(sp)
   171b0:	dfc00715 	stw	ra,28(sp)
   171b4:	0011b040 	call	11b04 <__unpack_d>
   171b8:	d8c00217 	ldw	r3,8(sp)
   171bc:	00800084 	movi	r2,2
   171c0:	1880051e 	bne	r3,r2,171d8 <__fixdfsi+0x44>
   171c4:	0007883a 	mov	r3,zero
   171c8:	1805883a 	mov	r2,r3
   171cc:	dfc00717 	ldw	ra,28(sp)
   171d0:	dec00804 	addi	sp,sp,32
   171d4:	f800283a 	ret
   171d8:	00800044 	movi	r2,1
   171dc:	10fff92e 	bgeu	r2,r3,171c4 <__fixdfsi+0x30>
   171e0:	00800104 	movi	r2,4
   171e4:	18800426 	beq	r3,r2,171f8 <__fixdfsi+0x64>
   171e8:	d8c00417 	ldw	r3,16(sp)
   171ec:	183ff516 	blt	r3,zero,171c4 <__fixdfsi+0x30>
   171f0:	00800784 	movi	r2,30
   171f4:	10c0080e 	bge	r2,r3,17218 <__fixdfsi+0x84>
   171f8:	d8800317 	ldw	r2,12(sp)
   171fc:	1000121e 	bne	r2,zero,17248 <__fixdfsi+0xb4>
   17200:	00e00034 	movhi	r3,32768
   17204:	18ffffc4 	addi	r3,r3,-1
   17208:	1805883a 	mov	r2,r3
   1720c:	dfc00717 	ldw	ra,28(sp)
   17210:	dec00804 	addi	sp,sp,32
   17214:	f800283a 	ret
   17218:	00800f04 	movi	r2,60
   1721c:	10d1c83a 	sub	r8,r2,r3
   17220:	40bff804 	addi	r2,r8,-32
   17224:	d9800517 	ldw	r6,20(sp)
   17228:	d9c00617 	ldw	r7,24(sp)
   1722c:	10000816 	blt	r2,zero,17250 <__fixdfsi+0xbc>
   17230:	3888d83a 	srl	r4,r7,r2
   17234:	d8800317 	ldw	r2,12(sp)
   17238:	2007883a 	mov	r3,r4
   1723c:	103fe226 	beq	r2,zero,171c8 <__fixdfsi+0x34>
   17240:	0107c83a 	sub	r3,zero,r4
   17244:	003fe006 	br	171c8 <__fixdfsi+0x34>
   17248:	00e00034 	movhi	r3,32768
   1724c:	003fde06 	br	171c8 <__fixdfsi+0x34>
   17250:	39c7883a 	add	r3,r7,r7
   17254:	008007c4 	movi	r2,31
   17258:	1205c83a 	sub	r2,r2,r8
   1725c:	1886983a 	sll	r3,r3,r2
   17260:	3208d83a 	srl	r4,r6,r8
   17264:	1908b03a 	or	r4,r3,r4
   17268:	003ff206 	br	17234 <__fixdfsi+0xa0>

0001726c <udivmodsi4>:
   1726c:	29001b2e 	bgeu	r5,r4,172dc <udivmodsi4+0x70>
   17270:	28001a16 	blt	r5,zero,172dc <udivmodsi4+0x70>
   17274:	00800044 	movi	r2,1
   17278:	0007883a 	mov	r3,zero
   1727c:	01c007c4 	movi	r7,31
   17280:	00000306 	br	17290 <udivmodsi4+0x24>
   17284:	19c01326 	beq	r3,r7,172d4 <udivmodsi4+0x68>
   17288:	18c00044 	addi	r3,r3,1
   1728c:	28000416 	blt	r5,zero,172a0 <udivmodsi4+0x34>
   17290:	294b883a 	add	r5,r5,r5
   17294:	1085883a 	add	r2,r2,r2
   17298:	293ffa36 	bltu	r5,r4,17284 <udivmodsi4+0x18>
   1729c:	10000d26 	beq	r2,zero,172d4 <udivmodsi4+0x68>
   172a0:	0007883a 	mov	r3,zero
   172a4:	21400236 	bltu	r4,r5,172b0 <udivmodsi4+0x44>
   172a8:	2149c83a 	sub	r4,r4,r5
   172ac:	1886b03a 	or	r3,r3,r2
   172b0:	1004d07a 	srli	r2,r2,1
   172b4:	280ad07a 	srli	r5,r5,1
   172b8:	103ffa1e 	bne	r2,zero,172a4 <udivmodsi4+0x38>
   172bc:	30000226 	beq	r6,zero,172c8 <udivmodsi4+0x5c>
   172c0:	2005883a 	mov	r2,r4
   172c4:	f800283a 	ret
   172c8:	1809883a 	mov	r4,r3
   172cc:	2005883a 	mov	r2,r4
   172d0:	f800283a 	ret
   172d4:	0007883a 	mov	r3,zero
   172d8:	003ff806 	br	172bc <udivmodsi4+0x50>
   172dc:	00800044 	movi	r2,1
   172e0:	0007883a 	mov	r3,zero
   172e4:	003fef06 	br	172a4 <udivmodsi4+0x38>

000172e8 <__divsi3>:
   172e8:	defffe04 	addi	sp,sp,-8
   172ec:	dc000015 	stw	r16,0(sp)
   172f0:	dfc00115 	stw	ra,4(sp)
   172f4:	0021883a 	mov	r16,zero
   172f8:	20000c16 	blt	r4,zero,1732c <__divsi3+0x44>
   172fc:	000d883a 	mov	r6,zero
   17300:	28000e16 	blt	r5,zero,1733c <__divsi3+0x54>
   17304:	001726c0 	call	1726c <udivmodsi4>
   17308:	1007883a 	mov	r3,r2
   1730c:	8005003a 	cmpeq	r2,r16,zero
   17310:	1000011e 	bne	r2,zero,17318 <__divsi3+0x30>
   17314:	00c7c83a 	sub	r3,zero,r3
   17318:	1805883a 	mov	r2,r3
   1731c:	dfc00117 	ldw	ra,4(sp)
   17320:	dc000017 	ldw	r16,0(sp)
   17324:	dec00204 	addi	sp,sp,8
   17328:	f800283a 	ret
   1732c:	0109c83a 	sub	r4,zero,r4
   17330:	04000044 	movi	r16,1
   17334:	000d883a 	mov	r6,zero
   17338:	283ff20e 	bge	r5,zero,17304 <__divsi3+0x1c>
   1733c:	014bc83a 	sub	r5,zero,r5
   17340:	8021003a 	cmpeq	r16,r16,zero
   17344:	003fef06 	br	17304 <__divsi3+0x1c>

00017348 <__modsi3>:
   17348:	deffff04 	addi	sp,sp,-4
   1734c:	dfc00015 	stw	ra,0(sp)
   17350:	01800044 	movi	r6,1
   17354:	2807883a 	mov	r3,r5
   17358:	20000416 	blt	r4,zero,1736c <__modsi3+0x24>
   1735c:	28000c16 	blt	r5,zero,17390 <__modsi3+0x48>
   17360:	dfc00017 	ldw	ra,0(sp)
   17364:	dec00104 	addi	sp,sp,4
   17368:	001726c1 	jmpi	1726c <udivmodsi4>
   1736c:	0109c83a 	sub	r4,zero,r4
   17370:	28000b16 	blt	r5,zero,173a0 <__modsi3+0x58>
   17374:	180b883a 	mov	r5,r3
   17378:	01800044 	movi	r6,1
   1737c:	001726c0 	call	1726c <udivmodsi4>
   17380:	0085c83a 	sub	r2,zero,r2
   17384:	dfc00017 	ldw	ra,0(sp)
   17388:	dec00104 	addi	sp,sp,4
   1738c:	f800283a 	ret
   17390:	014bc83a 	sub	r5,zero,r5
   17394:	dfc00017 	ldw	ra,0(sp)
   17398:	dec00104 	addi	sp,sp,4
   1739c:	001726c1 	jmpi	1726c <udivmodsi4>
   173a0:	0147c83a 	sub	r3,zero,r5
   173a4:	003ff306 	br	17374 <__modsi3+0x2c>

000173a8 <__udivsi3>:
   173a8:	000d883a 	mov	r6,zero
   173ac:	001726c1 	jmpi	1726c <udivmodsi4>

000173b0 <__umodsi3>:
   173b0:	01800044 	movi	r6,1
   173b4:	001726c1 	jmpi	1726c <udivmodsi4>

000173b8 <__fpcmp_parts_d>:
   173b8:	21800017 	ldw	r6,0(r4)
   173bc:	00c00044 	movi	r3,1
   173c0:	19800a2e 	bgeu	r3,r6,173ec <__fpcmp_parts_d+0x34>
   173c4:	28800017 	ldw	r2,0(r5)
   173c8:	1880082e 	bgeu	r3,r2,173ec <__fpcmp_parts_d+0x34>
   173cc:	00c00104 	movi	r3,4
   173d0:	30c02626 	beq	r6,r3,1746c <__fpcmp_parts_d+0xb4>
   173d4:	10c02226 	beq	r2,r3,17460 <__fpcmp_parts_d+0xa8>
   173d8:	00c00084 	movi	r3,2
   173dc:	30c00526 	beq	r6,r3,173f4 <__fpcmp_parts_d+0x3c>
   173e0:	10c0071e 	bne	r2,r3,17400 <__fpcmp_parts_d+0x48>
   173e4:	20800117 	ldw	r2,4(r4)
   173e8:	1000091e 	bne	r2,zero,17410 <__fpcmp_parts_d+0x58>
   173ec:	00800044 	movi	r2,1
   173f0:	f800283a 	ret
   173f4:	10c01a1e 	bne	r2,r3,17460 <__fpcmp_parts_d+0xa8>
   173f8:	0005883a 	mov	r2,zero
   173fc:	f800283a 	ret
   17400:	22000117 	ldw	r8,4(r4)
   17404:	28800117 	ldw	r2,4(r5)
   17408:	40800326 	beq	r8,r2,17418 <__fpcmp_parts_d+0x60>
   1740c:	403ff726 	beq	r8,zero,173ec <__fpcmp_parts_d+0x34>
   17410:	00bfffc4 	movi	r2,-1
   17414:	f800283a 	ret
   17418:	20c00217 	ldw	r3,8(r4)
   1741c:	28800217 	ldw	r2,8(r5)
   17420:	10fffa16 	blt	r2,r3,1740c <__fpcmp_parts_d+0x54>
   17424:	18800916 	blt	r3,r2,1744c <__fpcmp_parts_d+0x94>
   17428:	21c00417 	ldw	r7,16(r4)
   1742c:	28c00417 	ldw	r3,16(r5)
   17430:	21800317 	ldw	r6,12(r4)
   17434:	28800317 	ldw	r2,12(r5)
   17438:	19fff436 	bltu	r3,r7,1740c <__fpcmp_parts_d+0x54>
   1743c:	38c00526 	beq	r7,r3,17454 <__fpcmp_parts_d+0x9c>
   17440:	38c00236 	bltu	r7,r3,1744c <__fpcmp_parts_d+0x94>
   17444:	19ffec1e 	bne	r3,r7,173f8 <__fpcmp_parts_d+0x40>
   17448:	30bfeb2e 	bgeu	r6,r2,173f8 <__fpcmp_parts_d+0x40>
   1744c:	403fe71e 	bne	r8,zero,173ec <__fpcmp_parts_d+0x34>
   17450:	003fef06 	br	17410 <__fpcmp_parts_d+0x58>
   17454:	11bffa2e 	bgeu	r2,r6,17440 <__fpcmp_parts_d+0x88>
   17458:	403fe426 	beq	r8,zero,173ec <__fpcmp_parts_d+0x34>
   1745c:	003fec06 	br	17410 <__fpcmp_parts_d+0x58>
   17460:	28800117 	ldw	r2,4(r5)
   17464:	103fe11e 	bne	r2,zero,173ec <__fpcmp_parts_d+0x34>
   17468:	003fe906 	br	17410 <__fpcmp_parts_d+0x58>
   1746c:	11bfdd1e 	bne	r2,r6,173e4 <__fpcmp_parts_d+0x2c>
   17470:	28c00117 	ldw	r3,4(r5)
   17474:	20800117 	ldw	r2,4(r4)
   17478:	1885c83a 	sub	r2,r3,r2
   1747c:	f800283a 	ret

00017480 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   17480:	defffe04 	addi	sp,sp,-8
   17484:	dfc00115 	stw	ra,4(sp)
   17488:	df000015 	stw	fp,0(sp)
   1748c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   17490:	010000b4 	movhi	r4,2
   17494:	21266304 	addi	r4,r4,-26228
   17498:	014000b4 	movhi	r5,2
   1749c:	2964a604 	addi	r5,r5,-28008
   174a0:	018000b4 	movhi	r6,2
   174a4:	31a66304 	addi	r6,r6,-26228
   174a8:	00175000 	call	17500 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   174ac:	01000074 	movhi	r4,1
   174b0:	21000804 	addi	r4,r4,32
   174b4:	01400074 	movhi	r5,1
   174b8:	29400804 	addi	r5,r5,32
   174bc:	01800074 	movhi	r6,1
   174c0:	31806d04 	addi	r6,r6,436
   174c4:	00175000 	call	17500 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   174c8:	010000b4 	movhi	r4,2
   174cc:	2123f304 	addi	r4,r4,-28724
   174d0:	014000b4 	movhi	r5,2
   174d4:	2963f304 	addi	r5,r5,-28724
   174d8:	018000b4 	movhi	r6,2
   174dc:	31a4a604 	addi	r6,r6,-28008
   174e0:	00175000 	call	17500 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   174e4:	0017ee80 	call	17ee8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   174e8:	00180440 	call	18044 <alt_icache_flush_all>
}
   174ec:	e037883a 	mov	sp,fp
   174f0:	dfc00117 	ldw	ra,4(sp)
   174f4:	df000017 	ldw	fp,0(sp)
   174f8:	dec00204 	addi	sp,sp,8
   174fc:	f800283a 	ret

00017500 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   17500:	defffc04 	addi	sp,sp,-16
   17504:	df000315 	stw	fp,12(sp)
   17508:	df000304 	addi	fp,sp,12
   1750c:	e13ffd15 	stw	r4,-12(fp)
   17510:	e17ffe15 	stw	r5,-8(fp)
   17514:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   17518:	e0fffe17 	ldw	r3,-8(fp)
   1751c:	e0bffd17 	ldw	r2,-12(fp)
   17520:	18800e26 	beq	r3,r2,1755c <alt_load_section+0x5c>
  {
    while( to != end )
   17524:	00000a06 	br	17550 <alt_load_section+0x50>
    {
      *to++ = *from++;
   17528:	e0bffd17 	ldw	r2,-12(fp)
   1752c:	10c00017 	ldw	r3,0(r2)
   17530:	e0bffe17 	ldw	r2,-8(fp)
   17534:	10c00015 	stw	r3,0(r2)
   17538:	e0bffe17 	ldw	r2,-8(fp)
   1753c:	10800104 	addi	r2,r2,4
   17540:	e0bffe15 	stw	r2,-8(fp)
   17544:	e0bffd17 	ldw	r2,-12(fp)
   17548:	10800104 	addi	r2,r2,4
   1754c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   17550:	e0fffe17 	ldw	r3,-8(fp)
   17554:	e0bfff17 	ldw	r2,-4(fp)
   17558:	18bff31e 	bne	r3,r2,17528 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   1755c:	e037883a 	mov	sp,fp
   17560:	df000017 	ldw	fp,0(sp)
   17564:	dec00104 	addi	sp,sp,4
   17568:	f800283a 	ret

0001756c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1756c:	defffd04 	addi	sp,sp,-12
   17570:	dfc00215 	stw	ra,8(sp)
   17574:	df000115 	stw	fp,4(sp)
   17578:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1757c:	0009883a 	mov	r4,zero
   17580:	001797c0 	call	1797c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   17584:	00179b00 	call	179b0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   17588:	010000b4 	movhi	r4,2
   1758c:	21249b04 	addi	r4,r4,-28052
   17590:	014000b4 	movhi	r5,2
   17594:	29649b04 	addi	r5,r5,-28052
   17598:	018000b4 	movhi	r6,2
   1759c:	31a49b04 	addi	r6,r6,-28052
   175a0:	00184180 	call	18418 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   175a4:	d121cf17 	ldw	r4,-30916(gp)
   175a8:	d161d017 	ldw	r5,-30912(gp)
   175ac:	d1a1d117 	ldw	r6,-30908(gp)
   175b0:	00103a80 	call	103a8 <main>
   175b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   175b8:	01000044 	movi	r4,1
   175bc:	0017d880 	call	17d88 <close>
  exit (result);
   175c0:	e13fff17 	ldw	r4,-4(fp)
   175c4:	0018cc40 	call	18cc4 <exit>

000175c8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   175c8:	defffe04 	addi	sp,sp,-8
   175cc:	df000115 	stw	fp,4(sp)
   175d0:	df000104 	addi	fp,sp,4
   175d4:	e13fff15 	stw	r4,-4(fp)
}
   175d8:	e037883a 	mov	sp,fp
   175dc:	df000017 	ldw	fp,0(sp)
   175e0:	dec00104 	addi	sp,sp,4
   175e4:	f800283a 	ret

000175e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   175e8:	defffe04 	addi	sp,sp,-8
   175ec:	df000115 	stw	fp,4(sp)
   175f0:	df000104 	addi	fp,sp,4
   175f4:	e13fff15 	stw	r4,-4(fp)
}
   175f8:	e037883a 	mov	sp,fp
   175fc:	df000017 	ldw	fp,0(sp)
   17600:	dec00104 	addi	sp,sp,4
   17604:	f800283a 	ret

00017608 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   17608:	defffd04 	addi	sp,sp,-12
   1760c:	dfc00215 	stw	ra,8(sp)
   17610:	df000115 	stw	fp,4(sp)
   17614:	df000104 	addi	fp,sp,4
   17618:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   1761c:	008000b4 	movhi	r2,2
   17620:	10a65504 	addi	r2,r2,-26284
   17624:	10800017 	ldw	r2,0(r2)
   17628:	11400217 	ldw	r5,8(r2)
   1762c:	e13fff17 	ldw	r4,-4(fp)
   17630:	0018ce40 	call	18ce4 <fputs>
#endif
}
   17634:	e037883a 	mov	sp,fp
   17638:	dfc00117 	ldw	ra,4(sp)
   1763c:	df000017 	ldw	fp,0(sp)
   17640:	dec00204 	addi	sp,sp,8
   17644:	f800283a 	ret

00017648 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   17648:	defff804 	addi	sp,sp,-32
   1764c:	df000715 	stw	fp,28(sp)
   17650:	df000704 	addi	fp,sp,28
   17654:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17658:	0005303a 	rdctl	r2,status
   1765c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17660:	e0fffb17 	ldw	r3,-20(fp)
   17664:	00bfff84 	movi	r2,-2
   17668:	1884703a 	and	r2,r3,r2
   1766c:	1001703a 	wrctl	status,r2
  
  return context;
   17670:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   17674:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   17678:	d0a00417 	ldw	r2,-32752(gp)
   1767c:	10c000c4 	addi	r3,r2,3
   17680:	00bfff04 	movi	r2,-4
   17684:	1884703a 	and	r2,r3,r2
   17688:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1768c:	d0e00417 	ldw	r3,-32752(gp)
   17690:	e0bffe17 	ldw	r2,-8(fp)
   17694:	1887883a 	add	r3,r3,r2
   17698:	008000b4 	movhi	r2,2
   1769c:	10abf204 	addi	r2,r2,-20536
   176a0:	10c0072e 	bgeu	r2,r3,176c0 <sbrk+0x78>
   176a4:	e0bffd17 	ldw	r2,-12(fp)
   176a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   176ac:	e0bffa17 	ldw	r2,-24(fp)
   176b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   176b4:	00bfffc4 	movi	r2,-1
   176b8:	e0bfff15 	stw	r2,-4(fp)
   176bc:	00000c06 	br	176f0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   176c0:	d0a00417 	ldw	r2,-32752(gp)
   176c4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   176c8:	d0e00417 	ldw	r3,-32752(gp)
   176cc:	e0bffe17 	ldw	r2,-8(fp)
   176d0:	1885883a 	add	r2,r3,r2
   176d4:	d0a00415 	stw	r2,-32752(gp)
   176d8:	e0bffd17 	ldw	r2,-12(fp)
   176dc:	e0bff915 	stw	r2,-28(fp)
   176e0:	e0bff917 	ldw	r2,-28(fp)
   176e4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   176e8:	e0bffc17 	ldw	r2,-16(fp)
   176ec:	e0bfff15 	stw	r2,-4(fp)
   176f0:	e0bfff17 	ldw	r2,-4(fp)
} 
   176f4:	e037883a 	mov	sp,fp
   176f8:	df000017 	ldw	fp,0(sp)
   176fc:	dec00104 	addi	sp,sp,4
   17700:	f800283a 	ret

00017704 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   17704:	defffb04 	addi	sp,sp,-20
   17708:	dfc00415 	stw	ra,16(sp)
   1770c:	df000315 	stw	fp,12(sp)
   17710:	df000304 	addi	fp,sp,12
   17714:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   17718:	008000b4 	movhi	r2,2
   1771c:	10a82904 	addi	r2,r2,-24412
   17720:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
   17724:	e0bffd15 	stw	r2,-12(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   17728:	008000b4 	movhi	r2,2
   1772c:	10a82804 	addi	r2,r2,-24416
   17730:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   17734:	1004c03a 	cmpne	r2,r2,zero
   17738:	1000061e 	bne	r2,zero,17754 <times+0x50>
  {
    ALT_ERRNO = ENOSYS;
   1773c:	00177980 	call	17798 <alt_get_errno>
   17740:	1007883a 	mov	r3,r2
   17744:	00801604 	movi	r2,88
   17748:	18800015 	stw	r2,0(r3)
    return 0;
   1774c:	e03fff15 	stw	zero,-4(fp)
   17750:	00000b06 	br	17780 <times+0x7c>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   17754:	e0bffe17 	ldw	r2,-8(fp)
   17758:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   1775c:	e0fffe17 	ldw	r3,-8(fp)
   17760:	e0bffd17 	ldw	r2,-12(fp)
   17764:	18800115 	stw	r2,4(r3)
  buf->tms_cutime = 0;
   17768:	e0bffe17 	ldw	r2,-8(fp)
   1776c:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   17770:	e0bffe17 	ldw	r2,-8(fp)
   17774:	10000315 	stw	zero,12(r2)

  return ticks;
   17778:	e0bffd17 	ldw	r2,-12(fp)
   1777c:	e0bfff15 	stw	r2,-4(fp)
   17780:	e0bfff17 	ldw	r2,-4(fp)
}
   17784:	e037883a 	mov	sp,fp
   17788:	dfc00117 	ldw	ra,4(sp)
   1778c:	df000017 	ldw	fp,0(sp)
   17790:	dec00204 	addi	sp,sp,8
   17794:	f800283a 	ret

00017798 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17798:	defffd04 	addi	sp,sp,-12
   1779c:	dfc00215 	stw	ra,8(sp)
   177a0:	df000115 	stw	fp,4(sp)
   177a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   177a8:	008000b4 	movhi	r2,2
   177ac:	10a65f04 	addi	r2,r2,-26244
   177b0:	10800017 	ldw	r2,0(r2)
   177b4:	1005003a 	cmpeq	r2,r2,zero
   177b8:	1000061e 	bne	r2,zero,177d4 <alt_get_errno+0x3c>
   177bc:	008000b4 	movhi	r2,2
   177c0:	10a65f04 	addi	r2,r2,-26244
   177c4:	10800017 	ldw	r2,0(r2)
   177c8:	103ee83a 	callr	r2
   177cc:	e0bfff15 	stw	r2,-4(fp)
   177d0:	00000306 	br	177e0 <alt_get_errno+0x48>
   177d4:	008000b4 	movhi	r2,2
   177d8:	10a82004 	addi	r2,r2,-24448
   177dc:	e0bfff15 	stw	r2,-4(fp)
   177e0:	e0bfff17 	ldw	r2,-4(fp)
}
   177e4:	e037883a 	mov	sp,fp
   177e8:	dfc00117 	ldw	ra,4(sp)
   177ec:	df000017 	ldw	fp,0(sp)
   177f0:	dec00204 	addi	sp,sp,8
   177f4:	f800283a 	ret

000177f8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   177f8:	defff704 	addi	sp,sp,-36
   177fc:	dfc00815 	stw	ra,32(sp)
   17800:	df000715 	stw	fp,28(sp)
   17804:	df000704 	addi	fp,sp,28
   17808:	e13ffb15 	stw	r4,-20(fp)
   1780c:	e17ffc15 	stw	r5,-16(fp)
   17810:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17814:	e0bffb17 	ldw	r2,-20(fp)
   17818:	1004803a 	cmplt	r2,r2,zero
   1781c:	1000091e 	bne	r2,zero,17844 <write+0x4c>
   17820:	e13ffb17 	ldw	r4,-20(fp)
   17824:	01400304 	movi	r5,12
   17828:	0011c3c0 	call	11c3c <__mulsi3>
   1782c:	1007883a 	mov	r3,r2
   17830:	008000b4 	movhi	r2,2
   17834:	10a5f504 	addi	r2,r2,-26668
   17838:	1887883a 	add	r3,r3,r2
   1783c:	e0ffff15 	stw	r3,-4(fp)
   17840:	00000106 	br	17848 <write+0x50>
   17844:	e03fff15 	stw	zero,-4(fp)
   17848:	e0bfff17 	ldw	r2,-4(fp)
   1784c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   17850:	e0bffa17 	ldw	r2,-24(fp)
   17854:	1005003a 	cmpeq	r2,r2,zero
   17858:	1000241e 	bne	r2,zero,178ec <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1785c:	e0bffa17 	ldw	r2,-24(fp)
   17860:	10800217 	ldw	r2,8(r2)
   17864:	108000cc 	andi	r2,r2,3
   17868:	1005003a 	cmpeq	r2,r2,zero
   1786c:	10001a1e 	bne	r2,zero,178d8 <write+0xe0>
   17870:	e0bffa17 	ldw	r2,-24(fp)
   17874:	10800017 	ldw	r2,0(r2)
   17878:	10800617 	ldw	r2,24(r2)
   1787c:	1005003a 	cmpeq	r2,r2,zero
   17880:	1000151e 	bne	r2,zero,178d8 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   17884:	e0bffa17 	ldw	r2,-24(fp)
   17888:	10800017 	ldw	r2,0(r2)
   1788c:	10800617 	ldw	r2,24(r2)
   17890:	e17ffc17 	ldw	r5,-16(fp)
   17894:	e1bffd17 	ldw	r6,-12(fp)
   17898:	e13ffa17 	ldw	r4,-24(fp)
   1789c:	103ee83a 	callr	r2
   178a0:	e0bff915 	stw	r2,-28(fp)
   178a4:	e0bff917 	ldw	r2,-28(fp)
   178a8:	1004403a 	cmpge	r2,r2,zero
   178ac:	1000071e 	bne	r2,zero,178cc <write+0xd4>
      {
        ALT_ERRNO = -rval;
   178b0:	001791c0 	call	1791c <alt_get_errno>
   178b4:	e0fff917 	ldw	r3,-28(fp)
   178b8:	00c7c83a 	sub	r3,zero,r3
   178bc:	10c00015 	stw	r3,0(r2)
        return -1;
   178c0:	00bfffc4 	movi	r2,-1
   178c4:	e0bffe15 	stw	r2,-8(fp)
   178c8:	00000e06 	br	17904 <write+0x10c>
      }
      return rval;
   178cc:	e0bff917 	ldw	r2,-28(fp)
   178d0:	e0bffe15 	stw	r2,-8(fp)
   178d4:	00000b06 	br	17904 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   178d8:	001791c0 	call	1791c <alt_get_errno>
   178dc:	1007883a 	mov	r3,r2
   178e0:	00800344 	movi	r2,13
   178e4:	18800015 	stw	r2,0(r3)
   178e8:	00000406 	br	178fc <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   178ec:	001791c0 	call	1791c <alt_get_errno>
   178f0:	1007883a 	mov	r3,r2
   178f4:	00801444 	movi	r2,81
   178f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   178fc:	00bfffc4 	movi	r2,-1
   17900:	e0bffe15 	stw	r2,-8(fp)
   17904:	e0bffe17 	ldw	r2,-8(fp)
}
   17908:	e037883a 	mov	sp,fp
   1790c:	dfc00117 	ldw	ra,4(sp)
   17910:	df000017 	ldw	fp,0(sp)
   17914:	dec00204 	addi	sp,sp,8
   17918:	f800283a 	ret

0001791c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1791c:	defffd04 	addi	sp,sp,-12
   17920:	dfc00215 	stw	ra,8(sp)
   17924:	df000115 	stw	fp,4(sp)
   17928:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1792c:	008000b4 	movhi	r2,2
   17930:	10a65f04 	addi	r2,r2,-26244
   17934:	10800017 	ldw	r2,0(r2)
   17938:	1005003a 	cmpeq	r2,r2,zero
   1793c:	1000061e 	bne	r2,zero,17958 <alt_get_errno+0x3c>
   17940:	008000b4 	movhi	r2,2
   17944:	10a65f04 	addi	r2,r2,-26244
   17948:	10800017 	ldw	r2,0(r2)
   1794c:	103ee83a 	callr	r2
   17950:	e0bfff15 	stw	r2,-4(fp)
   17954:	00000306 	br	17964 <alt_get_errno+0x48>
   17958:	008000b4 	movhi	r2,2
   1795c:	10a82004 	addi	r2,r2,-24448
   17960:	e0bfff15 	stw	r2,-4(fp)
   17964:	e0bfff17 	ldw	r2,-4(fp)
}
   17968:	e037883a 	mov	sp,fp
   1796c:	dfc00117 	ldw	ra,4(sp)
   17970:	df000017 	ldw	fp,0(sp)
   17974:	dec00204 	addi	sp,sp,8
   17978:	f800283a 	ret

0001797c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1797c:	defffd04 	addi	sp,sp,-12
   17980:	dfc00215 	stw	ra,8(sp)
   17984:	df000115 	stw	fp,4(sp)
   17988:	df000104 	addi	fp,sp,4
   1798c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   17990:	00189900 	call	18990 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   17994:	00800044 	movi	r2,1
   17998:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1799c:	e037883a 	mov	sp,fp
   179a0:	dfc00117 	ldw	ra,4(sp)
   179a4:	df000017 	ldw	fp,0(sp)
   179a8:	dec00204 	addi	sp,sp,8
   179ac:	f800283a 	ret

000179b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   179b0:	defffe04 	addi	sp,sp,-8
   179b4:	dfc00115 	stw	ra,4(sp)
   179b8:	df000015 	stw	fp,0(sp)
   179bc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   179c0:	010000b4 	movhi	r4,2
   179c4:	21040004 	addi	r4,r4,4096
   179c8:	000b883a 	mov	r5,zero
   179cc:	01800044 	movi	r6,1
   179d0:	01c0fa04 	movi	r7,1000
   179d4:	0017cf80 	call	17cf8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   179d8:	010000b4 	movhi	r4,2
   179dc:	2125e004 	addi	r4,r4,-26752
   179e0:	00179f80 	call	179f8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   179e4:	e037883a 	mov	sp,fp
   179e8:	dfc00117 	ldw	ra,4(sp)
   179ec:	df000017 	ldw	fp,0(sp)
   179f0:	dec00204 	addi	sp,sp,8
   179f4:	f800283a 	ret

000179f8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   179f8:	defffd04 	addi	sp,sp,-12
   179fc:	dfc00215 	stw	ra,8(sp)
   17a00:	df000115 	stw	fp,4(sp)
   17a04:	df000104 	addi	fp,sp,4
   17a08:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   17a0c:	e13fff17 	ldw	r4,-4(fp)
   17a10:	014000b4 	movhi	r5,2
   17a14:	29665c04 	addi	r5,r5,-26256
   17a18:	0017f300 	call	17f30 <alt_dev_llist_insert>
}
   17a1c:	e037883a 	mov	sp,fp
   17a20:	dfc00117 	ldw	ra,4(sp)
   17a24:	df000017 	ldw	fp,0(sp)
   17a28:	dec00204 	addi	sp,sp,8
   17a2c:	f800283a 	ret

00017a30 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   17a30:	defffa04 	addi	sp,sp,-24
   17a34:	dfc00515 	stw	ra,20(sp)
   17a38:	df000415 	stw	fp,16(sp)
   17a3c:	df000404 	addi	fp,sp,16
   17a40:	e13ffd15 	stw	r4,-12(fp)
   17a44:	e17ffe15 	stw	r5,-8(fp)
   17a48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17a4c:	e0bffd17 	ldw	r2,-12(fp)
   17a50:	10800017 	ldw	r2,0(r2)
   17a54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   17a58:	e0bffc17 	ldw	r2,-16(fp)
   17a5c:	11000a04 	addi	r4,r2,40
   17a60:	e0bffd17 	ldw	r2,-12(fp)
   17a64:	11c00217 	ldw	r7,8(r2)
   17a68:	e17ffe17 	ldw	r5,-8(fp)
   17a6c:	e1bfff17 	ldw	r6,-4(fp)
   17a70:	0017ae00 	call	17ae0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   17a74:	e037883a 	mov	sp,fp
   17a78:	dfc00117 	ldw	ra,4(sp)
   17a7c:	df000017 	ldw	fp,0(sp)
   17a80:	dec00204 	addi	sp,sp,8
   17a84:	f800283a 	ret

00017a88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   17a88:	defffa04 	addi	sp,sp,-24
   17a8c:	dfc00515 	stw	ra,20(sp)
   17a90:	df000415 	stw	fp,16(sp)
   17a94:	df000404 	addi	fp,sp,16
   17a98:	e13ffd15 	stw	r4,-12(fp)
   17a9c:	e17ffe15 	stw	r5,-8(fp)
   17aa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17aa4:	e0bffd17 	ldw	r2,-12(fp)
   17aa8:	10800017 	ldw	r2,0(r2)
   17aac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   17ab0:	e0bffc17 	ldw	r2,-16(fp)
   17ab4:	11000a04 	addi	r4,r2,40
   17ab8:	e0bffd17 	ldw	r2,-12(fp)
   17abc:	11c00217 	ldw	r7,8(r2)
   17ac0:	e17ffe17 	ldw	r5,-8(fp)
   17ac4:	e1bfff17 	ldw	r6,-4(fp)
   17ac8:	0017be40 	call	17be4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   17acc:	e037883a 	mov	sp,fp
   17ad0:	dfc00117 	ldw	ra,4(sp)
   17ad4:	df000017 	ldw	fp,0(sp)
   17ad8:	dec00204 	addi	sp,sp,8
   17adc:	f800283a 	ret

00017ae0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   17ae0:	defff604 	addi	sp,sp,-40
   17ae4:	df000915 	stw	fp,36(sp)
   17ae8:	df000904 	addi	fp,sp,36
   17aec:	e13ffb15 	stw	r4,-20(fp)
   17af0:	e17ffc15 	stw	r5,-16(fp)
   17af4:	e1bffd15 	stw	r6,-12(fp)
   17af8:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   17afc:	e0bffb17 	ldw	r2,-20(fp)
   17b00:	10800017 	ldw	r2,0(r2)
   17b04:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   17b08:	e0bffc17 	ldw	r2,-16(fp)
   17b0c:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   17b10:	e0bffd17 	ldw	r2,-12(fp)
   17b14:	1007883a 	mov	r3,r2
   17b18:	e0bffc17 	ldw	r2,-16(fp)
   17b1c:	10c5883a 	add	r2,r2,r3
   17b20:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   17b24:	00001606 	br	17b80 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   17b28:	e0bffa17 	ldw	r2,-24(fp)
   17b2c:	10800037 	ldwio	r2,0(r2)
   17b30:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   17b34:	e0bff717 	ldw	r2,-36(fp)
   17b38:	10a0000c 	andi	r2,r2,32768
   17b3c:	1005003a 	cmpeq	r2,r2,zero
   17b40:	1000081e 	bne	r2,zero,17b64 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   17b44:	e0bff717 	ldw	r2,-36(fp)
   17b48:	1007883a 	mov	r3,r2
   17b4c:	e0bff917 	ldw	r2,-28(fp)
   17b50:	10c00005 	stb	r3,0(r2)
   17b54:	e0bff917 	ldw	r2,-28(fp)
   17b58:	10800044 	addi	r2,r2,1
   17b5c:	e0bff915 	stw	r2,-28(fp)
   17b60:	00000706 	br	17b80 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   17b64:	e0fff917 	ldw	r3,-28(fp)
   17b68:	e0bffc17 	ldw	r2,-16(fp)
   17b6c:	1880071e 	bne	r3,r2,17b8c <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   17b70:	e0bffe17 	ldw	r2,-8(fp)
   17b74:	1090000c 	andi	r2,r2,16384
   17b78:	1004c03a 	cmpne	r2,r2,zero
   17b7c:	1000031e 	bne	r2,zero,17b8c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   17b80:	e0fff917 	ldw	r3,-28(fp)
   17b84:	e0bff817 	ldw	r2,-32(fp)
   17b88:	18bfe736 	bltu	r3,r2,17b28 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   17b8c:	e0fff917 	ldw	r3,-28(fp)
   17b90:	e0bffc17 	ldw	r2,-16(fp)
   17b94:	18800526 	beq	r3,r2,17bac <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   17b98:	e0fff917 	ldw	r3,-28(fp)
   17b9c:	e0bffc17 	ldw	r2,-16(fp)
   17ba0:	1887c83a 	sub	r3,r3,r2
   17ba4:	e0ffff15 	stw	r3,-4(fp)
   17ba8:	00000906 	br	17bd0 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   17bac:	e0bffe17 	ldw	r2,-8(fp)
   17bb0:	1090000c 	andi	r2,r2,16384
   17bb4:	1005003a 	cmpeq	r2,r2,zero
   17bb8:	1000031e 	bne	r2,zero,17bc8 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   17bbc:	00bffd44 	movi	r2,-11
   17bc0:	e0bfff15 	stw	r2,-4(fp)
   17bc4:	00000206 	br	17bd0 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   17bc8:	00bffec4 	movi	r2,-5
   17bcc:	e0bfff15 	stw	r2,-4(fp)
   17bd0:	e0bfff17 	ldw	r2,-4(fp)
}
   17bd4:	e037883a 	mov	sp,fp
   17bd8:	df000017 	ldw	fp,0(sp)
   17bdc:	dec00104 	addi	sp,sp,4
   17be0:	f800283a 	ret

00017be4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   17be4:	defff904 	addi	sp,sp,-28
   17be8:	df000615 	stw	fp,24(sp)
   17bec:	df000604 	addi	fp,sp,24
   17bf0:	e13ffc15 	stw	r4,-16(fp)
   17bf4:	e17ffd15 	stw	r5,-12(fp)
   17bf8:	e1bffe15 	stw	r6,-8(fp)
   17bfc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   17c00:	e0bffc17 	ldw	r2,-16(fp)
   17c04:	10800017 	ldw	r2,0(r2)
   17c08:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   17c0c:	e0bffe17 	ldw	r2,-8(fp)
   17c10:	1007883a 	mov	r3,r2
   17c14:	e0bffd17 	ldw	r2,-12(fp)
   17c18:	10c5883a 	add	r2,r2,r3
   17c1c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   17c20:	00001106 	br	17c68 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   17c24:	e0bffb17 	ldw	r2,-20(fp)
   17c28:	10800104 	addi	r2,r2,4
   17c2c:	10800037 	ldwio	r2,0(r2)
   17c30:	10bfffec 	andhi	r2,r2,65535
   17c34:	1005003a 	cmpeq	r2,r2,zero
   17c38:	10000b1e 	bne	r2,zero,17c68 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   17c3c:	e13ffb17 	ldw	r4,-20(fp)
   17c40:	e0bffd17 	ldw	r2,-12(fp)
   17c44:	10800003 	ldbu	r2,0(r2)
   17c48:	10c03fcc 	andi	r3,r2,255
   17c4c:	18c0201c 	xori	r3,r3,128
   17c50:	18ffe004 	addi	r3,r3,-128
   17c54:	e0bffd17 	ldw	r2,-12(fp)
   17c58:	10800044 	addi	r2,r2,1
   17c5c:	e0bffd15 	stw	r2,-12(fp)
   17c60:	2005883a 	mov	r2,r4
   17c64:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   17c68:	e0fffd17 	ldw	r3,-12(fp)
   17c6c:	e0bffa17 	ldw	r2,-24(fp)
   17c70:	18bfec36 	bltu	r3,r2,17c24 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   17c74:	e0bffe17 	ldw	r2,-8(fp)
}
   17c78:	e037883a 	mov	sp,fp
   17c7c:	df000017 	ldw	fp,0(sp)
   17c80:	dec00104 	addi	sp,sp,4
   17c84:	f800283a 	ret

00017c88 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   17c88:	defffa04 	addi	sp,sp,-24
   17c8c:	dfc00515 	stw	ra,20(sp)
   17c90:	df000415 	stw	fp,16(sp)
   17c94:	df000404 	addi	fp,sp,16
   17c98:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   17c9c:	e0bfff17 	ldw	r2,-4(fp)
   17ca0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   17ca4:	e0bfff17 	ldw	r2,-4(fp)
   17ca8:	10800104 	addi	r2,r2,4
   17cac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17cb0:	0005303a 	rdctl	r2,status
   17cb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17cb8:	e0fffd17 	ldw	r3,-12(fp)
   17cbc:	00bfff84 	movi	r2,-2
   17cc0:	1884703a 	and	r2,r3,r2
   17cc4:	1001703a 	wrctl	status,r2
  
  return context;
   17cc8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   17ccc:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   17cd0:	00188840 	call	18884 <alt_tick>
   17cd4:	e0bffe17 	ldw	r2,-8(fp)
   17cd8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17cdc:	e0bffc17 	ldw	r2,-16(fp)
   17ce0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   17ce4:	e037883a 	mov	sp,fp
   17ce8:	dfc00117 	ldw	ra,4(sp)
   17cec:	df000017 	ldw	fp,0(sp)
   17cf0:	dec00204 	addi	sp,sp,8
   17cf4:	f800283a 	ret

00017cf8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   17cf8:	defff804 	addi	sp,sp,-32
   17cfc:	dfc00715 	stw	ra,28(sp)
   17d00:	df000615 	stw	fp,24(sp)
   17d04:	df000604 	addi	fp,sp,24
   17d08:	e13ffc15 	stw	r4,-16(fp)
   17d0c:	e17ffd15 	stw	r5,-12(fp)
   17d10:	e1bffe15 	stw	r6,-8(fp)
   17d14:	e1ffff15 	stw	r7,-4(fp)
   17d18:	e0bfff17 	ldw	r2,-4(fp)
   17d1c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   17d20:	008000b4 	movhi	r2,2
   17d24:	10a82804 	addi	r2,r2,-24416
   17d28:	10800017 	ldw	r2,0(r2)
   17d2c:	1004c03a 	cmpne	r2,r2,zero
   17d30:	1000041e 	bne	r2,zero,17d44 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   17d34:	00c000b4 	movhi	r3,2
   17d38:	18e82804 	addi	r3,r3,-24416
   17d3c:	e0bffb17 	ldw	r2,-20(fp)
   17d40:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   17d44:	e0bffc17 	ldw	r2,-16(fp)
   17d48:	10800104 	addi	r2,r2,4
   17d4c:	1007883a 	mov	r3,r2
   17d50:	008001c4 	movi	r2,7
   17d54:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   17d58:	d8000015 	stw	zero,0(sp)
   17d5c:	e13ffd17 	ldw	r4,-12(fp)
   17d60:	e17ffe17 	ldw	r5,-8(fp)
   17d64:	01800074 	movhi	r6,1
   17d68:	319f2204 	addi	r6,r6,31880
   17d6c:	e1fffc17 	ldw	r7,-16(fp)
   17d70:	00180740 	call	18074 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   17d74:	e037883a 	mov	sp,fp
   17d78:	dfc00117 	ldw	ra,4(sp)
   17d7c:	df000017 	ldw	fp,0(sp)
   17d80:	dec00204 	addi	sp,sp,8
   17d84:	f800283a 	ret

00017d88 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   17d88:	defff804 	addi	sp,sp,-32
   17d8c:	dfc00715 	stw	ra,28(sp)
   17d90:	df000615 	stw	fp,24(sp)
   17d94:	df000604 	addi	fp,sp,24
   17d98:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   17d9c:	e0bffc17 	ldw	r2,-16(fp)
   17da0:	1004803a 	cmplt	r2,r2,zero
   17da4:	1000091e 	bne	r2,zero,17dcc <close+0x44>
   17da8:	e13ffc17 	ldw	r4,-16(fp)
   17dac:	01400304 	movi	r5,12
   17db0:	0011c3c0 	call	11c3c <__mulsi3>
   17db4:	1007883a 	mov	r3,r2
   17db8:	008000b4 	movhi	r2,2
   17dbc:	10a5f504 	addi	r2,r2,-26668
   17dc0:	1887883a 	add	r3,r3,r2
   17dc4:	e0ffff15 	stw	r3,-4(fp)
   17dc8:	00000106 	br	17dd0 <close+0x48>
   17dcc:	e03fff15 	stw	zero,-4(fp)
   17dd0:	e0bfff17 	ldw	r2,-4(fp)
   17dd4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   17dd8:	e0bffb17 	ldw	r2,-20(fp)
   17ddc:	1005003a 	cmpeq	r2,r2,zero
   17de0:	10001d1e 	bne	r2,zero,17e58 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   17de4:	e0bffb17 	ldw	r2,-20(fp)
   17de8:	10800017 	ldw	r2,0(r2)
   17dec:	10800417 	ldw	r2,16(r2)
   17df0:	1005003a 	cmpeq	r2,r2,zero
   17df4:	1000071e 	bne	r2,zero,17e14 <close+0x8c>
   17df8:	e0bffb17 	ldw	r2,-20(fp)
   17dfc:	10800017 	ldw	r2,0(r2)
   17e00:	10800417 	ldw	r2,16(r2)
   17e04:	e13ffb17 	ldw	r4,-20(fp)
   17e08:	103ee83a 	callr	r2
   17e0c:	e0bffe15 	stw	r2,-8(fp)
   17e10:	00000106 	br	17e18 <close+0x90>
   17e14:	e03ffe15 	stw	zero,-8(fp)
   17e18:	e0bffe17 	ldw	r2,-8(fp)
   17e1c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   17e20:	e13ffc17 	ldw	r4,-16(fp)
   17e24:	00187740 	call	18774 <alt_release_fd>
    if (rval < 0)
   17e28:	e0bffa17 	ldw	r2,-24(fp)
   17e2c:	1004403a 	cmpge	r2,r2,zero
   17e30:	1000071e 	bne	r2,zero,17e50 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   17e34:	0017e880 	call	17e88 <alt_get_errno>
   17e38:	e0fffa17 	ldw	r3,-24(fp)
   17e3c:	00c7c83a 	sub	r3,zero,r3
   17e40:	10c00015 	stw	r3,0(r2)
      return -1;
   17e44:	00bfffc4 	movi	r2,-1
   17e48:	e0bffd15 	stw	r2,-12(fp)
   17e4c:	00000806 	br	17e70 <close+0xe8>
    }
    return 0;
   17e50:	e03ffd15 	stw	zero,-12(fp)
   17e54:	00000606 	br	17e70 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   17e58:	0017e880 	call	17e88 <alt_get_errno>
   17e5c:	1007883a 	mov	r3,r2
   17e60:	00801444 	movi	r2,81
   17e64:	18800015 	stw	r2,0(r3)
    return -1;
   17e68:	00bfffc4 	movi	r2,-1
   17e6c:	e0bffd15 	stw	r2,-12(fp)
   17e70:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   17e74:	e037883a 	mov	sp,fp
   17e78:	dfc00117 	ldw	ra,4(sp)
   17e7c:	df000017 	ldw	fp,0(sp)
   17e80:	dec00204 	addi	sp,sp,8
   17e84:	f800283a 	ret

00017e88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17e88:	defffd04 	addi	sp,sp,-12
   17e8c:	dfc00215 	stw	ra,8(sp)
   17e90:	df000115 	stw	fp,4(sp)
   17e94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   17e98:	008000b4 	movhi	r2,2
   17e9c:	10a65f04 	addi	r2,r2,-26244
   17ea0:	10800017 	ldw	r2,0(r2)
   17ea4:	1005003a 	cmpeq	r2,r2,zero
   17ea8:	1000061e 	bne	r2,zero,17ec4 <alt_get_errno+0x3c>
   17eac:	008000b4 	movhi	r2,2
   17eb0:	10a65f04 	addi	r2,r2,-26244
   17eb4:	10800017 	ldw	r2,0(r2)
   17eb8:	103ee83a 	callr	r2
   17ebc:	e0bfff15 	stw	r2,-4(fp)
   17ec0:	00000306 	br	17ed0 <alt_get_errno+0x48>
   17ec4:	008000b4 	movhi	r2,2
   17ec8:	10a82004 	addi	r2,r2,-24448
   17ecc:	e0bfff15 	stw	r2,-4(fp)
   17ed0:	e0bfff17 	ldw	r2,-4(fp)
}
   17ed4:	e037883a 	mov	sp,fp
   17ed8:	dfc00117 	ldw	ra,4(sp)
   17edc:	df000017 	ldw	fp,0(sp)
   17ee0:	dec00204 	addi	sp,sp,8
   17ee4:	f800283a 	ret

00017ee8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   17ee8:	deffff04 	addi	sp,sp,-4
   17eec:	df000015 	stw	fp,0(sp)
   17ef0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   17ef4:	e037883a 	mov	sp,fp
   17ef8:	df000017 	ldw	fp,0(sp)
   17efc:	dec00104 	addi	sp,sp,4
   17f00:	f800283a 	ret

00017f04 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   17f04:	defffc04 	addi	sp,sp,-16
   17f08:	df000315 	stw	fp,12(sp)
   17f0c:	df000304 	addi	fp,sp,12
   17f10:	e13ffd15 	stw	r4,-12(fp)
   17f14:	e17ffe15 	stw	r5,-8(fp)
   17f18:	e1bfff15 	stw	r6,-4(fp)
  return len;
   17f1c:	e0bfff17 	ldw	r2,-4(fp)
}
   17f20:	e037883a 	mov	sp,fp
   17f24:	df000017 	ldw	fp,0(sp)
   17f28:	dec00104 	addi	sp,sp,4
   17f2c:	f800283a 	ret

00017f30 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   17f30:	defff904 	addi	sp,sp,-28
   17f34:	dfc00615 	stw	ra,24(sp)
   17f38:	df000515 	stw	fp,20(sp)
   17f3c:	df000504 	addi	fp,sp,20
   17f40:	e13ffd15 	stw	r4,-12(fp)
   17f44:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   17f48:	e0bffd17 	ldw	r2,-12(fp)
   17f4c:	1005003a 	cmpeq	r2,r2,zero
   17f50:	1000041e 	bne	r2,zero,17f64 <alt_dev_llist_insert+0x34>
   17f54:	e0bffd17 	ldw	r2,-12(fp)
   17f58:	10800217 	ldw	r2,8(r2)
   17f5c:	1004c03a 	cmpne	r2,r2,zero
   17f60:	1000071e 	bne	r2,zero,17f80 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   17f64:	0017fe40 	call	17fe4 <alt_get_errno>
   17f68:	1007883a 	mov	r3,r2
   17f6c:	00800584 	movi	r2,22
   17f70:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   17f74:	00bffa84 	movi	r2,-22
   17f78:	e0bfff15 	stw	r2,-4(fp)
   17f7c:	00001306 	br	17fcc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   17f80:	e0fffd17 	ldw	r3,-12(fp)
   17f84:	e0bffe17 	ldw	r2,-8(fp)
   17f88:	e0bffb15 	stw	r2,-20(fp)
   17f8c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   17f90:	e0fffc17 	ldw	r3,-16(fp)
   17f94:	e0bffb17 	ldw	r2,-20(fp)
   17f98:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   17f9c:	e0bffb17 	ldw	r2,-20(fp)
   17fa0:	10c00017 	ldw	r3,0(r2)
   17fa4:	e0bffc17 	ldw	r2,-16(fp)
   17fa8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   17fac:	e0bffb17 	ldw	r2,-20(fp)
   17fb0:	10c00017 	ldw	r3,0(r2)
   17fb4:	e0bffc17 	ldw	r2,-16(fp)
   17fb8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   17fbc:	e0fffb17 	ldw	r3,-20(fp)
   17fc0:	e0bffc17 	ldw	r2,-16(fp)
   17fc4:	18800015 	stw	r2,0(r3)

  return 0;  
   17fc8:	e03fff15 	stw	zero,-4(fp)
   17fcc:	e0bfff17 	ldw	r2,-4(fp)
}
   17fd0:	e037883a 	mov	sp,fp
   17fd4:	dfc00117 	ldw	ra,4(sp)
   17fd8:	df000017 	ldw	fp,0(sp)
   17fdc:	dec00204 	addi	sp,sp,8
   17fe0:	f800283a 	ret

00017fe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17fe4:	defffd04 	addi	sp,sp,-12
   17fe8:	dfc00215 	stw	ra,8(sp)
   17fec:	df000115 	stw	fp,4(sp)
   17ff0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   17ff4:	008000b4 	movhi	r2,2
   17ff8:	10a65f04 	addi	r2,r2,-26244
   17ffc:	10800017 	ldw	r2,0(r2)
   18000:	1005003a 	cmpeq	r2,r2,zero
   18004:	1000061e 	bne	r2,zero,18020 <alt_get_errno+0x3c>
   18008:	008000b4 	movhi	r2,2
   1800c:	10a65f04 	addi	r2,r2,-26244
   18010:	10800017 	ldw	r2,0(r2)
   18014:	103ee83a 	callr	r2
   18018:	e0bfff15 	stw	r2,-4(fp)
   1801c:	00000306 	br	1802c <alt_get_errno+0x48>
   18020:	008000b4 	movhi	r2,2
   18024:	10a82004 	addi	r2,r2,-24448
   18028:	e0bfff15 	stw	r2,-4(fp)
   1802c:	e0bfff17 	ldw	r2,-4(fp)
}
   18030:	e037883a 	mov	sp,fp
   18034:	dfc00117 	ldw	ra,4(sp)
   18038:	df000017 	ldw	fp,0(sp)
   1803c:	dec00204 	addi	sp,sp,8
   18040:	f800283a 	ret

00018044 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   18044:	defffe04 	addi	sp,sp,-8
   18048:	dfc00115 	stw	ra,4(sp)
   1804c:	df000015 	stw	fp,0(sp)
   18050:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   18054:	0009883a 	mov	r4,zero
   18058:	01420004 	movi	r5,2048
   1805c:	0018c340 	call	18c34 <alt_icache_flush>
#endif
}
   18060:	e037883a 	mov	sp,fp
   18064:	dfc00117 	ldw	ra,4(sp)
   18068:	df000017 	ldw	fp,0(sp)
   1806c:	dec00204 	addi	sp,sp,8
   18070:	f800283a 	ret

00018074 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   18074:	defff904 	addi	sp,sp,-28
   18078:	dfc00615 	stw	ra,24(sp)
   1807c:	df000515 	stw	fp,20(sp)
   18080:	df000504 	addi	fp,sp,20
   18084:	e13ffc15 	stw	r4,-16(fp)
   18088:	e17ffd15 	stw	r5,-12(fp)
   1808c:	e1bffe15 	stw	r6,-8(fp)
   18090:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   18094:	e0800217 	ldw	r2,8(fp)
   18098:	d8800015 	stw	r2,0(sp)
   1809c:	e13ffc17 	ldw	r4,-16(fp)
   180a0:	e17ffd17 	ldw	r5,-12(fp)
   180a4:	e1bffe17 	ldw	r6,-8(fp)
   180a8:	e1ffff17 	ldw	r7,-4(fp)
   180ac:	00182480 	call	18248 <alt_iic_isr_register>
}  
   180b0:	e037883a 	mov	sp,fp
   180b4:	dfc00117 	ldw	ra,4(sp)
   180b8:	df000017 	ldw	fp,0(sp)
   180bc:	dec00204 	addi	sp,sp,8
   180c0:	f800283a 	ret

000180c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   180c4:	defff904 	addi	sp,sp,-28
   180c8:	df000615 	stw	fp,24(sp)
   180cc:	df000604 	addi	fp,sp,24
   180d0:	e13ffe15 	stw	r4,-8(fp)
   180d4:	e17fff15 	stw	r5,-4(fp)
   180d8:	e0bfff17 	ldw	r2,-4(fp)
   180dc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   180e0:	0005303a 	rdctl	r2,status
   180e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   180e8:	e0fffb17 	ldw	r3,-20(fp)
   180ec:	00bfff84 	movi	r2,-2
   180f0:	1884703a 	and	r2,r3,r2
   180f4:	1001703a 	wrctl	status,r2
  
  return context;
   180f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   180fc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   18100:	e0fffc17 	ldw	r3,-16(fp)
   18104:	00800044 	movi	r2,1
   18108:	10c4983a 	sll	r2,r2,r3
   1810c:	1007883a 	mov	r3,r2
   18110:	008000b4 	movhi	r2,2
   18114:	10a82704 	addi	r2,r2,-24420
   18118:	10800017 	ldw	r2,0(r2)
   1811c:	1886b03a 	or	r3,r3,r2
   18120:	008000b4 	movhi	r2,2
   18124:	10a82704 	addi	r2,r2,-24420
   18128:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1812c:	008000b4 	movhi	r2,2
   18130:	10a82704 	addi	r2,r2,-24420
   18134:	10800017 	ldw	r2,0(r2)
   18138:	100170fa 	wrctl	ienable,r2
   1813c:	e0bffd17 	ldw	r2,-12(fp)
   18140:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18144:	e0bffa17 	ldw	r2,-24(fp)
   18148:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1814c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   18150:	e037883a 	mov	sp,fp
   18154:	df000017 	ldw	fp,0(sp)
   18158:	dec00104 	addi	sp,sp,4
   1815c:	f800283a 	ret

00018160 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   18160:	defff904 	addi	sp,sp,-28
   18164:	df000615 	stw	fp,24(sp)
   18168:	df000604 	addi	fp,sp,24
   1816c:	e13ffe15 	stw	r4,-8(fp)
   18170:	e17fff15 	stw	r5,-4(fp)
   18174:	e0bfff17 	ldw	r2,-4(fp)
   18178:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1817c:	0005303a 	rdctl	r2,status
   18180:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18184:	e0fffb17 	ldw	r3,-20(fp)
   18188:	00bfff84 	movi	r2,-2
   1818c:	1884703a 	and	r2,r3,r2
   18190:	1001703a 	wrctl	status,r2
  
  return context;
   18194:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   18198:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   1819c:	e0fffc17 	ldw	r3,-16(fp)
   181a0:	00800044 	movi	r2,1
   181a4:	10c4983a 	sll	r2,r2,r3
   181a8:	0084303a 	nor	r2,zero,r2
   181ac:	1007883a 	mov	r3,r2
   181b0:	008000b4 	movhi	r2,2
   181b4:	10a82704 	addi	r2,r2,-24420
   181b8:	10800017 	ldw	r2,0(r2)
   181bc:	1886703a 	and	r3,r3,r2
   181c0:	008000b4 	movhi	r2,2
   181c4:	10a82704 	addi	r2,r2,-24420
   181c8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   181cc:	008000b4 	movhi	r2,2
   181d0:	10a82704 	addi	r2,r2,-24420
   181d4:	10800017 	ldw	r2,0(r2)
   181d8:	100170fa 	wrctl	ienable,r2
   181dc:	e0bffd17 	ldw	r2,-12(fp)
   181e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   181e4:	e0bffa17 	ldw	r2,-24(fp)
   181e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   181ec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   181f0:	e037883a 	mov	sp,fp
   181f4:	df000017 	ldw	fp,0(sp)
   181f8:	dec00104 	addi	sp,sp,4
   181fc:	f800283a 	ret

00018200 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   18200:	defffc04 	addi	sp,sp,-16
   18204:	df000315 	stw	fp,12(sp)
   18208:	df000304 	addi	fp,sp,12
   1820c:	e13ffe15 	stw	r4,-8(fp)
   18210:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   18214:	000530fa 	rdctl	r2,ienable
   18218:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1821c:	e0ffff17 	ldw	r3,-4(fp)
   18220:	00800044 	movi	r2,1
   18224:	10c4983a 	sll	r2,r2,r3
   18228:	1007883a 	mov	r3,r2
   1822c:	e0bffd17 	ldw	r2,-12(fp)
   18230:	1884703a 	and	r2,r3,r2
   18234:	1004c03a 	cmpne	r2,r2,zero
}
   18238:	e037883a 	mov	sp,fp
   1823c:	df000017 	ldw	fp,0(sp)
   18240:	dec00104 	addi	sp,sp,4
   18244:	f800283a 	ret

00018248 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   18248:	defff404 	addi	sp,sp,-48
   1824c:	dfc00b15 	stw	ra,44(sp)
   18250:	df000a15 	stw	fp,40(sp)
   18254:	df000a04 	addi	fp,sp,40
   18258:	e13ffb15 	stw	r4,-20(fp)
   1825c:	e17ffc15 	stw	r5,-16(fp)
   18260:	e1bffd15 	stw	r6,-12(fp)
   18264:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   18268:	00bffa84 	movi	r2,-22
   1826c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   18270:	e0bffc17 	ldw	r2,-16(fp)
   18274:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   18278:	e0bff917 	ldw	r2,-28(fp)
   1827c:	10800808 	cmpgei	r2,r2,32
   18280:	1000291e 	bne	r2,zero,18328 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18284:	0005303a 	rdctl	r2,status
   18288:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1828c:	e0fff717 	ldw	r3,-36(fp)
   18290:	00bfff84 	movi	r2,-2
   18294:	1884703a 	and	r2,r3,r2
   18298:	1001703a 	wrctl	status,r2
  
  return context;
   1829c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   182a0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   182a4:	e0bff917 	ldw	r2,-28(fp)
   182a8:	00c000b4 	movhi	r3,2
   182ac:	18e83404 	addi	r3,r3,-24368
   182b0:	100490fa 	slli	r2,r2,3
   182b4:	10c7883a 	add	r3,r2,r3
   182b8:	e0bffd17 	ldw	r2,-12(fp)
   182bc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   182c0:	e0bff917 	ldw	r2,-28(fp)
   182c4:	00c000b4 	movhi	r3,2
   182c8:	18e83404 	addi	r3,r3,-24368
   182cc:	100490fa 	slli	r2,r2,3
   182d0:	10c5883a 	add	r2,r2,r3
   182d4:	10c00104 	addi	r3,r2,4
   182d8:	e0bffe17 	ldw	r2,-8(fp)
   182dc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   182e0:	e0bffd17 	ldw	r2,-12(fp)
   182e4:	1005003a 	cmpeq	r2,r2,zero
   182e8:	1000051e 	bne	r2,zero,18300 <alt_iic_isr_register+0xb8>
   182ec:	e17ff917 	ldw	r5,-28(fp)
   182f0:	e13ffb17 	ldw	r4,-20(fp)
   182f4:	00180c40 	call	180c4 <alt_ic_irq_enable>
   182f8:	e0bfff15 	stw	r2,-4(fp)
   182fc:	00000406 	br	18310 <alt_iic_isr_register+0xc8>
   18300:	e17ff917 	ldw	r5,-28(fp)
   18304:	e13ffb17 	ldw	r4,-20(fp)
   18308:	00181600 	call	18160 <alt_ic_irq_disable>
   1830c:	e0bfff15 	stw	r2,-4(fp)
   18310:	e0bfff17 	ldw	r2,-4(fp)
   18314:	e0bffa15 	stw	r2,-24(fp)
   18318:	e0bff817 	ldw	r2,-32(fp)
   1831c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18320:	e0bff617 	ldw	r2,-40(fp)
   18324:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   18328:	e0bffa17 	ldw	r2,-24(fp)
}
   1832c:	e037883a 	mov	sp,fp
   18330:	dfc00117 	ldw	ra,4(sp)
   18334:	df000017 	ldw	fp,0(sp)
   18338:	dec00204 	addi	sp,sp,8
   1833c:	f800283a 	ret

00018340 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   18340:	defff804 	addi	sp,sp,-32
   18344:	dfc00715 	stw	ra,28(sp)
   18348:	df000615 	stw	fp,24(sp)
   1834c:	dc000515 	stw	r16,20(sp)
   18350:	df000504 	addi	fp,sp,20
   18354:	e13ffc15 	stw	r4,-16(fp)
   18358:	e17ffd15 	stw	r5,-12(fp)
   1835c:	e1bffe15 	stw	r6,-8(fp)
   18360:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   18364:	e13ffd17 	ldw	r4,-12(fp)
   18368:	e17ffe17 	ldw	r5,-8(fp)
   1836c:	e1bfff17 	ldw	r6,-4(fp)
   18370:	00185880 	call	18588 <open>
   18374:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   18378:	e0bffb17 	ldw	r2,-20(fp)
   1837c:	1004803a 	cmplt	r2,r2,zero
   18380:	10001f1e 	bne	r2,zero,18400 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   18384:	e13ffb17 	ldw	r4,-20(fp)
   18388:	040000b4 	movhi	r16,2
   1838c:	8425f504 	addi	r16,r16,-26668
   18390:	01400304 	movi	r5,12
   18394:	0011c3c0 	call	11c3c <__mulsi3>
   18398:	1405883a 	add	r2,r2,r16
   1839c:	10c00017 	ldw	r3,0(r2)
   183a0:	e0bffc17 	ldw	r2,-16(fp)
   183a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   183a8:	e13ffb17 	ldw	r4,-20(fp)
   183ac:	040000b4 	movhi	r16,2
   183b0:	8425f504 	addi	r16,r16,-26668
   183b4:	01400304 	movi	r5,12
   183b8:	0011c3c0 	call	11c3c <__mulsi3>
   183bc:	1405883a 	add	r2,r2,r16
   183c0:	10800104 	addi	r2,r2,4
   183c4:	10c00017 	ldw	r3,0(r2)
   183c8:	e0bffc17 	ldw	r2,-16(fp)
   183cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   183d0:	e13ffb17 	ldw	r4,-20(fp)
   183d4:	040000b4 	movhi	r16,2
   183d8:	8425f504 	addi	r16,r16,-26668
   183dc:	01400304 	movi	r5,12
   183e0:	0011c3c0 	call	11c3c <__mulsi3>
   183e4:	1405883a 	add	r2,r2,r16
   183e8:	10800204 	addi	r2,r2,8
   183ec:	10c00017 	ldw	r3,0(r2)
   183f0:	e0bffc17 	ldw	r2,-16(fp)
   183f4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   183f8:	e13ffb17 	ldw	r4,-20(fp)
   183fc:	00187740 	call	18774 <alt_release_fd>
  }
} 
   18400:	e037883a 	mov	sp,fp
   18404:	dfc00217 	ldw	ra,8(sp)
   18408:	df000117 	ldw	fp,4(sp)
   1840c:	dc000017 	ldw	r16,0(sp)
   18410:	dec00304 	addi	sp,sp,12
   18414:	f800283a 	ret

00018418 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   18418:	defffb04 	addi	sp,sp,-20
   1841c:	dfc00415 	stw	ra,16(sp)
   18420:	df000315 	stw	fp,12(sp)
   18424:	df000304 	addi	fp,sp,12
   18428:	e13ffd15 	stw	r4,-12(fp)
   1842c:	e17ffe15 	stw	r5,-8(fp)
   18430:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   18434:	010000b4 	movhi	r4,2
   18438:	2125f804 	addi	r4,r4,-26656
   1843c:	e17ffd17 	ldw	r5,-12(fp)
   18440:	01800044 	movi	r6,1
   18444:	01c07fc4 	movi	r7,511
   18448:	00183400 	call	18340 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1844c:	010000b4 	movhi	r4,2
   18450:	2125f504 	addi	r4,r4,-26668
   18454:	e17ffe17 	ldw	r5,-8(fp)
   18458:	000d883a 	mov	r6,zero
   1845c:	01c07fc4 	movi	r7,511
   18460:	00183400 	call	18340 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   18464:	010000b4 	movhi	r4,2
   18468:	2125fb04 	addi	r4,r4,-26644
   1846c:	e17fff17 	ldw	r5,-4(fp)
   18470:	01800044 	movi	r6,1
   18474:	01c07fc4 	movi	r7,511
   18478:	00183400 	call	18340 <alt_open_fd>
}  
   1847c:	e037883a 	mov	sp,fp
   18480:	dfc00117 	ldw	ra,4(sp)
   18484:	df000017 	ldw	fp,0(sp)
   18488:	dec00204 	addi	sp,sp,8
   1848c:	f800283a 	ret

00018490 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   18490:	defffa04 	addi	sp,sp,-24
   18494:	dfc00515 	stw	ra,20(sp)
   18498:	df000415 	stw	fp,16(sp)
   1849c:	dc000315 	stw	r16,12(sp)
   184a0:	df000304 	addi	fp,sp,12
   184a4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   184a8:	e0bffe17 	ldw	r2,-8(fp)
   184ac:	10800217 	ldw	r2,8(r2)
   184b0:	10d00034 	orhi	r3,r2,16384
   184b4:	e0bffe17 	ldw	r2,-8(fp)
   184b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   184bc:	e03ffd15 	stw	zero,-12(fp)
   184c0:	00002306 	br	18550 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   184c4:	e13ffd17 	ldw	r4,-12(fp)
   184c8:	040000b4 	movhi	r16,2
   184cc:	8425f504 	addi	r16,r16,-26668
   184d0:	01400304 	movi	r5,12
   184d4:	0011c3c0 	call	11c3c <__mulsi3>
   184d8:	1405883a 	add	r2,r2,r16
   184dc:	10c00017 	ldw	r3,0(r2)
   184e0:	e0bffe17 	ldw	r2,-8(fp)
   184e4:	10800017 	ldw	r2,0(r2)
   184e8:	1880161e 	bne	r3,r2,18544 <alt_file_locked+0xb4>
   184ec:	e13ffd17 	ldw	r4,-12(fp)
   184f0:	040000b4 	movhi	r16,2
   184f4:	8425f504 	addi	r16,r16,-26668
   184f8:	01400304 	movi	r5,12
   184fc:	0011c3c0 	call	11c3c <__mulsi3>
   18500:	1405883a 	add	r2,r2,r16
   18504:	10800204 	addi	r2,r2,8
   18508:	10800017 	ldw	r2,0(r2)
   1850c:	1004403a 	cmpge	r2,r2,zero
   18510:	10000c1e 	bne	r2,zero,18544 <alt_file_locked+0xb4>
   18514:	e13ffd17 	ldw	r4,-12(fp)
   18518:	01400304 	movi	r5,12
   1851c:	0011c3c0 	call	11c3c <__mulsi3>
   18520:	1007883a 	mov	r3,r2
   18524:	008000b4 	movhi	r2,2
   18528:	10a5f504 	addi	r2,r2,-26668
   1852c:	1887883a 	add	r3,r3,r2
   18530:	e0bffe17 	ldw	r2,-8(fp)
   18534:	18800326 	beq	r3,r2,18544 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   18538:	00bffcc4 	movi	r2,-13
   1853c:	e0bfff15 	stw	r2,-4(fp)
   18540:	00000a06 	br	1856c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18544:	e0bffd17 	ldw	r2,-12(fp)
   18548:	10800044 	addi	r2,r2,1
   1854c:	e0bffd15 	stw	r2,-12(fp)
   18550:	008000b4 	movhi	r2,2
   18554:	10a65e04 	addi	r2,r2,-26248
   18558:	10800017 	ldw	r2,0(r2)
   1855c:	1007883a 	mov	r3,r2
   18560:	e0bffd17 	ldw	r2,-12(fp)
   18564:	18bfd72e 	bgeu	r3,r2,184c4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   18568:	e03fff15 	stw	zero,-4(fp)
   1856c:	e0bfff17 	ldw	r2,-4(fp)
}
   18570:	e037883a 	mov	sp,fp
   18574:	dfc00217 	ldw	ra,8(sp)
   18578:	df000117 	ldw	fp,4(sp)
   1857c:	dc000017 	ldw	r16,0(sp)
   18580:	dec00304 	addi	sp,sp,12
   18584:	f800283a 	ret

00018588 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   18588:	defff404 	addi	sp,sp,-48
   1858c:	dfc00b15 	stw	ra,44(sp)
   18590:	df000a15 	stw	fp,40(sp)
   18594:	df000a04 	addi	fp,sp,40
   18598:	e13ffb15 	stw	r4,-20(fp)
   1859c:	e17ffc15 	stw	r5,-16(fp)
   185a0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   185a4:	00bfffc4 	movi	r2,-1
   185a8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   185ac:	00bffb44 	movi	r2,-19
   185b0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   185b4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   185b8:	e13ffb17 	ldw	r4,-20(fp)
   185bc:	014000b4 	movhi	r5,2
   185c0:	29665c04 	addi	r5,r5,-26256
   185c4:	00189b00 	call	189b0 <alt_find_dev>
   185c8:	e0bffa15 	stw	r2,-24(fp)
   185cc:	e0bffa17 	ldw	r2,-24(fp)
   185d0:	1004c03a 	cmpne	r2,r2,zero
   185d4:	1000051e 	bne	r2,zero,185ec <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   185d8:	e13ffb17 	ldw	r4,-20(fp)
   185dc:	0018a440 	call	18a44 <alt_find_file>
   185e0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   185e4:	00800044 	movi	r2,1
   185e8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   185ec:	e0bffa17 	ldw	r2,-24(fp)
   185f0:	1005003a 	cmpeq	r2,r2,zero
   185f4:	1000311e 	bne	r2,zero,186bc <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   185f8:	e13ffa17 	ldw	r4,-24(fp)
   185fc:	0018b640 	call	18b64 <alt_get_fd>
   18600:	e0bff815 	stw	r2,-32(fp)
   18604:	e0bff817 	ldw	r2,-32(fp)
   18608:	1004403a 	cmpge	r2,r2,zero
   1860c:	1000031e 	bne	r2,zero,1861c <open+0x94>
    {
      status = index;
   18610:	e0bff817 	ldw	r2,-32(fp)
   18614:	e0bff715 	stw	r2,-36(fp)
   18618:	00002a06 	br	186c4 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   1861c:	e13ff817 	ldw	r4,-32(fp)
   18620:	01400304 	movi	r5,12
   18624:	0011c3c0 	call	11c3c <__mulsi3>
   18628:	1007883a 	mov	r3,r2
   1862c:	008000b4 	movhi	r2,2
   18630:	10a5f504 	addi	r2,r2,-26668
   18634:	1885883a 	add	r2,r3,r2
   18638:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1863c:	e0fffc17 	ldw	r3,-16(fp)
   18640:	00900034 	movhi	r2,16384
   18644:	10bfffc4 	addi	r2,r2,-1
   18648:	1886703a 	and	r3,r3,r2
   1864c:	e0bff917 	ldw	r2,-28(fp)
   18650:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   18654:	e0bff617 	ldw	r2,-40(fp)
   18658:	1004c03a 	cmpne	r2,r2,zero
   1865c:	1000061e 	bne	r2,zero,18678 <open+0xf0>
   18660:	e13ff917 	ldw	r4,-28(fp)
   18664:	00184900 	call	18490 <alt_file_locked>
   18668:	e0bff715 	stw	r2,-36(fp)
   1866c:	e0bff717 	ldw	r2,-36(fp)
   18670:	1004803a 	cmplt	r2,r2,zero
   18674:	1000131e 	bne	r2,zero,186c4 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   18678:	e0bffa17 	ldw	r2,-24(fp)
   1867c:	10800317 	ldw	r2,12(r2)
   18680:	1005003a 	cmpeq	r2,r2,zero
   18684:	1000091e 	bne	r2,zero,186ac <open+0x124>
   18688:	e0bffa17 	ldw	r2,-24(fp)
   1868c:	10800317 	ldw	r2,12(r2)
   18690:	e13ff917 	ldw	r4,-28(fp)
   18694:	e17ffb17 	ldw	r5,-20(fp)
   18698:	e1bffc17 	ldw	r6,-16(fp)
   1869c:	e1fffd17 	ldw	r7,-12(fp)
   186a0:	103ee83a 	callr	r2
   186a4:	e0bfff15 	stw	r2,-4(fp)
   186a8:	00000106 	br	186b0 <open+0x128>
   186ac:	e03fff15 	stw	zero,-4(fp)
   186b0:	e0bfff17 	ldw	r2,-4(fp)
   186b4:	e0bff715 	stw	r2,-36(fp)
   186b8:	00000206 	br	186c4 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   186bc:	00bffb44 	movi	r2,-19
   186c0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   186c4:	e0bff717 	ldw	r2,-36(fp)
   186c8:	1004403a 	cmpge	r2,r2,zero
   186cc:	1000091e 	bne	r2,zero,186f4 <open+0x16c>
  {
    alt_release_fd (index);  
   186d0:	e13ff817 	ldw	r4,-32(fp)
   186d4:	00187740 	call	18774 <alt_release_fd>
    ALT_ERRNO = -status;
   186d8:	00187140 	call	18714 <alt_get_errno>
   186dc:	e0fff717 	ldw	r3,-36(fp)
   186e0:	00c7c83a 	sub	r3,zero,r3
   186e4:	10c00015 	stw	r3,0(r2)
    return -1;
   186e8:	00bfffc4 	movi	r2,-1
   186ec:	e0bffe15 	stw	r2,-8(fp)
   186f0:	00000206 	br	186fc <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   186f4:	e0bff817 	ldw	r2,-32(fp)
   186f8:	e0bffe15 	stw	r2,-8(fp)
   186fc:	e0bffe17 	ldw	r2,-8(fp)
}
   18700:	e037883a 	mov	sp,fp
   18704:	dfc00117 	ldw	ra,4(sp)
   18708:	df000017 	ldw	fp,0(sp)
   1870c:	dec00204 	addi	sp,sp,8
   18710:	f800283a 	ret

00018714 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18714:	defffd04 	addi	sp,sp,-12
   18718:	dfc00215 	stw	ra,8(sp)
   1871c:	df000115 	stw	fp,4(sp)
   18720:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   18724:	008000b4 	movhi	r2,2
   18728:	10a65f04 	addi	r2,r2,-26244
   1872c:	10800017 	ldw	r2,0(r2)
   18730:	1005003a 	cmpeq	r2,r2,zero
   18734:	1000061e 	bne	r2,zero,18750 <alt_get_errno+0x3c>
   18738:	008000b4 	movhi	r2,2
   1873c:	10a65f04 	addi	r2,r2,-26244
   18740:	10800017 	ldw	r2,0(r2)
   18744:	103ee83a 	callr	r2
   18748:	e0bfff15 	stw	r2,-4(fp)
   1874c:	00000306 	br	1875c <alt_get_errno+0x48>
   18750:	008000b4 	movhi	r2,2
   18754:	10a82004 	addi	r2,r2,-24448
   18758:	e0bfff15 	stw	r2,-4(fp)
   1875c:	e0bfff17 	ldw	r2,-4(fp)
}
   18760:	e037883a 	mov	sp,fp
   18764:	dfc00117 	ldw	ra,4(sp)
   18768:	df000017 	ldw	fp,0(sp)
   1876c:	dec00204 	addi	sp,sp,8
   18770:	f800283a 	ret

00018774 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   18774:	defffc04 	addi	sp,sp,-16
   18778:	dfc00315 	stw	ra,12(sp)
   1877c:	df000215 	stw	fp,8(sp)
   18780:	dc000115 	stw	r16,4(sp)
   18784:	df000104 	addi	fp,sp,4
   18788:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1878c:	e0bfff17 	ldw	r2,-4(fp)
   18790:	108000d0 	cmplti	r2,r2,3
   18794:	10000f1e 	bne	r2,zero,187d4 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   18798:	e13fff17 	ldw	r4,-4(fp)
   1879c:	040000b4 	movhi	r16,2
   187a0:	8425f504 	addi	r16,r16,-26668
   187a4:	01400304 	movi	r5,12
   187a8:	0011c3c0 	call	11c3c <__mulsi3>
   187ac:	1405883a 	add	r2,r2,r16
   187b0:	10800204 	addi	r2,r2,8
   187b4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   187b8:	e13fff17 	ldw	r4,-4(fp)
   187bc:	040000b4 	movhi	r16,2
   187c0:	8425f504 	addi	r16,r16,-26668
   187c4:	01400304 	movi	r5,12
   187c8:	0011c3c0 	call	11c3c <__mulsi3>
   187cc:	1405883a 	add	r2,r2,r16
   187d0:	10000015 	stw	zero,0(r2)
  }
}
   187d4:	e037883a 	mov	sp,fp
   187d8:	dfc00217 	ldw	ra,8(sp)
   187dc:	df000117 	ldw	fp,4(sp)
   187e0:	dc000017 	ldw	r16,0(sp)
   187e4:	dec00304 	addi	sp,sp,12
   187e8:	f800283a 	ret

000187ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   187ec:	defffa04 	addi	sp,sp,-24
   187f0:	df000515 	stw	fp,20(sp)
   187f4:	df000504 	addi	fp,sp,20
   187f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   187fc:	0005303a 	rdctl	r2,status
   18800:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18804:	e0fffd17 	ldw	r3,-12(fp)
   18808:	00bfff84 	movi	r2,-2
   1880c:	1884703a 	and	r2,r3,r2
   18810:	1001703a 	wrctl	status,r2
  
  return context;
   18814:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   18818:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   1881c:	e0bfff17 	ldw	r2,-4(fp)
   18820:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   18824:	e0bffc17 	ldw	r2,-16(fp)
   18828:	10c00017 	ldw	r3,0(r2)
   1882c:	e0bffc17 	ldw	r2,-16(fp)
   18830:	10800117 	ldw	r2,4(r2)
   18834:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   18838:	e0bffc17 	ldw	r2,-16(fp)
   1883c:	10c00117 	ldw	r3,4(r2)
   18840:	e0bffc17 	ldw	r2,-16(fp)
   18844:	10800017 	ldw	r2,0(r2)
   18848:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1884c:	e0fffc17 	ldw	r3,-16(fp)
   18850:	e0bffc17 	ldw	r2,-16(fp)
   18854:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   18858:	e0fffc17 	ldw	r3,-16(fp)
   1885c:	e0bffc17 	ldw	r2,-16(fp)
   18860:	18800015 	stw	r2,0(r3)
   18864:	e0bffe17 	ldw	r2,-8(fp)
   18868:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1886c:	e0bffb17 	ldw	r2,-20(fp)
   18870:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   18874:	e037883a 	mov	sp,fp
   18878:	df000017 	ldw	fp,0(sp)
   1887c:	dec00104 	addi	sp,sp,4
   18880:	f800283a 	ret

00018884 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18884:	defffb04 	addi	sp,sp,-20
   18888:	dfc00415 	stw	ra,16(sp)
   1888c:	df000315 	stw	fp,12(sp)
   18890:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   18894:	d0a00c17 	ldw	r2,-32720(gp)
   18898:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1889c:	d0a1d417 	ldw	r2,-30896(gp)
   188a0:	10800044 	addi	r2,r2,1
   188a4:	d0a1d415 	stw	r2,-30896(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   188a8:	00003106 	br	18970 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   188ac:	e0bffe17 	ldw	r2,-8(fp)
   188b0:	10800017 	ldw	r2,0(r2)
   188b4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   188b8:	e0bffe17 	ldw	r2,-8(fp)
   188bc:	10800403 	ldbu	r2,16(r2)
   188c0:	10803fcc 	andi	r2,r2,255
   188c4:	1005003a 	cmpeq	r2,r2,zero
   188c8:	1000051e 	bne	r2,zero,188e0 <alt_tick+0x5c>
   188cc:	d0a1d417 	ldw	r2,-30896(gp)
   188d0:	1004c03a 	cmpne	r2,r2,zero
   188d4:	1000021e 	bne	r2,zero,188e0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   188d8:	e0bffe17 	ldw	r2,-8(fp)
   188dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   188e0:	e0bffe17 	ldw	r2,-8(fp)
   188e4:	10c00217 	ldw	r3,8(r2)
   188e8:	d0a1d417 	ldw	r2,-30896(gp)
   188ec:	10c01e36 	bltu	r2,r3,18968 <alt_tick+0xe4>
   188f0:	e0bffe17 	ldw	r2,-8(fp)
   188f4:	10800403 	ldbu	r2,16(r2)
   188f8:	10803fcc 	andi	r2,r2,255
   188fc:	1004c03a 	cmpne	r2,r2,zero
   18900:	1000191e 	bne	r2,zero,18968 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   18904:	e0bffe17 	ldw	r2,-8(fp)
   18908:	10c00317 	ldw	r3,12(r2)
   1890c:	e0bffe17 	ldw	r2,-8(fp)
   18910:	11000517 	ldw	r4,20(r2)
   18914:	183ee83a 	callr	r3
   18918:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1891c:	e0bffd17 	ldw	r2,-12(fp)
   18920:	1004c03a 	cmpne	r2,r2,zero
   18924:	1000031e 	bne	r2,zero,18934 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   18928:	e13ffe17 	ldw	r4,-8(fp)
   1892c:	00187ec0 	call	187ec <alt_alarm_stop>
   18930:	00000d06 	br	18968 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   18934:	e0bffe17 	ldw	r2,-8(fp)
   18938:	10c00217 	ldw	r3,8(r2)
   1893c:	e0bffd17 	ldw	r2,-12(fp)
   18940:	1887883a 	add	r3,r3,r2
   18944:	e0bffe17 	ldw	r2,-8(fp)
   18948:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1894c:	e0bffe17 	ldw	r2,-8(fp)
   18950:	10c00217 	ldw	r3,8(r2)
   18954:	d0a1d417 	ldw	r2,-30896(gp)
   18958:	1880032e 	bgeu	r3,r2,18968 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   1895c:	e0fffe17 	ldw	r3,-8(fp)
   18960:	00800044 	movi	r2,1
   18964:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   18968:	e0bfff17 	ldw	r2,-4(fp)
   1896c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18970:	d0e00c04 	addi	r3,gp,-32720
   18974:	e0bffe17 	ldw	r2,-8(fp)
   18978:	10ffcc1e 	bne	r2,r3,188ac <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   1897c:	e037883a 	mov	sp,fp
   18980:	dfc00117 	ldw	ra,4(sp)
   18984:	df000017 	ldw	fp,0(sp)
   18988:	dec00204 	addi	sp,sp,8
   1898c:	f800283a 	ret

00018990 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   18990:	deffff04 	addi	sp,sp,-4
   18994:	df000015 	stw	fp,0(sp)
   18998:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1899c:	000170fa 	wrctl	ienable,zero
}
   189a0:	e037883a 	mov	sp,fp
   189a4:	df000017 	ldw	fp,0(sp)
   189a8:	dec00104 	addi	sp,sp,4
   189ac:	f800283a 	ret

000189b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   189b0:	defff904 	addi	sp,sp,-28
   189b4:	dfc00615 	stw	ra,24(sp)
   189b8:	df000515 	stw	fp,20(sp)
   189bc:	df000504 	addi	fp,sp,20
   189c0:	e13ffd15 	stw	r4,-12(fp)
   189c4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   189c8:	e0bffe17 	ldw	r2,-8(fp)
   189cc:	10800017 	ldw	r2,0(r2)
   189d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   189d4:	e13ffd17 	ldw	r4,-12(fp)
   189d8:	0011f140 	call	11f14 <strlen>
   189dc:	10800044 	addi	r2,r2,1
   189e0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   189e4:	00000d06 	br	18a1c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   189e8:	e0bffc17 	ldw	r2,-16(fp)
   189ec:	11000217 	ldw	r4,8(r2)
   189f0:	e1bffb17 	ldw	r6,-20(fp)
   189f4:	e17ffd17 	ldw	r5,-12(fp)
   189f8:	0018d6c0 	call	18d6c <memcmp>
   189fc:	1004c03a 	cmpne	r2,r2,zero
   18a00:	1000031e 	bne	r2,zero,18a10 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   18a04:	e0bffc17 	ldw	r2,-16(fp)
   18a08:	e0bfff15 	stw	r2,-4(fp)
   18a0c:	00000706 	br	18a2c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   18a10:	e0bffc17 	ldw	r2,-16(fp)
   18a14:	10800017 	ldw	r2,0(r2)
   18a18:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18a1c:	e0fffe17 	ldw	r3,-8(fp)
   18a20:	e0bffc17 	ldw	r2,-16(fp)
   18a24:	10fff01e 	bne	r2,r3,189e8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   18a28:	e03fff15 	stw	zero,-4(fp)
   18a2c:	e0bfff17 	ldw	r2,-4(fp)
}
   18a30:	e037883a 	mov	sp,fp
   18a34:	dfc00117 	ldw	ra,4(sp)
   18a38:	df000017 	ldw	fp,0(sp)
   18a3c:	dec00204 	addi	sp,sp,8
   18a40:	f800283a 	ret

00018a44 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   18a44:	defffa04 	addi	sp,sp,-24
   18a48:	dfc00515 	stw	ra,20(sp)
   18a4c:	df000415 	stw	fp,16(sp)
   18a50:	df000404 	addi	fp,sp,16
   18a54:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   18a58:	008000b4 	movhi	r2,2
   18a5c:	10a65a04 	addi	r2,r2,-26264
   18a60:	10800017 	ldw	r2,0(r2)
   18a64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18a68:	00003306 	br	18b38 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   18a6c:	e0bffd17 	ldw	r2,-12(fp)
   18a70:	11000217 	ldw	r4,8(r2)
   18a74:	0011f140 	call	11f14 <strlen>
   18a78:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   18a7c:	e0bffd17 	ldw	r2,-12(fp)
   18a80:	10c00217 	ldw	r3,8(r2)
   18a84:	e0bffc17 	ldw	r2,-16(fp)
   18a88:	1885883a 	add	r2,r3,r2
   18a8c:	10bfffc4 	addi	r2,r2,-1
   18a90:	10800003 	ldbu	r2,0(r2)
   18a94:	10803fcc 	andi	r2,r2,255
   18a98:	1080201c 	xori	r2,r2,128
   18a9c:	10bfe004 	addi	r2,r2,-128
   18aa0:	10800bd8 	cmpnei	r2,r2,47
   18aa4:	1000031e 	bne	r2,zero,18ab4 <alt_find_file+0x70>
    {
      len -= 1;
   18aa8:	e0bffc17 	ldw	r2,-16(fp)
   18aac:	10bfffc4 	addi	r2,r2,-1
   18ab0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   18ab4:	e0bffc17 	ldw	r2,-16(fp)
   18ab8:	1007883a 	mov	r3,r2
   18abc:	e0bffe17 	ldw	r2,-8(fp)
   18ac0:	1885883a 	add	r2,r3,r2
   18ac4:	10800003 	ldbu	r2,0(r2)
   18ac8:	10803fcc 	andi	r2,r2,255
   18acc:	1080201c 	xori	r2,r2,128
   18ad0:	10bfe004 	addi	r2,r2,-128
   18ad4:	10800be0 	cmpeqi	r2,r2,47
   18ad8:	10000a1e 	bne	r2,zero,18b04 <alt_find_file+0xc0>
   18adc:	e0bffc17 	ldw	r2,-16(fp)
   18ae0:	1007883a 	mov	r3,r2
   18ae4:	e0bffe17 	ldw	r2,-8(fp)
   18ae8:	1885883a 	add	r2,r3,r2
   18aec:	10800003 	ldbu	r2,0(r2)
   18af0:	10803fcc 	andi	r2,r2,255
   18af4:	1080201c 	xori	r2,r2,128
   18af8:	10bfe004 	addi	r2,r2,-128
   18afc:	1004c03a 	cmpne	r2,r2,zero
   18b00:	10000a1e 	bne	r2,zero,18b2c <alt_find_file+0xe8>
   18b04:	e0bffd17 	ldw	r2,-12(fp)
   18b08:	11000217 	ldw	r4,8(r2)
   18b0c:	e1bffc17 	ldw	r6,-16(fp)
   18b10:	e17ffe17 	ldw	r5,-8(fp)
   18b14:	0018d6c0 	call	18d6c <memcmp>
   18b18:	1004c03a 	cmpne	r2,r2,zero
   18b1c:	1000031e 	bne	r2,zero,18b2c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   18b20:	e0bffd17 	ldw	r2,-12(fp)
   18b24:	e0bfff15 	stw	r2,-4(fp)
   18b28:	00000806 	br	18b4c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   18b2c:	e0bffd17 	ldw	r2,-12(fp)
   18b30:	10800017 	ldw	r2,0(r2)
   18b34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18b38:	00c000b4 	movhi	r3,2
   18b3c:	18e65a04 	addi	r3,r3,-26264
   18b40:	e0bffd17 	ldw	r2,-12(fp)
   18b44:	10ffc91e 	bne	r2,r3,18a6c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   18b48:	e03fff15 	stw	zero,-4(fp)
   18b4c:	e0bfff17 	ldw	r2,-4(fp)
}
   18b50:	e037883a 	mov	sp,fp
   18b54:	dfc00117 	ldw	ra,4(sp)
   18b58:	df000017 	ldw	fp,0(sp)
   18b5c:	dec00204 	addi	sp,sp,8
   18b60:	f800283a 	ret

00018b64 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   18b64:	defffa04 	addi	sp,sp,-24
   18b68:	dfc00515 	stw	ra,20(sp)
   18b6c:	df000415 	stw	fp,16(sp)
   18b70:	dc000315 	stw	r16,12(sp)
   18b74:	df000304 	addi	fp,sp,12
   18b78:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   18b7c:	00bffa04 	movi	r2,-24
   18b80:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   18b84:	e03ffe15 	stw	zero,-8(fp)
   18b88:	00002006 	br	18c0c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   18b8c:	e13ffe17 	ldw	r4,-8(fp)
   18b90:	040000b4 	movhi	r16,2
   18b94:	8425f504 	addi	r16,r16,-26668
   18b98:	01400304 	movi	r5,12
   18b9c:	0011c3c0 	call	11c3c <__mulsi3>
   18ba0:	1405883a 	add	r2,r2,r16
   18ba4:	10800017 	ldw	r2,0(r2)
   18ba8:	1004c03a 	cmpne	r2,r2,zero
   18bac:	1000141e 	bne	r2,zero,18c00 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   18bb0:	e13ffe17 	ldw	r4,-8(fp)
   18bb4:	040000b4 	movhi	r16,2
   18bb8:	8425f504 	addi	r16,r16,-26668
   18bbc:	01400304 	movi	r5,12
   18bc0:	0011c3c0 	call	11c3c <__mulsi3>
   18bc4:	1407883a 	add	r3,r2,r16
   18bc8:	e0bfff17 	ldw	r2,-4(fp)
   18bcc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   18bd0:	008000b4 	movhi	r2,2
   18bd4:	10a65e04 	addi	r2,r2,-26248
   18bd8:	10c00017 	ldw	r3,0(r2)
   18bdc:	e0bffe17 	ldw	r2,-8(fp)
   18be0:	1880040e 	bge	r3,r2,18bf4 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   18be4:	00c000b4 	movhi	r3,2
   18be8:	18e65e04 	addi	r3,r3,-26248
   18bec:	e0bffe17 	ldw	r2,-8(fp)
   18bf0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   18bf4:	e0bffe17 	ldw	r2,-8(fp)
   18bf8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   18bfc:	00000606 	br	18c18 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   18c00:	e0bffe17 	ldw	r2,-8(fp)
   18c04:	10800044 	addi	r2,r2,1
   18c08:	e0bffe15 	stw	r2,-8(fp)
   18c0c:	e0bffe17 	ldw	r2,-8(fp)
   18c10:	10800810 	cmplti	r2,r2,32
   18c14:	103fdd1e 	bne	r2,zero,18b8c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   18c18:	e0bffd17 	ldw	r2,-12(fp)
}
   18c1c:	e037883a 	mov	sp,fp
   18c20:	dfc00217 	ldw	ra,8(sp)
   18c24:	df000117 	ldw	fp,4(sp)
   18c28:	dc000017 	ldw	r16,0(sp)
   18c2c:	dec00304 	addi	sp,sp,12
   18c30:	f800283a 	ret

00018c34 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   18c34:	defffb04 	addi	sp,sp,-20
   18c38:	df000415 	stw	fp,16(sp)
   18c3c:	df000404 	addi	fp,sp,16
   18c40:	e13ffe15 	stw	r4,-8(fp)
   18c44:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   18c48:	e0bfff17 	ldw	r2,-4(fp)
   18c4c:	10820070 	cmpltui	r2,r2,2049
   18c50:	1000021e 	bne	r2,zero,18c5c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   18c54:	00820004 	movi	r2,2048
   18c58:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   18c5c:	e0fffe17 	ldw	r3,-8(fp)
   18c60:	e0bfff17 	ldw	r2,-4(fp)
   18c64:	1885883a 	add	r2,r3,r2
   18c68:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   18c6c:	e0bffe17 	ldw	r2,-8(fp)
   18c70:	e0bffd15 	stw	r2,-12(fp)
   18c74:	00000506 	br	18c8c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   18c78:	e0bffd17 	ldw	r2,-12(fp)
   18c7c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   18c80:	e0bffd17 	ldw	r2,-12(fp)
   18c84:	10800804 	addi	r2,r2,32
   18c88:	e0bffd15 	stw	r2,-12(fp)
   18c8c:	e0fffd17 	ldw	r3,-12(fp)
   18c90:	e0bffc17 	ldw	r2,-16(fp)
   18c94:	18bff836 	bltu	r3,r2,18c78 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   18c98:	e0bffe17 	ldw	r2,-8(fp)
   18c9c:	108007cc 	andi	r2,r2,31
   18ca0:	1005003a 	cmpeq	r2,r2,zero
   18ca4:	1000021e 	bne	r2,zero,18cb0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   18ca8:	e0bffd17 	ldw	r2,-12(fp)
   18cac:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   18cb0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   18cb4:	e037883a 	mov	sp,fp
   18cb8:	df000017 	ldw	fp,0(sp)
   18cbc:	dec00104 	addi	sp,sp,4
   18cc0:	f800283a 	ret

00018cc4 <exit>:
   18cc4:	defffe04 	addi	sp,sp,-8
   18cc8:	dc400015 	stw	r17,0(sp)
   18ccc:	000b883a 	mov	r5,zero
   18cd0:	2023883a 	mov	r17,r4
   18cd4:	dfc00115 	stw	ra,4(sp)
   18cd8:	0018dac0 	call	18dac <__call_exitprocs>
   18cdc:	8809883a 	mov	r4,r17
   18ce0:	0018fa80 	call	18fa8 <_exit>

00018ce4 <fputs>:
   18ce4:	defffd04 	addi	sp,sp,-12
   18ce8:	dfc00215 	stw	ra,8(sp)
   18cec:	dcc00115 	stw	r19,4(sp)
   18cf0:	dc400015 	stw	r17,0(sp)
   18cf4:	2027883a 	mov	r19,r4
   18cf8:	2823883a 	mov	r17,r5
   18cfc:	0011f140 	call	11f14 <strlen>
   18d00:	00c000b4 	movhi	r3,2
   18d04:	18e65504 	addi	r3,r3,-26284
   18d08:	19000017 	ldw	r4,0(r3)
   18d0c:	01400074 	movhi	r5,1
   18d10:	294a8004 	addi	r5,r5,10752
   18d14:	89400115 	stw	r5,4(r17)
   18d18:	980d883a 	mov	r6,r19
   18d1c:	880b883a 	mov	r5,r17
   18d20:	100f883a 	mov	r7,r2
   18d24:	0012a000 	call	12a00 <__sfvwrite_small_dev>
   18d28:	1007883a 	mov	r3,r2
   18d2c:	00bfffc4 	movi	r2,-1
   18d30:	0009883a 	mov	r4,zero
   18d34:	18800626 	beq	r3,r2,18d50 <fputs+0x6c>
   18d38:	2005883a 	mov	r2,r4
   18d3c:	dfc00217 	ldw	ra,8(sp)
   18d40:	dcc00117 	ldw	r19,4(sp)
   18d44:	dc400017 	ldw	r17,0(sp)
   18d48:	dec00304 	addi	sp,sp,12
   18d4c:	f800283a 	ret
   18d50:	1809883a 	mov	r4,r3
   18d54:	2005883a 	mov	r2,r4
   18d58:	dfc00217 	ldw	ra,8(sp)
   18d5c:	dcc00117 	ldw	r19,4(sp)
   18d60:	dc400017 	ldw	r17,0(sp)
   18d64:	dec00304 	addi	sp,sp,12
   18d68:	f800283a 	ret

00018d6c <memcmp>:
   18d6c:	31ffffc4 	addi	r7,r6,-1
   18d70:	3000061e 	bne	r6,zero,18d8c <memcmp+0x20>
   18d74:	00000a06 	br	18da0 <memcmp+0x34>
   18d78:	39ffffc4 	addi	r7,r7,-1
   18d7c:	00bfffc4 	movi	r2,-1
   18d80:	21000044 	addi	r4,r4,1
   18d84:	29400044 	addi	r5,r5,1
   18d88:	38800526 	beq	r7,r2,18da0 <memcmp+0x34>
   18d8c:	20c00003 	ldbu	r3,0(r4)
   18d90:	28800003 	ldbu	r2,0(r5)
   18d94:	18bff826 	beq	r3,r2,18d78 <memcmp+0xc>
   18d98:	1885c83a 	sub	r2,r3,r2
   18d9c:	f800283a 	ret
   18da0:	0005883a 	mov	r2,zero
   18da4:	f800283a 	ret

00018da8 <register_fini>:
   18da8:	f800283a 	ret

00018dac <__call_exitprocs>:
   18dac:	defff304 	addi	sp,sp,-52
   18db0:	008000b4 	movhi	r2,2
   18db4:	10a65604 	addi	r2,r2,-26280
   18db8:	df000b15 	stw	fp,44(sp)
   18dbc:	17000017 	ldw	fp,0(r2)
   18dc0:	00800074 	movhi	r2,1
   18dc4:	1097f104 	addi	r2,r2,24516
   18dc8:	1005003a 	cmpeq	r2,r2,zero
   18dcc:	d8800215 	stw	r2,8(sp)
   18dd0:	e0800c04 	addi	r2,fp,48
   18dd4:	dd800915 	stw	r22,36(sp)
   18dd8:	dd400815 	stw	r21,32(sp)
   18ddc:	dfc00c15 	stw	ra,48(sp)
   18de0:	ddc00a15 	stw	r23,40(sp)
   18de4:	dd000715 	stw	r20,28(sp)
   18de8:	dcc00615 	stw	r19,24(sp)
   18dec:	dc800515 	stw	r18,20(sp)
   18df0:	dc400415 	stw	r17,16(sp)
   18df4:	dc000315 	stw	r16,12(sp)
   18df8:	282d883a 	mov	r22,r5
   18dfc:	d9000115 	stw	r4,4(sp)
   18e00:	d8800015 	stw	r2,0(sp)
   18e04:	282b003a 	cmpeq	r21,r5,zero
   18e08:	e4400c17 	ldw	r17,48(fp)
   18e0c:	88001226 	beq	r17,zero,18e58 <__call_exitprocs+0xac>
   18e10:	ddc00017 	ldw	r23,0(sp)
   18e14:	88800117 	ldw	r2,4(r17)
   18e18:	8c802217 	ldw	r18,136(r17)
   18e1c:	143fffc4 	addi	r16,r2,-1
   18e20:	80000b16 	blt	r16,zero,18e50 <__call_exitprocs+0xa4>
   18e24:	9027003a 	cmpeq	r19,r18,zero
   18e28:	a800171e 	bne	r21,zero,18e88 <__call_exitprocs+0xdc>
   18e2c:	9800051e 	bne	r19,zero,18e44 <__call_exitprocs+0x98>
   18e30:	8409883a 	add	r4,r16,r16
   18e34:	2105883a 	add	r2,r4,r4
   18e38:	1485883a 	add	r2,r2,r18
   18e3c:	10c02017 	ldw	r3,128(r2)
   18e40:	b0c01226 	beq	r22,r3,18e8c <__call_exitprocs+0xe0>
   18e44:	843fffc4 	addi	r16,r16,-1
   18e48:	00bfffc4 	movi	r2,-1
   18e4c:	80bff61e 	bne	r16,r2,18e28 <__call_exitprocs+0x7c>
   18e50:	d8800217 	ldw	r2,8(sp)
   18e54:	10003226 	beq	r2,zero,18f20 <__call_exitprocs+0x174>
   18e58:	dfc00c17 	ldw	ra,48(sp)
   18e5c:	df000b17 	ldw	fp,44(sp)
   18e60:	ddc00a17 	ldw	r23,40(sp)
   18e64:	dd800917 	ldw	r22,36(sp)
   18e68:	dd400817 	ldw	r21,32(sp)
   18e6c:	dd000717 	ldw	r20,28(sp)
   18e70:	dcc00617 	ldw	r19,24(sp)
   18e74:	dc800517 	ldw	r18,20(sp)
   18e78:	dc400417 	ldw	r17,16(sp)
   18e7c:	dc000317 	ldw	r16,12(sp)
   18e80:	dec00d04 	addi	sp,sp,52
   18e84:	f800283a 	ret
   18e88:	8409883a 	add	r4,r16,r16
   18e8c:	88c00117 	ldw	r3,4(r17)
   18e90:	2105883a 	add	r2,r4,r4
   18e94:	1445883a 	add	r2,r2,r17
   18e98:	18ffffc4 	addi	r3,r3,-1
   18e9c:	11800217 	ldw	r6,8(r2)
   18ea0:	1c001826 	beq	r3,r16,18f04 <__call_exitprocs+0x158>
   18ea4:	10000215 	stw	zero,8(r2)
   18ea8:	303fe626 	beq	r6,zero,18e44 <__call_exitprocs+0x98>
   18eac:	8d000117 	ldw	r20,4(r17)
   18eb0:	9800121e 	bne	r19,zero,18efc <__call_exitprocs+0x150>
   18eb4:	00c00044 	movi	r3,1
   18eb8:	1c06983a 	sll	r3,r3,r16
   18ebc:	90804017 	ldw	r2,256(r18)
   18ec0:	1884703a 	and	r2,r3,r2
   18ec4:	10000d26 	beq	r2,zero,18efc <__call_exitprocs+0x150>
   18ec8:	90804117 	ldw	r2,260(r18)
   18ecc:	1884703a 	and	r2,r3,r2
   18ed0:	10000e1e 	bne	r2,zero,18f0c <__call_exitprocs+0x160>
   18ed4:	2105883a 	add	r2,r4,r4
   18ed8:	1485883a 	add	r2,r2,r18
   18edc:	11400017 	ldw	r5,0(r2)
   18ee0:	d9000117 	ldw	r4,4(sp)
   18ee4:	303ee83a 	callr	r6
   18ee8:	88800117 	ldw	r2,4(r17)
   18eec:	a0bfc61e 	bne	r20,r2,18e08 <__call_exitprocs+0x5c>
   18ef0:	b8800017 	ldw	r2,0(r23)
   18ef4:	147fd326 	beq	r2,r17,18e44 <__call_exitprocs+0x98>
   18ef8:	003fc306 	br	18e08 <__call_exitprocs+0x5c>
   18efc:	303ee83a 	callr	r6
   18f00:	003ff906 	br	18ee8 <__call_exitprocs+0x13c>
   18f04:	8c000115 	stw	r16,4(r17)
   18f08:	003fe706 	br	18ea8 <__call_exitprocs+0xfc>
   18f0c:	2105883a 	add	r2,r4,r4
   18f10:	1485883a 	add	r2,r2,r18
   18f14:	11000017 	ldw	r4,0(r2)
   18f18:	303ee83a 	callr	r6
   18f1c:	003ff206 	br	18ee8 <__call_exitprocs+0x13c>
   18f20:	88800117 	ldw	r2,4(r17)
   18f24:	10000b1e 	bne	r2,zero,18f54 <__call_exitprocs+0x1a8>
   18f28:	89000017 	ldw	r4,0(r17)
   18f2c:	20000a26 	beq	r4,zero,18f58 <__call_exitprocs+0x1ac>
   18f30:	b9000015 	stw	r4,0(r23)
   18f34:	90000226 	beq	r18,zero,18f40 <__call_exitprocs+0x194>
   18f38:	9009883a 	mov	r4,r18
   18f3c:	0015fc40 	call	15fc4 <free>
   18f40:	8809883a 	mov	r4,r17
   18f44:	0015fc40 	call	15fc4 <free>
   18f48:	bc400017 	ldw	r17,0(r23)
   18f4c:	883fb11e 	bne	r17,zero,18e14 <__call_exitprocs+0x68>
   18f50:	003fc106 	br	18e58 <__call_exitprocs+0xac>
   18f54:	89000017 	ldw	r4,0(r17)
   18f58:	882f883a 	mov	r23,r17
   18f5c:	2023883a 	mov	r17,r4
   18f60:	883fac1e 	bne	r17,zero,18e14 <__call_exitprocs+0x68>
   18f64:	003fbc06 	br	18e58 <__call_exitprocs+0xac>

00018f68 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   18f68:	defffd04 	addi	sp,sp,-12
   18f6c:	df000215 	stw	fp,8(sp)
   18f70:	df000204 	addi	fp,sp,8
   18f74:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   18f78:	e0bfff17 	ldw	r2,-4(fp)
   18f7c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   18f80:	e0bffe17 	ldw	r2,-8(fp)
   18f84:	1005003a 	cmpeq	r2,r2,zero
   18f88:	1000021e 	bne	r2,zero,18f94 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   18f8c:	002af070 	cmpltui	zero,zero,43969
   18f90:	00000106 	br	18f98 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   18f94:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   18f98:	e037883a 	mov	sp,fp
   18f9c:	df000017 	ldw	fp,0(sp)
   18fa0:	dec00104 	addi	sp,sp,4
   18fa4:	f800283a 	ret

00018fa8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   18fa8:	defffd04 	addi	sp,sp,-12
   18fac:	dfc00215 	stw	ra,8(sp)
   18fb0:	df000115 	stw	fp,4(sp)
   18fb4:	df000104 	addi	fp,sp,4
   18fb8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   18fbc:	e13fff17 	ldw	r4,-4(fp)
   18fc0:	0018f680 	call	18f68 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   18fc4:	003fff06 	br	18fc4 <_exit+0x1c>
   18fc8:	00018da8 	cmpgeui	zero,zero,1590
