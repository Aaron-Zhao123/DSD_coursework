
hello_wolrd.elf:     file format elf32-littlenios2
hello_wolrd.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00000120 memsz 0x00000120 flags r-x
    LOAD off    0x00002000 vaddr 0x01010000 paddr 0x01010000 align 2**12
         filesz 0x00002ae8 memsz 0x00002ae8 flags r-x
    LOAD off    0x00004ae8 vaddr 0x01012ae8 paddr 0x01012be4 align 2**12
         filesz 0x000000fc memsz 0x000000fc flags rw-
    LOAD off    0x00004ce0 vaddr 0x01012ce0 paddr 0x01012ce0 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002984  01010000  01010000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000164  01012984  01012984  00004984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000fc  01012ae8  01012be4  00004ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  01012ce0  01012ce0  00004ce0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00004be4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000598  00000000  00000000  00004c08  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000007f7  00000000  00000000  000051a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000079fa  00000000  00000000  00005997  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003265  00000000  00000000  0000d391  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000636b  00000000  00000000  000105f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000007fc  00000000  00000000  00016964  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001397  00000000  00000000  00017160  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000232f  00000000  00000000  000184f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0001a828  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000450  00000000  00000000  0001a848  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001c58c  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001c58f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001c592  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001c593  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001c594  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001c598  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001c59c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001c5a0  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001c5a9  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001c5b2  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0001c5bb  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000037  00000000  00000000  0001c5cd  2**0
                  CONTENTS, READONLY
 29 .jdi          00004fae  00000000  00000000  0001c604  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003c162  00000000  00000000  000215b2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
01010000 l    d  .text	00000000 .text
01012984 l    d  .rodata	00000000 .rodata
01012ae8 l    d  .rwdata	00000000 .rwdata
01012ce0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01010038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
010103b4 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
01010b68 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01011af0 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
01012ae8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01012364 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
010124b0 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_times.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01012710 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
0101253c g     F .text	0000002c alt_main
01011a2c g     F .text	00000090 _puts_r
01012cfc g     O .bss	00000100 alt_irq
01012be4 g       *ABS*	00000000 __flash_rwdata_start
01011994 g     F .text	00000054 printf
0101084c g     F .text	00000174 __divsf3
010109c0 g     F .text	00000094 __fixsfsi
01012bd0 g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
01012568 g     F .text	00000074 times
00800020 g       *ABS*	00000000 __flash_exceptions_start
01012ce0 g     O .bss	00000004 errno
0101106c g     F .text	00000038 __make_dp
010114e4 g     F .text	0000002c __make_fp
01012ce8 g     O .bss	00000004 alt_argv
0101abc8 g       *ABS*	00000000 _gp
01010598 g     F .text	00000070 __subsf3
01011abc g     F .text	00000014 puts
010119e8 g     F .text	00000044 _printf_r
01010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
010124a0 g     F .text	00000008 __udivsi3
0101294c g     F .text	00000038 alt_icache_flush
01011824 g     F .text	00000138 __unpack_d
01010a54 g     F .text	00000054 __extendsfdf2
01010ff8 g     F .text	00000074 __adddf3
01012bcc g     O .rwdata	00000004 _global_impure_ptr
01012dfc g       *ABS*	00000000 __bss_end
010127f8 g     F .text	0000006c alt_iic_isr_register
01012898 g     F .text	000000ac alt_tick
0101275c g     F .text	00000018 alt_ic_irq_enabled
01012864 g     F .text	00000034 alt_alarm_stop
01012cf0 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	00000054 alt_irq_handler
0101141c g     F .text	000000c8 __unpack_f
0101274c g     F .text	00000004 alt_dcache_flush_all
01012be4 g       *ABS*	00000000 __ram_rwdata_end
010125dc g     F .text	00000078 write
01012ae8 g       *ABS*	00000000 __ram_rodata_end
010124a8 g     F .text	00000008 __umodsi3
01012dfc g       *ABS*	00000000 end
010112bc g     F .text	00000160 __pack_f
0101c000 g       *ABS*	00000000 __alt_stack_pointer
010126c0 g     F .text	00000050 alt_avalon_timer_sc_init
0101123c g     F .text	00000080 __clzsi2
0101268c g     F .text	00000034 altera_avalon_jtag_uart_write
01011b70 g     F .text	0000069c ___vfprintf_internal_r
01010000 g     F .text	0000003c _start
01012cf4 g     O .bss	00000004 _alt_tick_rate
01012cf8 g     O .bss	00000004 _alt_nticks
01012654 g     F .text	00000018 alt_sys_init
0101195c g     F .text	00000038 __mulsi3
01012ae8 g       *ABS*	00000000 __ram_rwdata_start
01012984 g       *ABS*	00000000 __ram_rodata_start
0101003c g     F .text	000000e4 generateVector
01012dfc g       *ABS*	00000000 __alt_stack_base
010129c0 g     O .rodata	00000010 __thenan_sf
01012230 g     F .text	000000bc __sfvwrite_small_dev
01012ce0 g       *ABS*	00000000 __bss_start
010101fc g     F .text	000001b8 main
01012cec g     O .bss	00000004 alt_envp
010110a4 g     F .text	00000074 __truncdfsf2
01012bd4 g     O .rwdata	00000004 alt_errno
010123e0 g     F .text	00000060 __divsi3
010129d0 g     O .rodata	00000014 __thenan_df
0101066c g     F .text	000001e0 __mulsf3
01012984 g       *ABS*	00000000 __flash_rodata_start
0101266c g     F .text	00000020 alt_irq_init
010129e4 g     O .rodata	00000100 __clz_tab
01010120 g     F .text	000000dc sumVector
010122ec g     F .text	00000078 _write_r
01012bc8 g     O .rwdata	00000004 _impure_ptr
01012ce4 g     O .bss	00000004 alt_argc
00800020 g       .exceptions	00000000 alt_irq_entry
00800020 g       *ABS*	00000000 __ram_exceptions_start
010127f4 g     F .text	00000004 alt_ic_isr_register
01012be4 g       *ABS*	00000000 _edata
01012dfc g       *ABS*	00000000 _end
00800140 g       *ABS*	00000000 __ram_exceptions_end
010127b4 g     F .text	00000040 alt_ic_irq_disable
01012944 g     F .text	00000008 altera_nios2_qsys_irq_init
0080001c g       .entry	00000000 exit
01010aa8 g     F .text	000000c0 __floatunsisf
01012440 g     F .text	00000060 __modsi3
0101c000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080001c g       .entry	00000000 _exit
01011118 g     F .text	00000124 __muldi3
01011ad0 g     F .text	00000020 strlen
01012750 g     F .text	0000000c alt_icache_flush_all
01012bd8 g     O .rwdata	00000004 alt_priority_mask
01012774 g     F .text	00000040 alt_ic_irq_enable
0101220c g     F .text	00000024 __vfprintf_internal
01010f78 g     F .text	00000080 __subdf3
01012bdc g     O .rwdata	00000008 alt_alarm_list
01010608 g     F .text	00000064 __addsf3
010124d0 g     F .text	0000006c alt_load
01011510 g     F .text	00000314 __pack_d



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00404074 	movhi	at,257
    ori r1, r1, %lo(_start)
  800014:	08400014 	ori	at,at,0
    jmp r1
  800018:	0800683a 	jmp	at

0080001c <_exit>:
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	deffff04 	addi	sp,sp,-4
  8000f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000f4:	0009313a 	rdctl	r4,ipending
  8000f8:	00c00044 	movi	r3,1
  8000fc:	01404074 	movhi	r5,257
  800100:	294b3f04 	addi	r5,r5,11516
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800104:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800108:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80010c:	10000726 	beq	r2,zero,80012c <alt_irq_handler+0x40>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800110:	29000117 	ldw	r4,4(r5)
  800114:	28800017 	ldw	r2,0(r5)
  800118:	103ee83a 	callr	r2
  80011c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800120:	10000426 	beq	r2,zero,800134 <alt_irq_handler+0x48>
  800124:	1009883a 	mov	r4,r2
  800128:	003ff306 	br	8000f8 <alt_irq_handler+0xc>
  80012c:	29400204 	addi	r5,r5,8
  800130:	003ff406 	br	800104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800134:	dfc00017 	ldw	ra,0(sp)
  800138:	dec00104 	addi	sp,sp,4
  80013c:	f800283a 	ret

Disassembly of section .text:

01010000 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1010000:	06c04074 	movhi	sp,257
    ori sp, sp, %lo(__alt_stack_pointer)
 1010004:	def00014 	ori	sp,sp,49152

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 1010008:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 101000c:	d6aaf214 	ori	gp,gp,43976
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1010010:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 1010014:	108b3814 	ori	r2,r2,11488

    movhi r3, %hi(__bss_end)
 1010018:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 101001c:	18cb7f14 	ori	r3,r3,11772

    beq r2, r3, 1f
 1010020:	10c00326 	beq	r2,r3,1010030 <_start+0x30>

0:
    stw zero, (r2)
 1010024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1010028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 101002c:	10fffd36 	bltu	r2,r3,1010024 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1010030:	10124d00 	call	10124d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1010034:	101253c0 	call	101253c <alt_main>

01010038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1010038:	003fff06 	br	1010038 <alt_after_alt_main>

0101003c <generateVector>:
#define step 0.001
#define N 255001

// generate the vector x and stores it in the memory 
void generateVector (float x[N])
{
 101003c:	defffb04 	addi	sp,sp,-20
 1010040:	dfc00415 	stw	ra,16(sp)
 1010044:	df000315 	stw	fp,12(sp)
 1010048:	dc000215 	stw	r16,8(sp)
 101004c:	df000204 	addi	fp,sp,8
 1010050:	e13fff15 	stw	r4,-4(fp)
	int i;
	x[0] = 0;
 1010054:	e0bfff17 	ldw	r2,-4(fp)
 1010058:	10000015 	stw	zero,0(r2)
	for (i=1;i<N;i++) {
 101005c:	00800044 	movi	r2,1
 1010060:	e0bffe15 	stw	r2,-8(fp)
 1010064:	00002406 	br	10100f8 <generateVector+0xbc>
		x[i] = x[i-1] + step;
 1010068:	e0bffe17 	ldw	r2,-8(fp)
 101006c:	1085883a 	add	r2,r2,r2
 1010070:	1085883a 	add	r2,r2,r2
 1010074:	1007883a 	mov	r3,r2
 1010078:	e0bfff17 	ldw	r2,-4(fp)
 101007c:	18a1883a 	add	r16,r3,r2
 1010080:	e0bffe17 	ldw	r2,-8(fp)
 1010084:	1085883a 	add	r2,r2,r2
 1010088:	1085883a 	add	r2,r2,r2
 101008c:	1007883a 	mov	r3,r2
 1010090:	e0bfff17 	ldw	r2,-4(fp)
 1010094:	1885883a 	add	r2,r3,r2
 1010098:	10bfff04 	addi	r2,r2,-4
 101009c:	10800017 	ldw	r2,0(r2)
 10100a0:	1009883a 	mov	r4,r2
 10100a4:	1010a540 	call	1010a54 <__extendsfdf2>
 10100a8:	100b883a 	mov	r5,r2
 10100ac:	180d883a 	mov	r6,r3
 10100b0:	2809883a 	mov	r4,r5
 10100b4:	300b883a 	mov	r5,r6
 10100b8:	01b4bcb4 	movhi	r6,54002
 10100bc:	31aa7f04 	addi	r6,r6,-22020
 10100c0:	01cfd434 	movhi	r7,16208
 10100c4:	39d89344 	addi	r7,r7,25165
 10100c8:	1010ff80 	call	1010ff8 <__adddf3>
 10100cc:	1009883a 	mov	r4,r2
 10100d0:	180b883a 	mov	r5,r3
 10100d4:	2005883a 	mov	r2,r4
 10100d8:	2807883a 	mov	r3,r5
 10100dc:	1009883a 	mov	r4,r2
 10100e0:	180b883a 	mov	r5,r3
 10100e4:	10110a40 	call	10110a4 <__truncdfsf2>
 10100e8:	80800015 	stw	r2,0(r16)
// generate the vector x and stores it in the memory 
void generateVector (float x[N])
{
	int i;
	x[0] = 0;
	for (i=1;i<N;i++) {
 10100ec:	e0bffe17 	ldw	r2,-8(fp)
 10100f0:	10800044 	addi	r2,r2,1
 10100f4:	e0bffe15 	stw	r2,-8(fp)
 10100f8:	e0fffe17 	ldw	r3,-8(fp)
 10100fc:	00800134 	movhi	r2,4
 1010100:	10b90604 	addi	r2,r2,-7144
 1010104:	10ffd80e 	bge	r2,r3,1010068 <generateVector+0x2c>
		x[i] = x[i-1] + step;
	}
}
 1010108:	e037883a 	mov	sp,fp
 101010c:	dfc00217 	ldw	ra,8(sp)
 1010110:	df000117 	ldw	fp,4(sp)
 1010114:	dc000017 	ldw	r16,0(sp)
 1010118:	dec00304 	addi	sp,sp,12
 101011c:	f800283a 	ret

01010120 <sumVector>:
float sumVector (float x[], int M){
 1010120:	defff904 	addi	sp,sp,-28
 1010124:	dfc00615 	stw	ra,24(sp)
 1010128:	df000515 	stw	fp,20(sp)
 101012c:	dc000415 	stw	r16,16(sp)
 1010130:	df000404 	addi	fp,sp,16
 1010134:	e13ffe15 	stw	r4,-8(fp)
 1010138:	e17fff15 	stw	r5,-4(fp)
	float y = 0;
 101013c:	e03ffd15 	stw	zero,-12(fp)
	int i;
	for (i=0; i<N; i++) {
 1010140:	e03ffc15 	stw	zero,-16(fp)
 1010144:	00002206 	br	10101d0 <sumVector+0xb0>
		y = y + x[i] + x[i] * x[i];
 1010148:	e0bffc17 	ldw	r2,-16(fp)
 101014c:	1085883a 	add	r2,r2,r2
 1010150:	1085883a 	add	r2,r2,r2
 1010154:	1007883a 	mov	r3,r2
 1010158:	e0bffe17 	ldw	r2,-8(fp)
 101015c:	1885883a 	add	r2,r3,r2
 1010160:	10800017 	ldw	r2,0(r2)
 1010164:	1009883a 	mov	r4,r2
 1010168:	e17ffd17 	ldw	r5,-12(fp)
 101016c:	10106080 	call	1010608 <__addsf3>
 1010170:	1021883a 	mov	r16,r2
 1010174:	e0bffc17 	ldw	r2,-16(fp)
 1010178:	1085883a 	add	r2,r2,r2
 101017c:	1085883a 	add	r2,r2,r2
 1010180:	1007883a 	mov	r3,r2
 1010184:	e0bffe17 	ldw	r2,-8(fp)
 1010188:	1885883a 	add	r2,r3,r2
 101018c:	11000017 	ldw	r4,0(r2)
 1010190:	e0bffc17 	ldw	r2,-16(fp)
 1010194:	1085883a 	add	r2,r2,r2
 1010198:	1085883a 	add	r2,r2,r2
 101019c:	1007883a 	mov	r3,r2
 10101a0:	e0bffe17 	ldw	r2,-8(fp)
 10101a4:	1885883a 	add	r2,r3,r2
 10101a8:	10800017 	ldw	r2,0(r2)
 10101ac:	100b883a 	mov	r5,r2
 10101b0:	101066c0 	call	101066c <__mulsf3>
 10101b4:	8009883a 	mov	r4,r16
 10101b8:	100b883a 	mov	r5,r2
 10101bc:	10106080 	call	1010608 <__addsf3>
 10101c0:	e0bffd15 	stw	r2,-12(fp)
	}
}
float sumVector (float x[], int M){
	float y = 0;
	int i;
	for (i=0; i<N; i++) {
 10101c4:	e0bffc17 	ldw	r2,-16(fp)
 10101c8:	10800044 	addi	r2,r2,1
 10101cc:	e0bffc15 	stw	r2,-16(fp)
 10101d0:	e0fffc17 	ldw	r3,-16(fp)
 10101d4:	00800134 	movhi	r2,4
 10101d8:	10b90604 	addi	r2,r2,-7144
 10101dc:	10ffda0e 	bge	r2,r3,1010148 <sumVector+0x28>
		y = y + x[i] + x[i] * x[i];
	}
	return y;
 10101e0:	e0bffd17 	ldw	r2,-12(fp)
}
 10101e4:	e037883a 	mov	sp,fp
 10101e8:	dfc00217 	ldw	ra,8(sp)
 10101ec:	df000117 	ldw	fp,4(sp)
 10101f0:	dc000017 	ldw	r16,0(sp)
 10101f4:	dec00304 	addi	sp,sp,12
 10101f8:	f800283a 	ret

010101fc <main>:

int main()
{
 10101fc:	defffe04 	addi	sp,sp,-8
 1010200:	dfc00115 	stw	ra,4(sp)
 1010204:	df000015 	stw	fp,0(sp)
 1010208:	d839883a 	mov	fp,sp
 101020c:	023ffc34 	movhi	r8,65520
 1010210:	421bd504 	addi	r8,r8,28500
 1010214:	da37883a 	add	sp,sp,r8
	printf("Task 2! \n");
 1010218:	01004074 	movhi	r4,257
 101021c:	210a6104 	addi	r4,r4,10628
 1010220:	1011abc0 	call	1011abc <puts>

	float x[N];
	float y;
	printf("Hi \n");
 1010224:	01004074 	movhi	r4,257
 1010228:	210a6404 	addi	r4,r4,10640
 101022c:	1011abc0 	call	1011abc <puts>
	generateVector(x);
 1010230:	00bffc34 	movhi	r2,65520
 1010234:	109bda04 	addi	r2,r2,28520
 1010238:	e089883a 	add	r4,fp,r2
 101023c:	101003c0 	call	101003c <generateVector>
	printf("Hi again \n");
 1010240:	01004074 	movhi	r4,257
 1010244:	210a6504 	addi	r4,r4,10644
 1010248:	1011abc0 	call	1011abc <puts>
	// timing
	char buf[50];
	clock_t exec_t1, exec_t2;
	
	exec_t1 = times(NULL); // get system time before starting the process
 101024c:	0009883a 	mov	r4,zero
 1010250:	10125680 	call	1012568 <times>
 1010254:	00fffc34 	movhi	r3,65520
 1010258:	18dbd804 	addi	r3,r3,28512
 101025c:	1f07883a 	add	r3,r3,fp
 1010260:	18800015 	stw	r2,0(r3)
	
	// code START
	y = sumVector (x, N);
 1010264:	00bffc34 	movhi	r2,65520
 1010268:	109bda04 	addi	r2,r2,28520
 101026c:	e089883a 	add	r4,fp,r2
 1010270:	01400134 	movhi	r5,4
 1010274:	29790644 	addi	r5,r5,-7143
 1010278:	10101200 	call	1010120 <sumVector>
 101027c:	00fffc34 	movhi	r3,65520
 1010280:	18dbd904 	addi	r3,r3,28516
 1010284:	1f07883a 	add	r3,r3,fp
 1010288:	18800015 	stw	r2,0(r3)
	
	//code END
	
	exec_t2 = times(NULL); // get system time after finishing the process
 101028c:	0009883a 	mov	r4,zero
 1010290:	10125680 	call	1012568 <times>
 1010294:	013ffc34 	movhi	r4,65520
 1010298:	211bd704 	addi	r4,r4,28508
 101029c:	2709883a 	add	r4,r4,fp
 10102a0:	20800015 	stw	r2,0(r4)
	// gcvt convert a number to a string with decimal including a point, gcvt(value,number of digits,buffer)
	// buffer 8,9 character longer than number, this is the memory block that stores the number
	//alt_putstr("proc time = "); 	alt_putstr(buf);	alt_putstr("ticks\n");
	//printf could be used if memory is enough
	float resultf;
	resultf = exec_t2 - exec_t1;
 10102a4:	00bffc34 	movhi	r2,65520
 10102a8:	109bd704 	addi	r2,r2,28508
 10102ac:	1705883a 	add	r2,r2,fp
 10102b0:	10c00017 	ldw	r3,0(r2)
 10102b4:	013ffc34 	movhi	r4,65520
 10102b8:	211bd804 	addi	r4,r4,28512
 10102bc:	2709883a 	add	r4,r4,fp
 10102c0:	20800017 	ldw	r2,0(r4)
 10102c4:	1889c83a 	sub	r4,r3,r2
 10102c8:	1010aa80 	call	1010aa8 <__floatunsisf>
 10102cc:	00fffc34 	movhi	r3,65520
 10102d0:	18dbd604 	addi	r3,r3,28504
 10102d4:	1f07883a 	add	r3,r3,fp
 10102d8:	18800015 	stw	r2,0(r3)

	printf("Proc time = %d\n",(int)resultf);
 10102dc:	00bffc34 	movhi	r2,65520
 10102e0:	109bd604 	addi	r2,r2,28504
 10102e4:	1705883a 	add	r2,r2,fp
 10102e8:	11000017 	ldw	r4,0(r2)
 10102ec:	10109c00 	call	10109c0 <__fixsfsi>
 10102f0:	100b883a 	mov	r5,r2
 10102f4:	01004074 	movhi	r4,257
 10102f8:	210a6804 	addi	r4,r4,10656
 10102fc:	10119940 	call	1011994 <printf>

	int i;
	for (i=0; i<10; i++)
 1010300:	00fffc34 	movhi	r3,65520
 1010304:	18dbd504 	addi	r3,r3,28500
 1010308:	1f07883a 	add	r3,r3,fp
 101030c:	18000015 	stw	zero,0(r3)
 1010310:	00001306 	br	1010360 <main+0x164>
		y = y/2.0;
 1010314:	00bffc34 	movhi	r2,65520
 1010318:	109bd904 	addi	r2,r2,28516
 101031c:	1705883a 	add	r2,r2,fp
 1010320:	11000017 	ldw	r4,0(r2)
 1010324:	01500034 	movhi	r5,16384
 1010328:	101084c0 	call	101084c <__divsf3>
 101032c:	00fffc34 	movhi	r3,65520
 1010330:	18dbd904 	addi	r3,r3,28516
 1010334:	1f07883a 	add	r3,r3,fp
 1010338:	18800015 	stw	r2,0(r3)
	resultf = exec_t2 - exec_t1;

	printf("Proc time = %d\n",(int)resultf);

	int i;
	for (i=0; i<10; i++)
 101033c:	013ffc34 	movhi	r4,65520
 1010340:	211bd504 	addi	r4,r4,28500
 1010344:	2709883a 	add	r4,r4,fp
 1010348:	20800017 	ldw	r2,0(r4)
 101034c:	10800044 	addi	r2,r2,1
 1010350:	00fffc34 	movhi	r3,65520
 1010354:	18dbd504 	addi	r3,r3,28500
 1010358:	1f07883a 	add	r3,r3,fp
 101035c:	18800015 	stw	r2,0(r3)
 1010360:	013ffc34 	movhi	r4,65520
 1010364:	211bd504 	addi	r4,r4,28500
 1010368:	2709883a 	add	r4,r4,fp
 101036c:	20800017 	ldw	r2,0(r4)
 1010370:	10800290 	cmplti	r2,r2,10
 1010374:	103fe71e 	bne	r2,zero,1010314 <main+0x118>
		y = y/2.0;
	//gcvt((int)y, 20, buf);
	//alt_putstr("Result (divided by 1014) = "); alt_putstr(buf);
	printf("Result = %d\n",(int)y);
 1010378:	00bffc34 	movhi	r2,65520
 101037c:	109bd904 	addi	r2,r2,28516
 1010380:	1705883a 	add	r2,r2,fp
 1010384:	11000017 	ldw	r4,0(r2)
 1010388:	10109c00 	call	10109c0 <__fixsfsi>
 101038c:	100b883a 	mov	r5,r2
 1010390:	01004074 	movhi	r4,257
 1010394:	210a6c04 	addi	r4,r4,10672
 1010398:	10119940 	call	1011994 <printf>
	return 0;
 101039c:	0005883a 	mov	r2,zero
}
 10103a0:	e037883a 	mov	sp,fp
 10103a4:	dfc00117 	ldw	ra,4(sp)
 10103a8:	df000017 	ldw	fp,0(sp)
 10103ac:	dec00204 	addi	sp,sp,8
 10103b0:	f800283a 	ret

010103b4 <_fpadd_parts>:
 10103b4:	21c00017 	ldw	r7,0(r4)
 10103b8:	02000044 	movi	r8,1
 10103bc:	41c0332e 	bgeu	r8,r7,101048c <_fpadd_parts+0xd8>
 10103c0:	28800017 	ldw	r2,0(r5)
 10103c4:	4080462e 	bgeu	r8,r2,10104e0 <_fpadd_parts+0x12c>
 10103c8:	00c00104 	movi	r3,4
 10103cc:	38c06b26 	beq	r7,r3,101057c <_fpadd_parts+0x1c8>
 10103d0:	10c04326 	beq	r2,r3,10104e0 <_fpadd_parts+0x12c>
 10103d4:	00c00084 	movi	r3,2
 10103d8:	10c02e26 	beq	r2,r3,1010494 <_fpadd_parts+0xe0>
 10103dc:	38c04026 	beq	r7,r3,10104e0 <_fpadd_parts+0x12c>
 10103e0:	22800217 	ldw	r10,8(r4)
 10103e4:	28c00217 	ldw	r3,8(r5)
 10103e8:	23000317 	ldw	r12,12(r4)
 10103ec:	2a400317 	ldw	r9,12(r5)
 10103f0:	50cfc83a 	sub	r7,r10,r3
 10103f4:	3817883a 	mov	r11,r7
 10103f8:	38004f16 	blt	r7,zero,1010538 <_fpadd_parts+0x184>
 10103fc:	008007c4 	movi	r2,31
 1010400:	11c03316 	blt	r2,r7,10104d0 <_fpadd_parts+0x11c>
 1010404:	02c0540e 	bge	zero,r11,1010558 <_fpadd_parts+0x1a4>
 1010408:	41c4983a 	sll	r2,r8,r7
 101040c:	49c6d83a 	srl	r3,r9,r7
 1010410:	10bfffc4 	addi	r2,r2,-1
 1010414:	4884703a 	and	r2,r9,r2
 1010418:	1004c03a 	cmpne	r2,r2,zero
 101041c:	1892b03a 	or	r9,r3,r2
 1010420:	20c00117 	ldw	r3,4(r4)
 1010424:	28800117 	ldw	r2,4(r5)
 1010428:	18803c26 	beq	r3,r2,101051c <_fpadd_parts+0x168>
 101042c:	18002f26 	beq	r3,zero,10104ec <_fpadd_parts+0x138>
 1010430:	4b05c83a 	sub	r2,r9,r12
 1010434:	10004216 	blt	r2,zero,1010540 <_fpadd_parts+0x18c>
 1010438:	32800215 	stw	r10,8(r6)
 101043c:	30800315 	stw	r2,12(r6)
 1010440:	30000115 	stw	zero,4(r6)
 1010444:	31000317 	ldw	r4,12(r6)
 1010448:	01d00034 	movhi	r7,16384
 101044c:	39ffff84 	addi	r7,r7,-2
 1010450:	20bfffc4 	addi	r2,r4,-1
 1010454:	2007883a 	mov	r3,r4
 1010458:	38800836 	bltu	r7,r2,101047c <_fpadd_parts+0xc8>
 101045c:	31400217 	ldw	r5,8(r6)
 1010460:	18c9883a 	add	r4,r3,r3
 1010464:	20bfffc4 	addi	r2,r4,-1
 1010468:	297fffc4 	addi	r5,r5,-1
 101046c:	2007883a 	mov	r3,r4
 1010470:	38bffb2e 	bgeu	r7,r2,1010460 <_fpadd_parts+0xac>
 1010474:	31400215 	stw	r5,8(r6)
 1010478:	31000315 	stw	r4,12(r6)
 101047c:	008000c4 	movi	r2,3
 1010480:	30800015 	stw	r2,0(r6)
 1010484:	20001b16 	blt	r4,zero,10104f4 <_fpadd_parts+0x140>
 1010488:	3009883a 	mov	r4,r6
 101048c:	2005883a 	mov	r2,r4
 1010490:	f800283a 	ret
 1010494:	38fffd1e 	bne	r7,r3,101048c <_fpadd_parts+0xd8>
 1010498:	31c00015 	stw	r7,0(r6)
 101049c:	20800117 	ldw	r2,4(r4)
 10104a0:	30800115 	stw	r2,4(r6)
 10104a4:	20c00217 	ldw	r3,8(r4)
 10104a8:	30c00215 	stw	r3,8(r6)
 10104ac:	20800317 	ldw	r2,12(r4)
 10104b0:	30800315 	stw	r2,12(r6)
 10104b4:	20c00117 	ldw	r3,4(r4)
 10104b8:	28800117 	ldw	r2,4(r5)
 10104bc:	3009883a 	mov	r4,r6
 10104c0:	1886703a 	and	r3,r3,r2
 10104c4:	2005883a 	mov	r2,r4
 10104c8:	30c00115 	stw	r3,4(r6)
 10104cc:	f800283a 	ret
 10104d0:	1a801716 	blt	r3,r10,1010530 <_fpadd_parts+0x17c>
 10104d4:	1815883a 	mov	r10,r3
 10104d8:	0019883a 	mov	r12,zero
 10104dc:	003fd006 	br	1010420 <_fpadd_parts+0x6c>
 10104e0:	2809883a 	mov	r4,r5
 10104e4:	2005883a 	mov	r2,r4
 10104e8:	f800283a 	ret
 10104ec:	6245c83a 	sub	r2,r12,r9
 10104f0:	003fd006 	br	1010434 <_fpadd_parts+0x80>
 10104f4:	30800217 	ldw	r2,8(r6)
 10104f8:	2006d07a 	srli	r3,r4,1
 10104fc:	2100004c 	andi	r4,r4,1
 1010500:	10800044 	addi	r2,r2,1
 1010504:	1906b03a 	or	r3,r3,r4
 1010508:	3009883a 	mov	r4,r6
 101050c:	30800215 	stw	r2,8(r6)
 1010510:	2005883a 	mov	r2,r4
 1010514:	30c00315 	stw	r3,12(r6)
 1010518:	f800283a 	ret
 101051c:	4b09883a 	add	r4,r9,r12
 1010520:	30c00115 	stw	r3,4(r6)
 1010524:	32800215 	stw	r10,8(r6)
 1010528:	31000315 	stw	r4,12(r6)
 101052c:	003fd306 	br	101047c <_fpadd_parts+0xc8>
 1010530:	0013883a 	mov	r9,zero
 1010534:	003fba06 	br	1010420 <_fpadd_parts+0x6c>
 1010538:	01cfc83a 	sub	r7,zero,r7
 101053c:	003faf06 	br	10103fc <_fpadd_parts+0x48>
 1010540:	0089c83a 	sub	r4,zero,r2
 1010544:	00800044 	movi	r2,1
 1010548:	30800115 	stw	r2,4(r6)
 101054c:	32800215 	stw	r10,8(r6)
 1010550:	31000315 	stw	r4,12(r6)
 1010554:	003fbb06 	br	1010444 <_fpadd_parts+0x90>
 1010558:	583fb126 	beq	r11,zero,1010420 <_fpadd_parts+0x6c>
 101055c:	41c4983a 	sll	r2,r8,r7
 1010560:	61c6d83a 	srl	r3,r12,r7
 1010564:	51d5883a 	add	r10,r10,r7
 1010568:	10bfffc4 	addi	r2,r2,-1
 101056c:	6084703a 	and	r2,r12,r2
 1010570:	1004c03a 	cmpne	r2,r2,zero
 1010574:	1898b03a 	or	r12,r3,r2
 1010578:	003fa906 	br	1010420 <_fpadd_parts+0x6c>
 101057c:	11ffc31e 	bne	r2,r7,101048c <_fpadd_parts+0xd8>
 1010580:	28c00117 	ldw	r3,4(r5)
 1010584:	20800117 	ldw	r2,4(r4)
 1010588:	10ffc026 	beq	r2,r3,101048c <_fpadd_parts+0xd8>
 101058c:	01004074 	movhi	r4,257
 1010590:	210a7004 	addi	r4,r4,10688
 1010594:	003fbd06 	br	101048c <_fpadd_parts+0xd8>

01010598 <__subsf3>:
 1010598:	deffef04 	addi	sp,sp,-68
 101059c:	dcc00f15 	stw	r19,60(sp)
 10105a0:	dcc00204 	addi	r19,sp,8
 10105a4:	dc400e15 	stw	r17,56(sp)
 10105a8:	d9000015 	stw	r4,0(sp)
 10105ac:	d9400115 	stw	r5,4(sp)
 10105b0:	d809883a 	mov	r4,sp
 10105b4:	980b883a 	mov	r5,r19
 10105b8:	dc400604 	addi	r17,sp,24
 10105bc:	dfc01015 	stw	ra,64(sp)
 10105c0:	101141c0 	call	101141c <__unpack_f>
 10105c4:	d9000104 	addi	r4,sp,4
 10105c8:	880b883a 	mov	r5,r17
 10105cc:	101141c0 	call	101141c <__unpack_f>
 10105d0:	d8800717 	ldw	r2,28(sp)
 10105d4:	9809883a 	mov	r4,r19
 10105d8:	880b883a 	mov	r5,r17
 10105dc:	d9800a04 	addi	r6,sp,40
 10105e0:	1080005c 	xori	r2,r2,1
 10105e4:	d8800715 	stw	r2,28(sp)
 10105e8:	10103b40 	call	10103b4 <_fpadd_parts>
 10105ec:	1009883a 	mov	r4,r2
 10105f0:	10112bc0 	call	10112bc <__pack_f>
 10105f4:	dfc01017 	ldw	ra,64(sp)
 10105f8:	dcc00f17 	ldw	r19,60(sp)
 10105fc:	dc400e17 	ldw	r17,56(sp)
 1010600:	dec01104 	addi	sp,sp,68
 1010604:	f800283a 	ret

01010608 <__addsf3>:
 1010608:	deffef04 	addi	sp,sp,-68
 101060c:	dcc00f15 	stw	r19,60(sp)
 1010610:	dcc00204 	addi	r19,sp,8
 1010614:	dc400e15 	stw	r17,56(sp)
 1010618:	d9000015 	stw	r4,0(sp)
 101061c:	d9400115 	stw	r5,4(sp)
 1010620:	d809883a 	mov	r4,sp
 1010624:	980b883a 	mov	r5,r19
 1010628:	dc400604 	addi	r17,sp,24
 101062c:	dfc01015 	stw	ra,64(sp)
 1010630:	101141c0 	call	101141c <__unpack_f>
 1010634:	d9000104 	addi	r4,sp,4
 1010638:	880b883a 	mov	r5,r17
 101063c:	101141c0 	call	101141c <__unpack_f>
 1010640:	d9800a04 	addi	r6,sp,40
 1010644:	9809883a 	mov	r4,r19
 1010648:	880b883a 	mov	r5,r17
 101064c:	10103b40 	call	10103b4 <_fpadd_parts>
 1010650:	1009883a 	mov	r4,r2
 1010654:	10112bc0 	call	10112bc <__pack_f>
 1010658:	dfc01017 	ldw	ra,64(sp)
 101065c:	dcc00f17 	ldw	r19,60(sp)
 1010660:	dc400e17 	ldw	r17,56(sp)
 1010664:	dec01104 	addi	sp,sp,68
 1010668:	f800283a 	ret

0101066c <__mulsf3>:
 101066c:	deffef04 	addi	sp,sp,-68
 1010670:	dc400f15 	stw	r17,60(sp)
 1010674:	dc400204 	addi	r17,sp,8
 1010678:	dc000e15 	stw	r16,56(sp)
 101067c:	d9000015 	stw	r4,0(sp)
 1010680:	d9400115 	stw	r5,4(sp)
 1010684:	d809883a 	mov	r4,sp
 1010688:	880b883a 	mov	r5,r17
 101068c:	dc000604 	addi	r16,sp,24
 1010690:	dfc01015 	stw	ra,64(sp)
 1010694:	101141c0 	call	101141c <__unpack_f>
 1010698:	d9000104 	addi	r4,sp,4
 101069c:	800b883a 	mov	r5,r16
 10106a0:	101141c0 	call	101141c <__unpack_f>
 10106a4:	d9000217 	ldw	r4,8(sp)
 10106a8:	00800044 	movi	r2,1
 10106ac:	01400104 	movi	r5,4
 10106b0:	1100142e 	bgeu	r2,r4,1010704 <__mulsf3+0x98>
 10106b4:	d8c00617 	ldw	r3,24(sp)
 10106b8:	10c0052e 	bgeu	r2,r3,10106d0 <__mulsf3+0x64>
 10106bc:	21400f26 	beq	r4,r5,10106fc <__mulsf3+0x90>
 10106c0:	19405d26 	beq	r3,r5,1010838 <__mulsf3+0x1cc>
 10106c4:	00800084 	movi	r2,2
 10106c8:	20800e26 	beq	r4,r2,1010704 <__mulsf3+0x98>
 10106cc:	1880181e 	bne	r3,r2,1010730 <__mulsf3+0xc4>
 10106d0:	d8c00717 	ldw	r3,28(sp)
 10106d4:	d8800317 	ldw	r2,12(sp)
 10106d8:	8009883a 	mov	r4,r16
 10106dc:	10c4c03a 	cmpne	r2,r2,r3
 10106e0:	d8800715 	stw	r2,28(sp)
 10106e4:	10112bc0 	call	10112bc <__pack_f>
 10106e8:	dfc01017 	ldw	ra,64(sp)
 10106ec:	dc400f17 	ldw	r17,60(sp)
 10106f0:	dc000e17 	ldw	r16,56(sp)
 10106f4:	dec01104 	addi	sp,sp,68
 10106f8:	f800283a 	ret
 10106fc:	00800084 	movi	r2,2
 1010700:	18804f26 	beq	r3,r2,1010840 <__mulsf3+0x1d4>
 1010704:	d8800317 	ldw	r2,12(sp)
 1010708:	d8c00717 	ldw	r3,28(sp)
 101070c:	8809883a 	mov	r4,r17
 1010710:	10c4c03a 	cmpne	r2,r2,r3
 1010714:	d8800315 	stw	r2,12(sp)
 1010718:	10112bc0 	call	10112bc <__pack_f>
 101071c:	dfc01017 	ldw	ra,64(sp)
 1010720:	dc400f17 	ldw	r17,60(sp)
 1010724:	dc000e17 	ldw	r16,56(sp)
 1010728:	dec01104 	addi	sp,sp,68
 101072c:	f800283a 	ret
 1010730:	d8800517 	ldw	r2,20(sp)
 1010734:	da000917 	ldw	r8,36(sp)
 1010738:	0013883a 	mov	r9,zero
 101073c:	0007883a 	mov	r3,zero
 1010740:	480f883a 	mov	r7,r9
 1010744:	180b883a 	mov	r5,r3
 1010748:	400d883a 	mov	r6,r8
 101074c:	1009883a 	mov	r4,r2
 1010750:	10111180 	call	1011118 <__muldi3>
 1010754:	da800417 	ldw	r10,16(sp)
 1010758:	d9800817 	ldw	r6,32(sp)
 101075c:	da400317 	ldw	r9,12(sp)
 1010760:	52800084 	addi	r10,r10,2
 1010764:	3295883a 	add	r10,r6,r10
 1010768:	d9800717 	ldw	r6,28(sp)
 101076c:	180b883a 	mov	r5,r3
 1010770:	180f883a 	mov	r7,r3
 1010774:	4992c03a 	cmpne	r9,r9,r6
 1010778:	da400b15 	stw	r9,44(sp)
 101077c:	1007883a 	mov	r3,r2
 1010780:	da800c15 	stw	r10,48(sp)
 1010784:	2800070e 	bge	r5,zero,10107a4 <__mulsf3+0x138>
 1010788:	2880004c 	andi	r2,r5,1
 101078c:	1005003a 	cmpeq	r2,r2,zero
 1010790:	500d883a 	mov	r6,r10
 1010794:	10001e26 	beq	r2,zero,1010810 <__mulsf3+0x1a4>
 1010798:	380ed07a 	srli	r7,r7,1
 101079c:	31800044 	addi	r6,r6,1
 10107a0:	d9800c15 	stw	r6,48(sp)
 10107a4:	01100034 	movhi	r4,16384
 10107a8:	213fffc4 	addi	r4,r4,-1
 10107ac:	21c00b36 	bltu	r4,r7,10107dc <__mulsf3+0x170>
 10107b0:	d8800c17 	ldw	r2,48(sp)
 10107b4:	00000206 	br	10107c0 <__mulsf3+0x154>
 10107b8:	18c7883a 	add	r3,r3,r3
 10107bc:	21c00636 	bltu	r4,r7,10107d8 <__mulsf3+0x16c>
 10107c0:	10bfffc4 	addi	r2,r2,-1
 10107c4:	39cf883a 	add	r7,r7,r7
 10107c8:	183ffb0e 	bge	r3,zero,10107b8 <__mulsf3+0x14c>
 10107cc:	39c00054 	ori	r7,r7,1
 10107d0:	18c7883a 	add	r3,r3,r3
 10107d4:	21fffa2e 	bgeu	r4,r7,10107c0 <__mulsf3+0x154>
 10107d8:	d8800c15 	stw	r2,48(sp)
 10107dc:	39001fcc 	andi	r4,r7,127
 10107e0:	00801004 	movi	r2,64
 10107e4:	20800d26 	beq	r4,r2,101081c <__mulsf3+0x1b0>
 10107e8:	008000c4 	movi	r2,3
 10107ec:	d9000a04 	addi	r4,sp,40
 10107f0:	d9c00d15 	stw	r7,52(sp)
 10107f4:	d8800a15 	stw	r2,40(sp)
 10107f8:	10112bc0 	call	10112bc <__pack_f>
 10107fc:	dfc01017 	ldw	ra,64(sp)
 1010800:	dc400f17 	ldw	r17,60(sp)
 1010804:	dc000e17 	ldw	r16,56(sp)
 1010808:	dec01104 	addi	sp,sp,68
 101080c:	f800283a 	ret
 1010810:	1804d07a 	srli	r2,r3,1
 1010814:	10e00034 	orhi	r3,r2,32768
 1010818:	003fdf06 	br	1010798 <__mulsf3+0x12c>
 101081c:	3880200c 	andi	r2,r7,128
 1010820:	103ff11e 	bne	r2,zero,10107e8 <__mulsf3+0x17c>
 1010824:	183ff026 	beq	r3,zero,10107e8 <__mulsf3+0x17c>
 1010828:	3907883a 	add	r3,r7,r4
 101082c:	00bfe004 	movi	r2,-128
 1010830:	188e703a 	and	r7,r3,r2
 1010834:	003fec06 	br	10107e8 <__mulsf3+0x17c>
 1010838:	00800084 	movi	r2,2
 101083c:	20bfa41e 	bne	r4,r2,10106d0 <__mulsf3+0x64>
 1010840:	01004074 	movhi	r4,257
 1010844:	210a7004 	addi	r4,r4,10688
 1010848:	003fb306 	br	1010718 <__mulsf3+0xac>

0101084c <__divsf3>:
 101084c:	defff304 	addi	sp,sp,-52
 1010850:	dc400b15 	stw	r17,44(sp)
 1010854:	dc400204 	addi	r17,sp,8
 1010858:	dc000a15 	stw	r16,40(sp)
 101085c:	d9000015 	stw	r4,0(sp)
 1010860:	d9400115 	stw	r5,4(sp)
 1010864:	d809883a 	mov	r4,sp
 1010868:	880b883a 	mov	r5,r17
 101086c:	dc000604 	addi	r16,sp,24
 1010870:	dfc00c15 	stw	ra,48(sp)
 1010874:	101141c0 	call	101141c <__unpack_f>
 1010878:	d9000104 	addi	r4,sp,4
 101087c:	800b883a 	mov	r5,r16
 1010880:	101141c0 	call	101141c <__unpack_f>
 1010884:	d9000217 	ldw	r4,8(sp)
 1010888:	00800044 	movi	r2,1
 101088c:	01800104 	movi	r6,4
 1010890:	11000a2e 	bgeu	r2,r4,10108bc <__divsf3+0x70>
 1010894:	d9400617 	ldw	r5,24(sp)
 1010898:	1140432e 	bgeu	r2,r5,10109a8 <__divsf3+0x15c>
 101089c:	d8800317 	ldw	r2,12(sp)
 10108a0:	d8c00717 	ldw	r3,28(sp)
 10108a4:	10c4f03a 	xor	r2,r2,r3
 10108a8:	d8800315 	stw	r2,12(sp)
 10108ac:	21800226 	beq	r4,r6,10108b8 <__divsf3+0x6c>
 10108b0:	00800084 	movi	r2,2
 10108b4:	2080101e 	bne	r4,r2,10108f8 <__divsf3+0xac>
 10108b8:	29000726 	beq	r5,r4,10108d8 <__divsf3+0x8c>
 10108bc:	8809883a 	mov	r4,r17
 10108c0:	10112bc0 	call	10112bc <__pack_f>
 10108c4:	dfc00c17 	ldw	ra,48(sp)
 10108c8:	dc400b17 	ldw	r17,44(sp)
 10108cc:	dc000a17 	ldw	r16,40(sp)
 10108d0:	dec00d04 	addi	sp,sp,52
 10108d4:	f800283a 	ret
 10108d8:	01004074 	movhi	r4,257
 10108dc:	210a7004 	addi	r4,r4,10688
 10108e0:	10112bc0 	call	10112bc <__pack_f>
 10108e4:	dfc00c17 	ldw	ra,48(sp)
 10108e8:	dc400b17 	ldw	r17,44(sp)
 10108ec:	dc000a17 	ldw	r16,40(sp)
 10108f0:	dec00d04 	addi	sp,sp,52
 10108f4:	f800283a 	ret
 10108f8:	29802d26 	beq	r5,r6,10109b0 <__divsf3+0x164>
 10108fc:	28801a26 	beq	r5,r2,1010968 <__divsf3+0x11c>
 1010900:	d8c00417 	ldw	r3,16(sp)
 1010904:	d8800817 	ldw	r2,32(sp)
 1010908:	d9000517 	ldw	r4,20(sp)
 101090c:	d9800917 	ldw	r6,36(sp)
 1010910:	1885c83a 	sub	r2,r3,r2
 1010914:	d8800415 	stw	r2,16(sp)
 1010918:	2180032e 	bgeu	r4,r6,1010928 <__divsf3+0xdc>
 101091c:	10bfffc4 	addi	r2,r2,-1
 1010920:	d8800415 	stw	r2,16(sp)
 1010924:	2109883a 	add	r4,r4,r4
 1010928:	01500034 	movhi	r5,16384
 101092c:	0007883a 	mov	r3,zero
 1010930:	0005883a 	mov	r2,zero
 1010934:	01c007c4 	movi	r7,31
 1010938:	10800044 	addi	r2,r2,1
 101093c:	21800236 	bltu	r4,r6,1010948 <__divsf3+0xfc>
 1010940:	1946b03a 	or	r3,r3,r5
 1010944:	2189c83a 	sub	r4,r4,r6
 1010948:	280ad07a 	srli	r5,r5,1
 101094c:	2109883a 	add	r4,r4,r4
 1010950:	11fff91e 	bne	r2,r7,1010938 <__divsf3+0xec>
 1010954:	19401fcc 	andi	r5,r3,127
 1010958:	00801004 	movi	r2,64
 101095c:	28800a26 	beq	r5,r2,1010988 <__divsf3+0x13c>
 1010960:	d8c00515 	stw	r3,20(sp)
 1010964:	003fd506 	br	10108bc <__divsf3+0x70>
 1010968:	8809883a 	mov	r4,r17
 101096c:	d9800215 	stw	r6,8(sp)
 1010970:	10112bc0 	call	10112bc <__pack_f>
 1010974:	dfc00c17 	ldw	ra,48(sp)
 1010978:	dc400b17 	ldw	r17,44(sp)
 101097c:	dc000a17 	ldw	r16,40(sp)
 1010980:	dec00d04 	addi	sp,sp,52
 1010984:	f800283a 	ret
 1010988:	1880200c 	andi	r2,r3,128
 101098c:	103ff41e 	bne	r2,zero,1010960 <__divsf3+0x114>
 1010990:	203ff326 	beq	r4,zero,1010960 <__divsf3+0x114>
 1010994:	1947883a 	add	r3,r3,r5
 1010998:	00bfe004 	movi	r2,-128
 101099c:	1886703a 	and	r3,r3,r2
 10109a0:	d8c00515 	stw	r3,20(sp)
 10109a4:	003fc506 	br	10108bc <__divsf3+0x70>
 10109a8:	8009883a 	mov	r4,r16
 10109ac:	003fc406 	br	10108c0 <__divsf3+0x74>
 10109b0:	8809883a 	mov	r4,r17
 10109b4:	d8000515 	stw	zero,20(sp)
 10109b8:	d8000415 	stw	zero,16(sp)
 10109bc:	003fc006 	br	10108c0 <__divsf3+0x74>

010109c0 <__fixsfsi>:
 10109c0:	defffa04 	addi	sp,sp,-24
 10109c4:	d9000015 	stw	r4,0(sp)
 10109c8:	d9400104 	addi	r5,sp,4
 10109cc:	d809883a 	mov	r4,sp
 10109d0:	dfc00515 	stw	ra,20(sp)
 10109d4:	101141c0 	call	101141c <__unpack_f>
 10109d8:	d8c00117 	ldw	r3,4(sp)
 10109dc:	00800084 	movi	r2,2
 10109e0:	1880041e 	bne	r3,r2,10109f4 <__fixsfsi+0x34>
 10109e4:	0005883a 	mov	r2,zero
 10109e8:	dfc00517 	ldw	ra,20(sp)
 10109ec:	dec00604 	addi	sp,sp,24
 10109f0:	f800283a 	ret
 10109f4:	00800044 	movi	r2,1
 10109f8:	10fffa2e 	bgeu	r2,r3,10109e4 <__fixsfsi+0x24>
 10109fc:	00800104 	movi	r2,4
 1010a00:	18800426 	beq	r3,r2,1010a14 <__fixsfsi+0x54>
 1010a04:	d8800317 	ldw	r2,12(sp)
 1010a08:	103ff616 	blt	r2,zero,10109e4 <__fixsfsi+0x24>
 1010a0c:	00c00784 	movi	r3,30
 1010a10:	1880070e 	bge	r3,r2,1010a30 <__fixsfsi+0x70>
 1010a14:	d8800217 	ldw	r2,8(sp)
 1010a18:	10000c1e 	bne	r2,zero,1010a4c <__fixsfsi+0x8c>
 1010a1c:	00a00034 	movhi	r2,32768
 1010a20:	10bfffc4 	addi	r2,r2,-1
 1010a24:	dfc00517 	ldw	ra,20(sp)
 1010a28:	dec00604 	addi	sp,sp,24
 1010a2c:	f800283a 	ret
 1010a30:	1885c83a 	sub	r2,r3,r2
 1010a34:	d9000217 	ldw	r4,8(sp)
 1010a38:	d8c00417 	ldw	r3,16(sp)
 1010a3c:	1884d83a 	srl	r2,r3,r2
 1010a40:	203fe926 	beq	r4,zero,10109e8 <__fixsfsi+0x28>
 1010a44:	0085c83a 	sub	r2,zero,r2
 1010a48:	003fe706 	br	10109e8 <__fixsfsi+0x28>
 1010a4c:	00a00034 	movhi	r2,32768
 1010a50:	003fe506 	br	10109e8 <__fixsfsi+0x28>

01010a54 <__extendsfdf2>:
 1010a54:	defff904 	addi	sp,sp,-28
 1010a58:	d9000115 	stw	r4,4(sp)
 1010a5c:	d9400204 	addi	r5,sp,8
 1010a60:	d9000104 	addi	r4,sp,4
 1010a64:	dfc00615 	stw	ra,24(sp)
 1010a68:	101141c0 	call	101141c <__unpack_f>
 1010a6c:	d9c00517 	ldw	r7,20(sp)
 1010a70:	0011883a 	mov	r8,zero
 1010a74:	400697ba 	slli	r3,r8,30
 1010a78:	3812d0ba 	srli	r9,r7,2
 1010a7c:	380497ba 	slli	r2,r7,30
 1010a80:	d9000217 	ldw	r4,8(sp)
 1010a84:	d9400317 	ldw	r5,12(sp)
 1010a88:	d9800417 	ldw	r6,16(sp)
 1010a8c:	48c6b03a 	or	r3,r9,r3
 1010a90:	100f883a 	mov	r7,r2
 1010a94:	d8c00015 	stw	r3,0(sp)
 1010a98:	101106c0 	call	101106c <__make_dp>
 1010a9c:	dfc00617 	ldw	ra,24(sp)
 1010aa0:	dec00704 	addi	sp,sp,28
 1010aa4:	f800283a 	ret

01010aa8 <__floatunsisf>:
 1010aa8:	defff904 	addi	sp,sp,-28
 1010aac:	dc400515 	stw	r17,20(sp)
 1010ab0:	dc000415 	stw	r16,16(sp)
 1010ab4:	dfc00615 	stw	ra,24(sp)
 1010ab8:	04400784 	movi	r17,30
 1010abc:	2021883a 	mov	r16,r4
 1010ac0:	d8000115 	stw	zero,4(sp)
 1010ac4:	2000091e 	bne	r4,zero,1010aec <__floatunsisf+0x44>
 1010ac8:	00800084 	movi	r2,2
 1010acc:	d8800015 	stw	r2,0(sp)
 1010ad0:	d809883a 	mov	r4,sp
 1010ad4:	10112bc0 	call	10112bc <__pack_f>
 1010ad8:	dfc00617 	ldw	ra,24(sp)
 1010adc:	dc400517 	ldw	r17,20(sp)
 1010ae0:	dc000417 	ldw	r16,16(sp)
 1010ae4:	dec00704 	addi	sp,sp,28
 1010ae8:	f800283a 	ret
 1010aec:	008000c4 	movi	r2,3
 1010af0:	d9000315 	stw	r4,12(sp)
 1010af4:	d8800015 	stw	r2,0(sp)
 1010af8:	dc400215 	stw	r17,8(sp)
 1010afc:	101123c0 	call	101123c <__clzsi2>
 1010b00:	117fffc4 	addi	r5,r2,-1
 1010b04:	0147c83a 	sub	r3,zero,r5
 1010b08:	00800044 	movi	r2,1
 1010b0c:	10c4983a 	sll	r2,r2,r3
 1010b10:	80c6d83a 	srl	r3,r16,r3
 1010b14:	8949c83a 	sub	r4,r17,r5
 1010b18:	10bfffc4 	addi	r2,r2,-1
 1010b1c:	8084703a 	and	r2,r16,r2
 1010b20:	1004c03a 	cmpne	r2,r2,zero
 1010b24:	1886b03a 	or	r3,r3,r2
 1010b28:	28000c16 	blt	r5,zero,1010b5c <__floatunsisf+0xb4>
 1010b2c:	8144983a 	sll	r2,r16,r5
 1010b30:	8947c83a 	sub	r3,r17,r5
 1010b34:	283fe626 	beq	r5,zero,1010ad0 <__floatunsisf+0x28>
 1010b38:	d809883a 	mov	r4,sp
 1010b3c:	d8800315 	stw	r2,12(sp)
 1010b40:	d8c00215 	stw	r3,8(sp)
 1010b44:	10112bc0 	call	10112bc <__pack_f>
 1010b48:	dfc00617 	ldw	ra,24(sp)
 1010b4c:	dc400517 	ldw	r17,20(sp)
 1010b50:	dc000417 	ldw	r16,16(sp)
 1010b54:	dec00704 	addi	sp,sp,28
 1010b58:	f800283a 	ret
 1010b5c:	d8c00315 	stw	r3,12(sp)
 1010b60:	d9000215 	stw	r4,8(sp)
 1010b64:	003fda06 	br	1010ad0 <__floatunsisf+0x28>

01010b68 <_fpadd_parts>:
 1010b68:	defff804 	addi	sp,sp,-32
 1010b6c:	dcc00315 	stw	r19,12(sp)
 1010b70:	2027883a 	mov	r19,r4
 1010b74:	21000017 	ldw	r4,0(r4)
 1010b78:	00c00044 	movi	r3,1
 1010b7c:	dd400515 	stw	r21,20(sp)
 1010b80:	dd000415 	stw	r20,16(sp)
 1010b84:	ddc00715 	stw	r23,28(sp)
 1010b88:	dd800615 	stw	r22,24(sp)
 1010b8c:	dc800215 	stw	r18,8(sp)
 1010b90:	dc400115 	stw	r17,4(sp)
 1010b94:	dc000015 	stw	r16,0(sp)
 1010b98:	282b883a 	mov	r21,r5
 1010b9c:	3029883a 	mov	r20,r6
 1010ba0:	1900632e 	bgeu	r3,r4,1010d30 <_fpadd_parts+0x1c8>
 1010ba4:	28800017 	ldw	r2,0(r5)
 1010ba8:	1880812e 	bgeu	r3,r2,1010db0 <_fpadd_parts+0x248>
 1010bac:	00c00104 	movi	r3,4
 1010bb0:	20c0dc26 	beq	r4,r3,1010f24 <_fpadd_parts+0x3bc>
 1010bb4:	10c07e26 	beq	r2,r3,1010db0 <_fpadd_parts+0x248>
 1010bb8:	00c00084 	movi	r3,2
 1010bbc:	10c06726 	beq	r2,r3,1010d5c <_fpadd_parts+0x1f4>
 1010bc0:	20c07b26 	beq	r4,r3,1010db0 <_fpadd_parts+0x248>
 1010bc4:	9dc00217 	ldw	r23,8(r19)
 1010bc8:	28c00217 	ldw	r3,8(r5)
 1010bcc:	9c400317 	ldw	r17,12(r19)
 1010bd0:	2bc00317 	ldw	r15,12(r5)
 1010bd4:	b8cdc83a 	sub	r6,r23,r3
 1010bd8:	9c800417 	ldw	r18,16(r19)
 1010bdc:	2c000417 	ldw	r16,16(r5)
 1010be0:	3009883a 	mov	r4,r6
 1010be4:	30009716 	blt	r6,zero,1010e44 <_fpadd_parts+0x2dc>
 1010be8:	00800fc4 	movi	r2,63
 1010bec:	11806b16 	blt	r2,r6,1010d9c <_fpadd_parts+0x234>
 1010bf0:	0100a40e 	bge	zero,r4,1010e84 <_fpadd_parts+0x31c>
 1010bf4:	35bff804 	addi	r22,r6,-32
 1010bf8:	b000bc16 	blt	r22,zero,1010eec <_fpadd_parts+0x384>
 1010bfc:	8596d83a 	srl	r11,r16,r22
 1010c00:	0019883a 	mov	r12,zero
 1010c04:	0013883a 	mov	r9,zero
 1010c08:	01000044 	movi	r4,1
 1010c0c:	0015883a 	mov	r10,zero
 1010c10:	b000be16 	blt	r22,zero,1010f0c <_fpadd_parts+0x3a4>
 1010c14:	2590983a 	sll	r8,r4,r22
 1010c18:	000f883a 	mov	r7,zero
 1010c1c:	00bfffc4 	movi	r2,-1
 1010c20:	3889883a 	add	r4,r7,r2
 1010c24:	408b883a 	add	r5,r8,r2
 1010c28:	21cd803a 	cmpltu	r6,r4,r7
 1010c2c:	314b883a 	add	r5,r6,r5
 1010c30:	7904703a 	and	r2,r15,r4
 1010c34:	8146703a 	and	r3,r16,r5
 1010c38:	10c4b03a 	or	r2,r2,r3
 1010c3c:	10000226 	beq	r2,zero,1010c48 <_fpadd_parts+0xe0>
 1010c40:	02400044 	movi	r9,1
 1010c44:	0015883a 	mov	r10,zero
 1010c48:	5a5eb03a 	or	r15,r11,r9
 1010c4c:	62a0b03a 	or	r16,r12,r10
 1010c50:	99400117 	ldw	r5,4(r19)
 1010c54:	a8800117 	ldw	r2,4(r21)
 1010c58:	28806e26 	beq	r5,r2,1010e14 <_fpadd_parts+0x2ac>
 1010c5c:	28006626 	beq	r5,zero,1010df8 <_fpadd_parts+0x290>
 1010c60:	7c45c83a 	sub	r2,r15,r17
 1010c64:	7889803a 	cmpltu	r4,r15,r2
 1010c68:	8487c83a 	sub	r3,r16,r18
 1010c6c:	1909c83a 	sub	r4,r3,r4
 1010c70:	100d883a 	mov	r6,r2
 1010c74:	200f883a 	mov	r7,r4
 1010c78:	38007716 	blt	r7,zero,1010e58 <_fpadd_parts+0x2f0>
 1010c7c:	a5c00215 	stw	r23,8(r20)
 1010c80:	a1c00415 	stw	r7,16(r20)
 1010c84:	a0000115 	stw	zero,4(r20)
 1010c88:	a1800315 	stw	r6,12(r20)
 1010c8c:	a2000317 	ldw	r8,12(r20)
 1010c90:	a2400417 	ldw	r9,16(r20)
 1010c94:	00bfffc4 	movi	r2,-1
 1010c98:	408b883a 	add	r5,r8,r2
 1010c9c:	2a09803a 	cmpltu	r4,r5,r8
 1010ca0:	488d883a 	add	r6,r9,r2
 1010ca4:	01c40034 	movhi	r7,4096
 1010ca8:	39ffffc4 	addi	r7,r7,-1
 1010cac:	218d883a 	add	r6,r4,r6
 1010cb0:	39801736 	bltu	r7,r6,1010d10 <_fpadd_parts+0x1a8>
 1010cb4:	31c06526 	beq	r6,r7,1010e4c <_fpadd_parts+0x2e4>
 1010cb8:	a3000217 	ldw	r12,8(r20)
 1010cbc:	4209883a 	add	r4,r8,r8
 1010cc0:	00bfffc4 	movi	r2,-1
 1010cc4:	220f803a 	cmpltu	r7,r4,r8
 1010cc8:	4a4b883a 	add	r5,r9,r9
 1010ccc:	394f883a 	add	r7,r7,r5
 1010cd0:	2095883a 	add	r10,r4,r2
 1010cd4:	3897883a 	add	r11,r7,r2
 1010cd8:	510d803a 	cmpltu	r6,r10,r4
 1010cdc:	6099883a 	add	r12,r12,r2
 1010ce0:	32d7883a 	add	r11,r6,r11
 1010ce4:	00840034 	movhi	r2,4096
 1010ce8:	10bfffc4 	addi	r2,r2,-1
 1010cec:	2011883a 	mov	r8,r4
 1010cf0:	3813883a 	mov	r9,r7
 1010cf4:	a1000315 	stw	r4,12(r20)
 1010cf8:	a1c00415 	stw	r7,16(r20)
 1010cfc:	a3000215 	stw	r12,8(r20)
 1010d00:	12c00336 	bltu	r2,r11,1010d10 <_fpadd_parts+0x1a8>
 1010d04:	58bfed1e 	bne	r11,r2,1010cbc <_fpadd_parts+0x154>
 1010d08:	00bfff84 	movi	r2,-2
 1010d0c:	12bfeb2e 	bgeu	r2,r10,1010cbc <_fpadd_parts+0x154>
 1010d10:	a2800417 	ldw	r10,16(r20)
 1010d14:	008000c4 	movi	r2,3
 1010d18:	00c80034 	movhi	r3,8192
 1010d1c:	18ffffc4 	addi	r3,r3,-1
 1010d20:	a2400317 	ldw	r9,12(r20)
 1010d24:	a0800015 	stw	r2,0(r20)
 1010d28:	1a802336 	bltu	r3,r10,1010db8 <_fpadd_parts+0x250>
 1010d2c:	a027883a 	mov	r19,r20
 1010d30:	9805883a 	mov	r2,r19
 1010d34:	ddc00717 	ldw	r23,28(sp)
 1010d38:	dd800617 	ldw	r22,24(sp)
 1010d3c:	dd400517 	ldw	r21,20(sp)
 1010d40:	dd000417 	ldw	r20,16(sp)
 1010d44:	dcc00317 	ldw	r19,12(sp)
 1010d48:	dc800217 	ldw	r18,8(sp)
 1010d4c:	dc400117 	ldw	r17,4(sp)
 1010d50:	dc000017 	ldw	r16,0(sp)
 1010d54:	dec00804 	addi	sp,sp,32
 1010d58:	f800283a 	ret
 1010d5c:	20fff41e 	bne	r4,r3,1010d30 <_fpadd_parts+0x1c8>
 1010d60:	31000015 	stw	r4,0(r6)
 1010d64:	98800117 	ldw	r2,4(r19)
 1010d68:	30800115 	stw	r2,4(r6)
 1010d6c:	98c00217 	ldw	r3,8(r19)
 1010d70:	30c00215 	stw	r3,8(r6)
 1010d74:	98800317 	ldw	r2,12(r19)
 1010d78:	30800315 	stw	r2,12(r6)
 1010d7c:	98c00417 	ldw	r3,16(r19)
 1010d80:	30c00415 	stw	r3,16(r6)
 1010d84:	98800117 	ldw	r2,4(r19)
 1010d88:	28c00117 	ldw	r3,4(r5)
 1010d8c:	3027883a 	mov	r19,r6
 1010d90:	10c4703a 	and	r2,r2,r3
 1010d94:	30800115 	stw	r2,4(r6)
 1010d98:	003fe506 	br	1010d30 <_fpadd_parts+0x1c8>
 1010d9c:	1dc02616 	blt	r3,r23,1010e38 <_fpadd_parts+0x2d0>
 1010da0:	0023883a 	mov	r17,zero
 1010da4:	182f883a 	mov	r23,r3
 1010da8:	0025883a 	mov	r18,zero
 1010dac:	003fa806 	br	1010c50 <_fpadd_parts+0xe8>
 1010db0:	a827883a 	mov	r19,r21
 1010db4:	003fde06 	br	1010d30 <_fpadd_parts+0x1c8>
 1010db8:	01800044 	movi	r6,1
 1010dbc:	500497fa 	slli	r2,r10,31
 1010dc0:	4808d07a 	srli	r4,r9,1
 1010dc4:	518ad83a 	srl	r5,r10,r6
 1010dc8:	a2000217 	ldw	r8,8(r20)
 1010dcc:	1108b03a 	or	r4,r2,r4
 1010dd0:	0007883a 	mov	r3,zero
 1010dd4:	4984703a 	and	r2,r9,r6
 1010dd8:	208cb03a 	or	r6,r4,r2
 1010ddc:	28ceb03a 	or	r7,r5,r3
 1010de0:	42000044 	addi	r8,r8,1
 1010de4:	a027883a 	mov	r19,r20
 1010de8:	a1c00415 	stw	r7,16(r20)
 1010dec:	a2000215 	stw	r8,8(r20)
 1010df0:	a1800315 	stw	r6,12(r20)
 1010df4:	003fce06 	br	1010d30 <_fpadd_parts+0x1c8>
 1010df8:	8bc5c83a 	sub	r2,r17,r15
 1010dfc:	8889803a 	cmpltu	r4,r17,r2
 1010e00:	9407c83a 	sub	r3,r18,r16
 1010e04:	1909c83a 	sub	r4,r3,r4
 1010e08:	100d883a 	mov	r6,r2
 1010e0c:	200f883a 	mov	r7,r4
 1010e10:	003f9906 	br	1010c78 <_fpadd_parts+0x110>
 1010e14:	7c45883a 	add	r2,r15,r17
 1010e18:	13c9803a 	cmpltu	r4,r2,r15
 1010e1c:	8487883a 	add	r3,r16,r18
 1010e20:	20c9883a 	add	r4,r4,r3
 1010e24:	a1400115 	stw	r5,4(r20)
 1010e28:	a5c00215 	stw	r23,8(r20)
 1010e2c:	a0800315 	stw	r2,12(r20)
 1010e30:	a1000415 	stw	r4,16(r20)
 1010e34:	003fb606 	br	1010d10 <_fpadd_parts+0x1a8>
 1010e38:	001f883a 	mov	r15,zero
 1010e3c:	0021883a 	mov	r16,zero
 1010e40:	003f8306 	br	1010c50 <_fpadd_parts+0xe8>
 1010e44:	018dc83a 	sub	r6,zero,r6
 1010e48:	003f6706 	br	1010be8 <_fpadd_parts+0x80>
 1010e4c:	00bfff84 	movi	r2,-2
 1010e50:	117faf36 	bltu	r2,r5,1010d10 <_fpadd_parts+0x1a8>
 1010e54:	003f9806 	br	1010cb8 <_fpadd_parts+0x150>
 1010e58:	0005883a 	mov	r2,zero
 1010e5c:	1189c83a 	sub	r4,r2,r6
 1010e60:	1105803a 	cmpltu	r2,r2,r4
 1010e64:	01cbc83a 	sub	r5,zero,r7
 1010e68:	2885c83a 	sub	r2,r5,r2
 1010e6c:	01800044 	movi	r6,1
 1010e70:	a1800115 	stw	r6,4(r20)
 1010e74:	a5c00215 	stw	r23,8(r20)
 1010e78:	a1000315 	stw	r4,12(r20)
 1010e7c:	a0800415 	stw	r2,16(r20)
 1010e80:	003f8206 	br	1010c8c <_fpadd_parts+0x124>
 1010e84:	203f7226 	beq	r4,zero,1010c50 <_fpadd_parts+0xe8>
 1010e88:	35bff804 	addi	r22,r6,-32
 1010e8c:	b9af883a 	add	r23,r23,r6
 1010e90:	b0003116 	blt	r22,zero,1010f58 <_fpadd_parts+0x3f0>
 1010e94:	959ad83a 	srl	r13,r18,r22
 1010e98:	001d883a 	mov	r14,zero
 1010e9c:	000f883a 	mov	r7,zero
 1010ea0:	01000044 	movi	r4,1
 1010ea4:	0011883a 	mov	r8,zero
 1010ea8:	b0002516 	blt	r22,zero,1010f40 <_fpadd_parts+0x3d8>
 1010eac:	2594983a 	sll	r10,r4,r22
 1010eb0:	0013883a 	mov	r9,zero
 1010eb4:	00bfffc4 	movi	r2,-1
 1010eb8:	4889883a 	add	r4,r9,r2
 1010ebc:	508b883a 	add	r5,r10,r2
 1010ec0:	224d803a 	cmpltu	r6,r4,r9
 1010ec4:	314b883a 	add	r5,r6,r5
 1010ec8:	8904703a 	and	r2,r17,r4
 1010ecc:	9146703a 	and	r3,r18,r5
 1010ed0:	10c4b03a 	or	r2,r2,r3
 1010ed4:	10000226 	beq	r2,zero,1010ee0 <_fpadd_parts+0x378>
 1010ed8:	01c00044 	movi	r7,1
 1010edc:	0011883a 	mov	r8,zero
 1010ee0:	69e2b03a 	or	r17,r13,r7
 1010ee4:	7224b03a 	or	r18,r14,r8
 1010ee8:	003f5906 	br	1010c50 <_fpadd_parts+0xe8>
 1010eec:	8407883a 	add	r3,r16,r16
 1010ef0:	008007c4 	movi	r2,31
 1010ef4:	1185c83a 	sub	r2,r2,r6
 1010ef8:	1886983a 	sll	r3,r3,r2
 1010efc:	7996d83a 	srl	r11,r15,r6
 1010f00:	8198d83a 	srl	r12,r16,r6
 1010f04:	1ad6b03a 	or	r11,r3,r11
 1010f08:	003f3e06 	br	1010c04 <_fpadd_parts+0x9c>
 1010f0c:	2006d07a 	srli	r3,r4,1
 1010f10:	008007c4 	movi	r2,31
 1010f14:	1185c83a 	sub	r2,r2,r6
 1010f18:	1890d83a 	srl	r8,r3,r2
 1010f1c:	218e983a 	sll	r7,r4,r6
 1010f20:	003f3e06 	br	1010c1c <_fpadd_parts+0xb4>
 1010f24:	113f821e 	bne	r2,r4,1010d30 <_fpadd_parts+0x1c8>
 1010f28:	28c00117 	ldw	r3,4(r5)
 1010f2c:	98800117 	ldw	r2,4(r19)
 1010f30:	10ff7f26 	beq	r2,r3,1010d30 <_fpadd_parts+0x1c8>
 1010f34:	04c04074 	movhi	r19,257
 1010f38:	9cca7404 	addi	r19,r19,10704
 1010f3c:	003f7c06 	br	1010d30 <_fpadd_parts+0x1c8>
 1010f40:	2006d07a 	srli	r3,r4,1
 1010f44:	008007c4 	movi	r2,31
 1010f48:	1185c83a 	sub	r2,r2,r6
 1010f4c:	1894d83a 	srl	r10,r3,r2
 1010f50:	2192983a 	sll	r9,r4,r6
 1010f54:	003fd706 	br	1010eb4 <_fpadd_parts+0x34c>
 1010f58:	9487883a 	add	r3,r18,r18
 1010f5c:	008007c4 	movi	r2,31
 1010f60:	1185c83a 	sub	r2,r2,r6
 1010f64:	1886983a 	sll	r3,r3,r2
 1010f68:	899ad83a 	srl	r13,r17,r6
 1010f6c:	919cd83a 	srl	r14,r18,r6
 1010f70:	1b5ab03a 	or	r13,r3,r13
 1010f74:	003fc906 	br	1010e9c <_fpadd_parts+0x334>

01010f78 <__subdf3>:
 1010f78:	deffea04 	addi	sp,sp,-88
 1010f7c:	dcc01415 	stw	r19,80(sp)
 1010f80:	dcc00404 	addi	r19,sp,16
 1010f84:	2011883a 	mov	r8,r4
 1010f88:	2813883a 	mov	r9,r5
 1010f8c:	dc401315 	stw	r17,76(sp)
 1010f90:	d809883a 	mov	r4,sp
 1010f94:	980b883a 	mov	r5,r19
 1010f98:	dc400904 	addi	r17,sp,36
 1010f9c:	dfc01515 	stw	ra,84(sp)
 1010fa0:	da400115 	stw	r9,4(sp)
 1010fa4:	d9c00315 	stw	r7,12(sp)
 1010fa8:	da000015 	stw	r8,0(sp)
 1010fac:	d9800215 	stw	r6,8(sp)
 1010fb0:	10118240 	call	1011824 <__unpack_d>
 1010fb4:	d9000204 	addi	r4,sp,8
 1010fb8:	880b883a 	mov	r5,r17
 1010fbc:	10118240 	call	1011824 <__unpack_d>
 1010fc0:	d8800a17 	ldw	r2,40(sp)
 1010fc4:	880b883a 	mov	r5,r17
 1010fc8:	9809883a 	mov	r4,r19
 1010fcc:	d9800e04 	addi	r6,sp,56
 1010fd0:	1080005c 	xori	r2,r2,1
 1010fd4:	d8800a15 	stw	r2,40(sp)
 1010fd8:	1010b680 	call	1010b68 <_fpadd_parts>
 1010fdc:	1009883a 	mov	r4,r2
 1010fe0:	10115100 	call	1011510 <__pack_d>
 1010fe4:	dfc01517 	ldw	ra,84(sp)
 1010fe8:	dcc01417 	ldw	r19,80(sp)
 1010fec:	dc401317 	ldw	r17,76(sp)
 1010ff0:	dec01604 	addi	sp,sp,88
 1010ff4:	f800283a 	ret

01010ff8 <__adddf3>:
 1010ff8:	deffea04 	addi	sp,sp,-88
 1010ffc:	dcc01415 	stw	r19,80(sp)
 1011000:	dcc00404 	addi	r19,sp,16
 1011004:	2011883a 	mov	r8,r4
 1011008:	2813883a 	mov	r9,r5
 101100c:	dc401315 	stw	r17,76(sp)
 1011010:	d809883a 	mov	r4,sp
 1011014:	980b883a 	mov	r5,r19
 1011018:	dc400904 	addi	r17,sp,36
 101101c:	dfc01515 	stw	ra,84(sp)
 1011020:	da400115 	stw	r9,4(sp)
 1011024:	d9c00315 	stw	r7,12(sp)
 1011028:	da000015 	stw	r8,0(sp)
 101102c:	d9800215 	stw	r6,8(sp)
 1011030:	10118240 	call	1011824 <__unpack_d>
 1011034:	d9000204 	addi	r4,sp,8
 1011038:	880b883a 	mov	r5,r17
 101103c:	10118240 	call	1011824 <__unpack_d>
 1011040:	d9800e04 	addi	r6,sp,56
 1011044:	9809883a 	mov	r4,r19
 1011048:	880b883a 	mov	r5,r17
 101104c:	1010b680 	call	1010b68 <_fpadd_parts>
 1011050:	1009883a 	mov	r4,r2
 1011054:	10115100 	call	1011510 <__pack_d>
 1011058:	dfc01517 	ldw	ra,84(sp)
 101105c:	dcc01417 	ldw	r19,80(sp)
 1011060:	dc401317 	ldw	r17,76(sp)
 1011064:	dec01604 	addi	sp,sp,88
 1011068:	f800283a 	ret

0101106c <__make_dp>:
 101106c:	defff904 	addi	sp,sp,-28
 1011070:	d8c00717 	ldw	r3,28(sp)
 1011074:	d9000015 	stw	r4,0(sp)
 1011078:	d809883a 	mov	r4,sp
 101107c:	dfc00515 	stw	ra,20(sp)
 1011080:	d9c00615 	stw	r7,24(sp)
 1011084:	d9400115 	stw	r5,4(sp)
 1011088:	d9800215 	stw	r6,8(sp)
 101108c:	d8c00415 	stw	r3,16(sp)
 1011090:	d9c00315 	stw	r7,12(sp)
 1011094:	10115100 	call	1011510 <__pack_d>
 1011098:	dfc00517 	ldw	ra,20(sp)
 101109c:	dec00704 	addi	sp,sp,28
 10110a0:	f800283a 	ret

010110a4 <__truncdfsf2>:
 10110a4:	defff804 	addi	sp,sp,-32
 10110a8:	2005883a 	mov	r2,r4
 10110ac:	2807883a 	mov	r3,r5
 10110b0:	d809883a 	mov	r4,sp
 10110b4:	d9400204 	addi	r5,sp,8
 10110b8:	d8c00115 	stw	r3,4(sp)
 10110bc:	d8800015 	stw	r2,0(sp)
 10110c0:	dfc00715 	stw	ra,28(sp)
 10110c4:	10118240 	call	1011824 <__unpack_d>
 10110c8:	d9c00517 	ldw	r7,20(sp)
 10110cc:	da000617 	ldw	r8,24(sp)
 10110d0:	02d00034 	movhi	r11,16384
 10110d4:	5affffc4 	addi	r11,r11,-1
 10110d8:	3812d7ba 	srli	r9,r7,30
 10110dc:	401a90ba 	slli	r13,r8,2
 10110e0:	3ac4703a 	and	r2,r7,r11
 10110e4:	0007883a 	mov	r3,zero
 10110e8:	6a52b03a 	or	r9,r13,r9
 10110ec:	10c4b03a 	or	r2,r2,r3
 10110f0:	d9000217 	ldw	r4,8(sp)
 10110f4:	d9400317 	ldw	r5,12(sp)
 10110f8:	d9800417 	ldw	r6,16(sp)
 10110fc:	480f883a 	mov	r7,r9
 1011100:	10000126 	beq	r2,zero,1011108 <__truncdfsf2+0x64>
 1011104:	49c00054 	ori	r7,r9,1
 1011108:	10114e40 	call	10114e4 <__make_fp>
 101110c:	dfc00717 	ldw	ra,28(sp)
 1011110:	dec00804 	addi	sp,sp,32
 1011114:	f800283a 	ret

01011118 <__muldi3>:
 1011118:	defff204 	addi	sp,sp,-56
 101111c:	df000c15 	stw	fp,48(sp)
 1011120:	3038d43a 	srli	fp,r6,16
 1011124:	dd000815 	stw	r20,32(sp)
 1011128:	dc400515 	stw	r17,20(sp)
 101112c:	2028d43a 	srli	r20,r4,16
 1011130:	247fffcc 	andi	r17,r4,65535
 1011134:	dc000415 	stw	r16,16(sp)
 1011138:	343fffcc 	andi	r16,r6,65535
 101113c:	dcc00715 	stw	r19,28(sp)
 1011140:	d9000015 	stw	r4,0(sp)
 1011144:	2827883a 	mov	r19,r5
 1011148:	8809883a 	mov	r4,r17
 101114c:	d9400115 	stw	r5,4(sp)
 1011150:	800b883a 	mov	r5,r16
 1011154:	d9800215 	stw	r6,8(sp)
 1011158:	dfc00d15 	stw	ra,52(sp)
 101115c:	d9c00315 	stw	r7,12(sp)
 1011160:	dd800a15 	stw	r22,40(sp)
 1011164:	dd400915 	stw	r21,36(sp)
 1011168:	302d883a 	mov	r22,r6
 101116c:	ddc00b15 	stw	r23,44(sp)
 1011170:	dc800615 	stw	r18,24(sp)
 1011174:	101195c0 	call	101195c <__mulsi3>
 1011178:	8809883a 	mov	r4,r17
 101117c:	e00b883a 	mov	r5,fp
 1011180:	102b883a 	mov	r21,r2
 1011184:	101195c0 	call	101195c <__mulsi3>
 1011188:	800b883a 	mov	r5,r16
 101118c:	a009883a 	mov	r4,r20
 1011190:	1023883a 	mov	r17,r2
 1011194:	101195c0 	call	101195c <__mulsi3>
 1011198:	a009883a 	mov	r4,r20
 101119c:	e00b883a 	mov	r5,fp
 10111a0:	1021883a 	mov	r16,r2
 10111a4:	101195c0 	call	101195c <__mulsi3>
 10111a8:	a8ffffcc 	andi	r3,r21,65535
 10111ac:	a82ad43a 	srli	r21,r21,16
 10111b0:	8c23883a 	add	r17,r17,r16
 10111b4:	1011883a 	mov	r8,r2
 10111b8:	ac6b883a 	add	r21,r21,r17
 10111bc:	a804943a 	slli	r2,r21,16
 10111c0:	b009883a 	mov	r4,r22
 10111c4:	980b883a 	mov	r5,r19
 10111c8:	10c7883a 	add	r3,r2,r3
 10111cc:	a812d43a 	srli	r9,r21,16
 10111d0:	180d883a 	mov	r6,r3
 10111d4:	ac00022e 	bgeu	r21,r16,10111e0 <__muldi3+0xc8>
 10111d8:	00800074 	movhi	r2,1
 10111dc:	4091883a 	add	r8,r8,r2
 10111e0:	4267883a 	add	r19,r8,r9
 10111e4:	302d883a 	mov	r22,r6
 10111e8:	101195c0 	call	101195c <__mulsi3>
 10111ec:	d9400317 	ldw	r5,12(sp)
 10111f0:	d9000017 	ldw	r4,0(sp)
 10111f4:	1023883a 	mov	r17,r2
 10111f8:	101195c0 	call	101195c <__mulsi3>
 10111fc:	14cb883a 	add	r5,r2,r19
 1011200:	894b883a 	add	r5,r17,r5
 1011204:	b005883a 	mov	r2,r22
 1011208:	2807883a 	mov	r3,r5
 101120c:	dfc00d17 	ldw	ra,52(sp)
 1011210:	df000c17 	ldw	fp,48(sp)
 1011214:	ddc00b17 	ldw	r23,44(sp)
 1011218:	dd800a17 	ldw	r22,40(sp)
 101121c:	dd400917 	ldw	r21,36(sp)
 1011220:	dd000817 	ldw	r20,32(sp)
 1011224:	dcc00717 	ldw	r19,28(sp)
 1011228:	dc800617 	ldw	r18,24(sp)
 101122c:	dc400517 	ldw	r17,20(sp)
 1011230:	dc000417 	ldw	r16,16(sp)
 1011234:	dec00e04 	addi	sp,sp,56
 1011238:	f800283a 	ret

0101123c <__clzsi2>:
 101123c:	00bfffd4 	movui	r2,65535
 1011240:	11000e36 	bltu	r2,r4,101127c <__clzsi2+0x40>
 1011244:	00803fc4 	movi	r2,255
 1011248:	01400204 	movi	r5,8
 101124c:	0007883a 	mov	r3,zero
 1011250:	11001036 	bltu	r2,r4,1011294 <__clzsi2+0x58>
 1011254:	000b883a 	mov	r5,zero
 1011258:	20c6d83a 	srl	r3,r4,r3
 101125c:	00804074 	movhi	r2,257
 1011260:	108a7904 	addi	r2,r2,10724
 1011264:	1887883a 	add	r3,r3,r2
 1011268:	18800003 	ldbu	r2,0(r3)
 101126c:	00c00804 	movi	r3,32
 1011270:	2885883a 	add	r2,r5,r2
 1011274:	1885c83a 	sub	r2,r3,r2
 1011278:	f800283a 	ret
 101127c:	01400404 	movi	r5,16
 1011280:	00804034 	movhi	r2,256
 1011284:	10bfffc4 	addi	r2,r2,-1
 1011288:	2807883a 	mov	r3,r5
 101128c:	113ff22e 	bgeu	r2,r4,1011258 <__clzsi2+0x1c>
 1011290:	01400604 	movi	r5,24
 1011294:	2807883a 	mov	r3,r5
 1011298:	20c6d83a 	srl	r3,r4,r3
 101129c:	00804074 	movhi	r2,257
 10112a0:	108a7904 	addi	r2,r2,10724
 10112a4:	1887883a 	add	r3,r3,r2
 10112a8:	18800003 	ldbu	r2,0(r3)
 10112ac:	00c00804 	movi	r3,32
 10112b0:	2885883a 	add	r2,r5,r2
 10112b4:	1885c83a 	sub	r2,r3,r2
 10112b8:	f800283a 	ret

010112bc <__pack_f>:
 10112bc:	20c00017 	ldw	r3,0(r4)
 10112c0:	01c00044 	movi	r7,1
 10112c4:	21800317 	ldw	r6,12(r4)
 10112c8:	21400117 	ldw	r5,4(r4)
 10112cc:	38c02d2e 	bgeu	r7,r3,1011384 <__pack_f+0xc8>
 10112d0:	00800104 	movi	r2,4
 10112d4:	18802826 	beq	r3,r2,1011378 <__pack_f+0xbc>
 10112d8:	00800084 	movi	r2,2
 10112dc:	18800126 	beq	r3,r2,10112e4 <__pack_f+0x28>
 10112e0:	3000101e 	bne	r6,zero,1011324 <__pack_f+0x68>
 10112e4:	000d883a 	mov	r6,zero
 10112e8:	0007883a 	mov	r3,zero
 10112ec:	19003fcc 	andi	r4,r3,255
 10112f0:	200895fa 	slli	r4,r4,23
 10112f4:	00c02034 	movhi	r3,128
 10112f8:	18ffffc4 	addi	r3,r3,-1
 10112fc:	30c6703a 	and	r3,r6,r3
 1011300:	10a0002c 	andhi	r2,r2,32768
 1011304:	10c4b03a 	or	r2,r2,r3
 1011308:	280a97fa 	slli	r5,r5,31
 101130c:	1104b03a 	or	r2,r2,r4
 1011310:	00e00034 	movhi	r3,32768
 1011314:	18ffffc4 	addi	r3,r3,-1
 1011318:	10c4703a 	and	r2,r2,r3
 101131c:	1144b03a 	or	r2,r2,r5
 1011320:	f800283a 	ret
 1011324:	21000217 	ldw	r4,8(r4)
 1011328:	00bfe084 	movi	r2,-126
 101132c:	20801b16 	blt	r4,r2,101139c <__pack_f+0xe0>
 1011330:	00801fc4 	movi	r2,127
 1011334:	11001016 	blt	r2,r4,1011378 <__pack_f+0xbc>
 1011338:	308e703a 	and	r7,r6,r2
 101133c:	2087883a 	add	r3,r4,r2
 1011340:	00801004 	movi	r2,64
 1011344:	38800526 	beq	r7,r2,101135c <__pack_f+0xa0>
 1011348:	31800fc4 	addi	r6,r6,63
 101134c:	30000716 	blt	r6,zero,101136c <__pack_f+0xb0>
 1011350:	300490ba 	slli	r2,r6,2
 1011354:	100cd27a 	srli	r6,r2,9
 1011358:	003fe406 	br	10112ec <__pack_f+0x30>
 101135c:	3080200c 	andi	r2,r6,128
 1011360:	103ffa26 	beq	r2,zero,101134c <__pack_f+0x90>
 1011364:	31cd883a 	add	r6,r6,r7
 1011368:	003ff806 	br	101134c <__pack_f+0x90>
 101136c:	300cd07a 	srli	r6,r6,1
 1011370:	18c00044 	addi	r3,r3,1
 1011374:	003ff606 	br	1011350 <__pack_f+0x94>
 1011378:	000d883a 	mov	r6,zero
 101137c:	00ffffc4 	movi	r3,-1
 1011380:	003fda06 	br	10112ec <__pack_f+0x30>
 1011384:	31800434 	orhi	r6,r6,16
 1011388:	00802034 	movhi	r2,128
 101138c:	10bfffc4 	addi	r2,r2,-1
 1011390:	308c703a 	and	r6,r6,r2
 1011394:	00ffffc4 	movi	r3,-1
 1011398:	003fd406 	br	10112ec <__pack_f+0x30>
 101139c:	1109c83a 	sub	r4,r2,r4
 10113a0:	00800644 	movi	r2,25
 10113a4:	11001216 	blt	r2,r4,10113f0 <__pack_f+0x134>
 10113a8:	3904983a 	sll	r2,r7,r4
 10113ac:	3106d83a 	srl	r3,r6,r4
 10113b0:	10bfffc4 	addi	r2,r2,-1
 10113b4:	3084703a 	and	r2,r6,r2
 10113b8:	1004c03a 	cmpne	r2,r2,zero
 10113bc:	1886b03a 	or	r3,r3,r2
 10113c0:	19001fcc 	andi	r4,r3,127
 10113c4:	00801004 	movi	r2,64
 10113c8:	20800c26 	beq	r4,r2,10113fc <__pack_f+0x140>
 10113cc:	18c00fc4 	addi	r3,r3,63
 10113d0:	00900034 	movhi	r2,16384
 10113d4:	10bfffc4 	addi	r2,r2,-1
 10113d8:	180cd1fa 	srli	r6,r3,7
 10113dc:	10c7803a 	cmpltu	r3,r2,r3
 10113e0:	00802034 	movhi	r2,128
 10113e4:	10bfffc4 	addi	r2,r2,-1
 10113e8:	308c703a 	and	r6,r6,r2
 10113ec:	003fbf06 	br	10112ec <__pack_f+0x30>
 10113f0:	0007883a 	mov	r3,zero
 10113f4:	000d883a 	mov	r6,zero
 10113f8:	003ff906 	br	10113e0 <__pack_f+0x124>
 10113fc:	1880200c 	andi	r2,r3,128
 1011400:	10000126 	beq	r2,zero,1011408 <__pack_f+0x14c>
 1011404:	1907883a 	add	r3,r3,r4
 1011408:	180cd1fa 	srli	r6,r3,7
 101140c:	00900034 	movhi	r2,16384
 1011410:	10bfffc4 	addi	r2,r2,-1
 1011414:	10c7803a 	cmpltu	r3,r2,r3
 1011418:	003ff106 	br	10113e0 <__pack_f+0x124>

0101141c <__unpack_f>:
 101141c:	21800017 	ldw	r6,0(r4)
 1011420:	00c02034 	movhi	r3,128
 1011424:	18ffffc4 	addi	r3,r3,-1
 1011428:	3004d5fa 	srli	r2,r6,23
 101142c:	3008d7fa 	srli	r4,r6,31
 1011430:	30ce703a 	and	r7,r6,r3
 1011434:	10c03fcc 	andi	r3,r2,255
 1011438:	29000115 	stw	r4,4(r5)
 101143c:	1800131e 	bne	r3,zero,101148c <__unpack_f+0x70>
 1011440:	38000f26 	beq	r7,zero,1011480 <__unpack_f+0x64>
 1011444:	380691fa 	slli	r3,r7,7
 1011448:	01bfe084 	movi	r6,-126
 101144c:	008000c4 	movi	r2,3
 1011450:	01100034 	movhi	r4,16384
 1011454:	213fffc4 	addi	r4,r4,-1
 1011458:	28800015 	stw	r2,0(r5)
 101145c:	29800215 	stw	r6,8(r5)
 1011460:	20c00536 	bltu	r4,r3,1011478 <__unpack_f+0x5c>
 1011464:	3005883a 	mov	r2,r6
 1011468:	18c7883a 	add	r3,r3,r3
 101146c:	10bfffc4 	addi	r2,r2,-1
 1011470:	20fffd2e 	bgeu	r4,r3,1011468 <__unpack_f+0x4c>
 1011474:	28800215 	stw	r2,8(r5)
 1011478:	28c00315 	stw	r3,12(r5)
 101147c:	f800283a 	ret
 1011480:	00800084 	movi	r2,2
 1011484:	28800015 	stw	r2,0(r5)
 1011488:	f800283a 	ret
 101148c:	00803fc4 	movi	r2,255
 1011490:	18800826 	beq	r3,r2,10114b4 <__unpack_f+0x98>
 1011494:	380491fa 	slli	r2,r7,7
 1011498:	18ffe044 	addi	r3,r3,-127
 101149c:	28c00215 	stw	r3,8(r5)
 10114a0:	10900034 	orhi	r2,r2,16384
 10114a4:	28800315 	stw	r2,12(r5)
 10114a8:	008000c4 	movi	r2,3
 10114ac:	28800015 	stw	r2,0(r5)
 10114b0:	f800283a 	ret
 10114b4:	3800031e 	bne	r7,zero,10114c4 <__unpack_f+0xa8>
 10114b8:	00800104 	movi	r2,4
 10114bc:	28800015 	stw	r2,0(r5)
 10114c0:	f800283a 	ret
 10114c4:	3080042c 	andhi	r2,r6,16
 10114c8:	10000426 	beq	r2,zero,10114dc <__unpack_f+0xc0>
 10114cc:	00800044 	movi	r2,1
 10114d0:	28800015 	stw	r2,0(r5)
 10114d4:	29c00315 	stw	r7,12(r5)
 10114d8:	f800283a 	ret
 10114dc:	28000015 	stw	zero,0(r5)
 10114e0:	003ffc06 	br	10114d4 <__unpack_f+0xb8>

010114e4 <__make_fp>:
 10114e4:	defffb04 	addi	sp,sp,-20
 10114e8:	d9000015 	stw	r4,0(sp)
 10114ec:	d809883a 	mov	r4,sp
 10114f0:	dfc00415 	stw	ra,16(sp)
 10114f4:	d9400115 	stw	r5,4(sp)
 10114f8:	d9800215 	stw	r6,8(sp)
 10114fc:	d9c00315 	stw	r7,12(sp)
 1011500:	10112bc0 	call	10112bc <__pack_f>
 1011504:	dfc00417 	ldw	ra,16(sp)
 1011508:	dec00504 	addi	sp,sp,20
 101150c:	f800283a 	ret

01011510 <__pack_d>:
 1011510:	20c00017 	ldw	r3,0(r4)
 1011514:	defffd04 	addi	sp,sp,-12
 1011518:	dc000015 	stw	r16,0(sp)
 101151c:	dc800215 	stw	r18,8(sp)
 1011520:	dc400115 	stw	r17,4(sp)
 1011524:	00800044 	movi	r2,1
 1011528:	22000317 	ldw	r8,12(r4)
 101152c:	001f883a 	mov	r15,zero
 1011530:	22400417 	ldw	r9,16(r4)
 1011534:	24000117 	ldw	r16,4(r4)
 1011538:	10c0552e 	bgeu	r2,r3,1011690 <__pack_d+0x180>
 101153c:	00800104 	movi	r2,4
 1011540:	18804f26 	beq	r3,r2,1011680 <__pack_d+0x170>
 1011544:	00800084 	movi	r2,2
 1011548:	18800226 	beq	r3,r2,1011554 <__pack_d+0x44>
 101154c:	4244b03a 	or	r2,r8,r9
 1011550:	10001a1e 	bne	r2,zero,10115bc <__pack_d+0xac>
 1011554:	000d883a 	mov	r6,zero
 1011558:	000f883a 	mov	r7,zero
 101155c:	0011883a 	mov	r8,zero
 1011560:	00800434 	movhi	r2,16
 1011564:	10bfffc4 	addi	r2,r2,-1
 1011568:	301d883a 	mov	r14,r6
 101156c:	3884703a 	and	r2,r7,r2
 1011570:	400a953a 	slli	r5,r8,20
 1011574:	79bffc2c 	andhi	r6,r15,65520
 1011578:	308cb03a 	or	r6,r6,r2
 101157c:	00e00434 	movhi	r3,32784
 1011580:	18ffffc4 	addi	r3,r3,-1
 1011584:	800497fa 	slli	r2,r16,31
 1011588:	30c6703a 	and	r3,r6,r3
 101158c:	1946b03a 	or	r3,r3,r5
 1011590:	01600034 	movhi	r5,32768
 1011594:	297fffc4 	addi	r5,r5,-1
 1011598:	194a703a 	and	r5,r3,r5
 101159c:	288ab03a 	or	r5,r5,r2
 10115a0:	2807883a 	mov	r3,r5
 10115a4:	7005883a 	mov	r2,r14
 10115a8:	dc800217 	ldw	r18,8(sp)
 10115ac:	dc400117 	ldw	r17,4(sp)
 10115b0:	dc000017 	ldw	r16,0(sp)
 10115b4:	dec00304 	addi	sp,sp,12
 10115b8:	f800283a 	ret
 10115bc:	21000217 	ldw	r4,8(r4)
 10115c0:	00bf0084 	movi	r2,-1022
 10115c4:	20803f16 	blt	r4,r2,10116c4 <__pack_d+0x1b4>
 10115c8:	0080ffc4 	movi	r2,1023
 10115cc:	11002c16 	blt	r2,r4,1011680 <__pack_d+0x170>
 10115d0:	00803fc4 	movi	r2,255
 10115d4:	408c703a 	and	r6,r8,r2
 10115d8:	00802004 	movi	r2,128
 10115dc:	0007883a 	mov	r3,zero
 10115e0:	000f883a 	mov	r7,zero
 10115e4:	2280ffc4 	addi	r10,r4,1023
 10115e8:	30801e26 	beq	r6,r2,1011664 <__pack_d+0x154>
 10115ec:	00801fc4 	movi	r2,127
 10115f0:	4089883a 	add	r4,r8,r2
 10115f4:	220d803a 	cmpltu	r6,r4,r8
 10115f8:	324d883a 	add	r6,r6,r9
 10115fc:	2011883a 	mov	r8,r4
 1011600:	3013883a 	mov	r9,r6
 1011604:	00880034 	movhi	r2,8192
 1011608:	10bfffc4 	addi	r2,r2,-1
 101160c:	12400d36 	bltu	r2,r9,1011644 <__pack_d+0x134>
 1011610:	4804963a 	slli	r2,r9,24
 1011614:	400cd23a 	srli	r6,r8,8
 1011618:	480ed23a 	srli	r7,r9,8
 101161c:	013fffc4 	movi	r4,-1
 1011620:	118cb03a 	or	r6,r2,r6
 1011624:	01400434 	movhi	r5,16
 1011628:	297fffc4 	addi	r5,r5,-1
 101162c:	3104703a 	and	r2,r6,r4
 1011630:	3946703a 	and	r3,r7,r5
 1011634:	5201ffcc 	andi	r8,r10,2047
 1011638:	100d883a 	mov	r6,r2
 101163c:	180f883a 	mov	r7,r3
 1011640:	003fc706 	br	1011560 <__pack_d+0x50>
 1011644:	480897fa 	slli	r4,r9,31
 1011648:	4004d07a 	srli	r2,r8,1
 101164c:	4806d07a 	srli	r3,r9,1
 1011650:	52800044 	addi	r10,r10,1
 1011654:	2084b03a 	or	r2,r4,r2
 1011658:	1011883a 	mov	r8,r2
 101165c:	1813883a 	mov	r9,r3
 1011660:	003feb06 	br	1011610 <__pack_d+0x100>
 1011664:	383fe11e 	bne	r7,zero,10115ec <__pack_d+0xdc>
 1011668:	01004004 	movi	r4,256
 101166c:	4104703a 	and	r2,r8,r4
 1011670:	10c4b03a 	or	r2,r2,r3
 1011674:	103fe326 	beq	r2,zero,1011604 <__pack_d+0xf4>
 1011678:	3005883a 	mov	r2,r6
 101167c:	003fdc06 	br	10115f0 <__pack_d+0xe0>
 1011680:	000d883a 	mov	r6,zero
 1011684:	000f883a 	mov	r7,zero
 1011688:	0201ffc4 	movi	r8,2047
 101168c:	003fb406 	br	1011560 <__pack_d+0x50>
 1011690:	0005883a 	mov	r2,zero
 1011694:	00c00234 	movhi	r3,8
 1011698:	408cb03a 	or	r6,r8,r2
 101169c:	48ceb03a 	or	r7,r9,r3
 10116a0:	013fffc4 	movi	r4,-1
 10116a4:	01400434 	movhi	r5,16
 10116a8:	297fffc4 	addi	r5,r5,-1
 10116ac:	3104703a 	and	r2,r6,r4
 10116b0:	3946703a 	and	r3,r7,r5
 10116b4:	100d883a 	mov	r6,r2
 10116b8:	180f883a 	mov	r7,r3
 10116bc:	0201ffc4 	movi	r8,2047
 10116c0:	003fa706 	br	1011560 <__pack_d+0x50>
 10116c4:	1109c83a 	sub	r4,r2,r4
 10116c8:	00800e04 	movi	r2,56
 10116cc:	11004316 	blt	r2,r4,10117dc <__pack_d+0x2cc>
 10116d0:	21fff804 	addi	r7,r4,-32
 10116d4:	38004516 	blt	r7,zero,10117ec <__pack_d+0x2dc>
 10116d8:	49d8d83a 	srl	r12,r9,r7
 10116dc:	001b883a 	mov	r13,zero
 10116e0:	0023883a 	mov	r17,zero
 10116e4:	01400044 	movi	r5,1
 10116e8:	0025883a 	mov	r18,zero
 10116ec:	38004716 	blt	r7,zero,101180c <__pack_d+0x2fc>
 10116f0:	29d6983a 	sll	r11,r5,r7
 10116f4:	0015883a 	mov	r10,zero
 10116f8:	00bfffc4 	movi	r2,-1
 10116fc:	5089883a 	add	r4,r10,r2
 1011700:	588b883a 	add	r5,r11,r2
 1011704:	228d803a 	cmpltu	r6,r4,r10
 1011708:	314b883a 	add	r5,r6,r5
 101170c:	4104703a 	and	r2,r8,r4
 1011710:	4946703a 	and	r3,r9,r5
 1011714:	10c4b03a 	or	r2,r2,r3
 1011718:	10000226 	beq	r2,zero,1011724 <__pack_d+0x214>
 101171c:	04400044 	movi	r17,1
 1011720:	0025883a 	mov	r18,zero
 1011724:	00803fc4 	movi	r2,255
 1011728:	644eb03a 	or	r7,r12,r17
 101172c:	3892703a 	and	r9,r7,r2
 1011730:	00802004 	movi	r2,128
 1011734:	6c90b03a 	or	r8,r13,r18
 1011738:	0015883a 	mov	r10,zero
 101173c:	48801626 	beq	r9,r2,1011798 <__pack_d+0x288>
 1011740:	01001fc4 	movi	r4,127
 1011744:	3905883a 	add	r2,r7,r4
 1011748:	11cd803a 	cmpltu	r6,r2,r7
 101174c:	320d883a 	add	r6,r6,r8
 1011750:	100f883a 	mov	r7,r2
 1011754:	00840034 	movhi	r2,4096
 1011758:	10bfffc4 	addi	r2,r2,-1
 101175c:	3011883a 	mov	r8,r6
 1011760:	0007883a 	mov	r3,zero
 1011764:	11801b36 	bltu	r2,r6,10117d4 <__pack_d+0x2c4>
 1011768:	4004963a 	slli	r2,r8,24
 101176c:	3808d23a 	srli	r4,r7,8
 1011770:	400ad23a 	srli	r5,r8,8
 1011774:	1813883a 	mov	r9,r3
 1011778:	1108b03a 	or	r4,r2,r4
 101177c:	00bfffc4 	movi	r2,-1
 1011780:	00c00434 	movhi	r3,16
 1011784:	18ffffc4 	addi	r3,r3,-1
 1011788:	208c703a 	and	r6,r4,r2
 101178c:	28ce703a 	and	r7,r5,r3
 1011790:	4a01ffcc 	andi	r8,r9,2047
 1011794:	003f7206 	br	1011560 <__pack_d+0x50>
 1011798:	503fe91e 	bne	r10,zero,1011740 <__pack_d+0x230>
 101179c:	01004004 	movi	r4,256
 10117a0:	3904703a 	and	r2,r7,r4
 10117a4:	0007883a 	mov	r3,zero
 10117a8:	10c4b03a 	or	r2,r2,r3
 10117ac:	10000626 	beq	r2,zero,10117c8 <__pack_d+0x2b8>
 10117b0:	3a45883a 	add	r2,r7,r9
 10117b4:	11cd803a 	cmpltu	r6,r2,r7
 10117b8:	320d883a 	add	r6,r6,r8
 10117bc:	100f883a 	mov	r7,r2
 10117c0:	3011883a 	mov	r8,r6
 10117c4:	0007883a 	mov	r3,zero
 10117c8:	00840034 	movhi	r2,4096
 10117cc:	10bfffc4 	addi	r2,r2,-1
 10117d0:	123fe52e 	bgeu	r2,r8,1011768 <__pack_d+0x258>
 10117d4:	00c00044 	movi	r3,1
 10117d8:	003fe306 	br	1011768 <__pack_d+0x258>
 10117dc:	0009883a 	mov	r4,zero
 10117e0:	0013883a 	mov	r9,zero
 10117e4:	000b883a 	mov	r5,zero
 10117e8:	003fe406 	br	101177c <__pack_d+0x26c>
 10117ec:	4a47883a 	add	r3,r9,r9
 10117f0:	008007c4 	movi	r2,31
 10117f4:	1105c83a 	sub	r2,r2,r4
 10117f8:	1886983a 	sll	r3,r3,r2
 10117fc:	4118d83a 	srl	r12,r8,r4
 1011800:	491ad83a 	srl	r13,r9,r4
 1011804:	1b18b03a 	or	r12,r3,r12
 1011808:	003fb506 	br	10116e0 <__pack_d+0x1d0>
 101180c:	2806d07a 	srli	r3,r5,1
 1011810:	008007c4 	movi	r2,31
 1011814:	1105c83a 	sub	r2,r2,r4
 1011818:	1896d83a 	srl	r11,r3,r2
 101181c:	2914983a 	sll	r10,r5,r4
 1011820:	003fb506 	br	10116f8 <__pack_d+0x1e8>

01011824 <__unpack_d>:
 1011824:	20c00117 	ldw	r3,4(r4)
 1011828:	22400017 	ldw	r9,0(r4)
 101182c:	00800434 	movhi	r2,16
 1011830:	10bfffc4 	addi	r2,r2,-1
 1011834:	1808d53a 	srli	r4,r3,20
 1011838:	180cd7fa 	srli	r6,r3,31
 101183c:	1894703a 	and	r10,r3,r2
 1011840:	2201ffcc 	andi	r8,r4,2047
 1011844:	281b883a 	mov	r13,r5
 1011848:	4817883a 	mov	r11,r9
 101184c:	29800115 	stw	r6,4(r5)
 1011850:	5019883a 	mov	r12,r10
 1011854:	40001e1e 	bne	r8,zero,10118d0 <__unpack_d+0xac>
 1011858:	4a84b03a 	or	r2,r9,r10
 101185c:	10001926 	beq	r2,zero,10118c4 <__unpack_d+0xa0>
 1011860:	4804d63a 	srli	r2,r9,24
 1011864:	500c923a 	slli	r6,r10,8
 1011868:	013f0084 	movi	r4,-1022
 101186c:	00c40034 	movhi	r3,4096
 1011870:	18ffffc4 	addi	r3,r3,-1
 1011874:	118cb03a 	or	r6,r2,r6
 1011878:	008000c4 	movi	r2,3
 101187c:	480a923a 	slli	r5,r9,8
 1011880:	68800015 	stw	r2,0(r13)
 1011884:	69000215 	stw	r4,8(r13)
 1011888:	19800b36 	bltu	r3,r6,10118b8 <__unpack_d+0x94>
 101188c:	200f883a 	mov	r7,r4
 1011890:	1811883a 	mov	r8,r3
 1011894:	2945883a 	add	r2,r5,r5
 1011898:	1149803a 	cmpltu	r4,r2,r5
 101189c:	3187883a 	add	r3,r6,r6
 10118a0:	20c9883a 	add	r4,r4,r3
 10118a4:	100b883a 	mov	r5,r2
 10118a8:	200d883a 	mov	r6,r4
 10118ac:	39ffffc4 	addi	r7,r7,-1
 10118b0:	413ff82e 	bgeu	r8,r4,1011894 <__unpack_d+0x70>
 10118b4:	69c00215 	stw	r7,8(r13)
 10118b8:	69800415 	stw	r6,16(r13)
 10118bc:	69400315 	stw	r5,12(r13)
 10118c0:	f800283a 	ret
 10118c4:	00800084 	movi	r2,2
 10118c8:	28800015 	stw	r2,0(r5)
 10118cc:	f800283a 	ret
 10118d0:	0081ffc4 	movi	r2,2047
 10118d4:	40800f26 	beq	r8,r2,1011914 <__unpack_d+0xf0>
 10118d8:	480cd63a 	srli	r6,r9,24
 10118dc:	5006923a 	slli	r3,r10,8
 10118e0:	4804923a 	slli	r2,r9,8
 10118e4:	0009883a 	mov	r4,zero
 10118e8:	30c6b03a 	or	r3,r6,r3
 10118ec:	01440034 	movhi	r5,4096
 10118f0:	110cb03a 	or	r6,r2,r4
 10118f4:	423f0044 	addi	r8,r8,-1023
 10118f8:	194eb03a 	or	r7,r3,r5
 10118fc:	008000c4 	movi	r2,3
 1011900:	69c00415 	stw	r7,16(r13)
 1011904:	6a000215 	stw	r8,8(r13)
 1011908:	68800015 	stw	r2,0(r13)
 101190c:	69800315 	stw	r6,12(r13)
 1011910:	f800283a 	ret
 1011914:	4a84b03a 	or	r2,r9,r10
 1011918:	1000031e 	bne	r2,zero,1011928 <__unpack_d+0x104>
 101191c:	00800104 	movi	r2,4
 1011920:	28800015 	stw	r2,0(r5)
 1011924:	f800283a 	ret
 1011928:	0009883a 	mov	r4,zero
 101192c:	01400234 	movhi	r5,8
 1011930:	4904703a 	and	r2,r9,r4
 1011934:	5146703a 	and	r3,r10,r5
 1011938:	10c4b03a 	or	r2,r2,r3
 101193c:	10000526 	beq	r2,zero,1011954 <__unpack_d+0x130>
 1011940:	00800044 	movi	r2,1
 1011944:	68800015 	stw	r2,0(r13)
 1011948:	6b000415 	stw	r12,16(r13)
 101194c:	6ac00315 	stw	r11,12(r13)
 1011950:	f800283a 	ret
 1011954:	68000015 	stw	zero,0(r13)
 1011958:	003ffb06 	br	1011948 <__unpack_d+0x124>

0101195c <__mulsi3>:
 101195c:	20000a26 	beq	r4,zero,1011988 <__mulsi3+0x2c>
 1011960:	0007883a 	mov	r3,zero
 1011964:	2080004c 	andi	r2,r4,1
 1011968:	1005003a 	cmpeq	r2,r2,zero
 101196c:	2008d07a 	srli	r4,r4,1
 1011970:	1000011e 	bne	r2,zero,1011978 <__mulsi3+0x1c>
 1011974:	1947883a 	add	r3,r3,r5
 1011978:	294b883a 	add	r5,r5,r5
 101197c:	203ff91e 	bne	r4,zero,1011964 <__mulsi3+0x8>
 1011980:	1805883a 	mov	r2,r3
 1011984:	f800283a 	ret
 1011988:	0007883a 	mov	r3,zero
 101198c:	1805883a 	mov	r2,r3
 1011990:	f800283a 	ret

01011994 <printf>:
 1011994:	defffb04 	addi	sp,sp,-20
 1011998:	dfc00115 	stw	ra,4(sp)
 101199c:	d9400215 	stw	r5,8(sp)
 10119a0:	d9800315 	stw	r6,12(sp)
 10119a4:	d9c00415 	stw	r7,16(sp)
 10119a8:	00804074 	movhi	r2,257
 10119ac:	108af204 	addi	r2,r2,11208
 10119b0:	11400017 	ldw	r5,0(r2)
 10119b4:	d8800204 	addi	r2,sp,8
 10119b8:	d8800015 	stw	r2,0(sp)
 10119bc:	29c00217 	ldw	r7,8(r5)
 10119c0:	100d883a 	mov	r6,r2
 10119c4:	00804074 	movhi	r2,257
 10119c8:	10888c04 	addi	r2,r2,8752
 10119cc:	200b883a 	mov	r5,r4
 10119d0:	38800115 	stw	r2,4(r7)
 10119d4:	3809883a 	mov	r4,r7
 10119d8:	101220c0 	call	101220c <__vfprintf_internal>
 10119dc:	dfc00117 	ldw	ra,4(sp)
 10119e0:	dec00504 	addi	sp,sp,20
 10119e4:	f800283a 	ret

010119e8 <_printf_r>:
 10119e8:	defffc04 	addi	sp,sp,-16
 10119ec:	dfc00115 	stw	ra,4(sp)
 10119f0:	d9800215 	stw	r6,8(sp)
 10119f4:	d9c00315 	stw	r7,12(sp)
 10119f8:	22000217 	ldw	r8,8(r4)
 10119fc:	d8800204 	addi	r2,sp,8
 1011a00:	d8800015 	stw	r2,0(sp)
 1011a04:	100f883a 	mov	r7,r2
 1011a08:	00804074 	movhi	r2,257
 1011a0c:	10888c04 	addi	r2,r2,8752
 1011a10:	280d883a 	mov	r6,r5
 1011a14:	40800115 	stw	r2,4(r8)
 1011a18:	400b883a 	mov	r5,r8
 1011a1c:	1011b700 	call	1011b70 <___vfprintf_internal_r>
 1011a20:	dfc00117 	ldw	ra,4(sp)
 1011a24:	dec00404 	addi	sp,sp,16
 1011a28:	f800283a 	ret

01011a2c <_puts_r>:
 1011a2c:	defffd04 	addi	sp,sp,-12
 1011a30:	dc000015 	stw	r16,0(sp)
 1011a34:	2021883a 	mov	r16,r4
 1011a38:	2809883a 	mov	r4,r5
 1011a3c:	dfc00215 	stw	ra,8(sp)
 1011a40:	dc400115 	stw	r17,4(sp)
 1011a44:	2823883a 	mov	r17,r5
 1011a48:	1011ad00 	call	1011ad0 <strlen>
 1011a4c:	80c00217 	ldw	r3,8(r16)
 1011a50:	02004074 	movhi	r8,257
 1011a54:	42088c04 	addi	r8,r8,8752
 1011a58:	880d883a 	mov	r6,r17
 1011a5c:	100f883a 	mov	r7,r2
 1011a60:	8009883a 	mov	r4,r16
 1011a64:	180b883a 	mov	r5,r3
 1011a68:	1a000115 	stw	r8,4(r3)
 1011a6c:	403ee83a 	callr	r8
 1011a70:	047fffc4 	movi	r17,-1
 1011a74:	8009883a 	mov	r4,r16
 1011a78:	01804074 	movhi	r6,257
 1011a7c:	318ab904 	addi	r6,r6,10980
 1011a80:	01c00044 	movi	r7,1
 1011a84:	1440071e 	bne	r2,r17,1011aa4 <_puts_r+0x78>
 1011a88:	00ffffc4 	movi	r3,-1
 1011a8c:	1805883a 	mov	r2,r3
 1011a90:	dfc00217 	ldw	ra,8(sp)
 1011a94:	dc400117 	ldw	r17,4(sp)
 1011a98:	dc000017 	ldw	r16,0(sp)
 1011a9c:	dec00304 	addi	sp,sp,12
 1011aa0:	f800283a 	ret
 1011aa4:	81400217 	ldw	r5,8(r16)
 1011aa8:	28c00117 	ldw	r3,4(r5)
 1011aac:	183ee83a 	callr	r3
 1011ab0:	0007883a 	mov	r3,zero
 1011ab4:	147ff51e 	bne	r2,r17,1011a8c <_puts_r+0x60>
 1011ab8:	003ff306 	br	1011a88 <_puts_r+0x5c>

01011abc <puts>:
 1011abc:	00804074 	movhi	r2,257
 1011ac0:	108af204 	addi	r2,r2,11208
 1011ac4:	200b883a 	mov	r5,r4
 1011ac8:	11000017 	ldw	r4,0(r2)
 1011acc:	1011a2c1 	jmpi	1011a2c <_puts_r>

01011ad0 <strlen>:
 1011ad0:	20800007 	ldb	r2,0(r4)
 1011ad4:	10000526 	beq	r2,zero,1011aec <strlen+0x1c>
 1011ad8:	2007883a 	mov	r3,r4
 1011adc:	18c00044 	addi	r3,r3,1
 1011ae0:	18800007 	ldb	r2,0(r3)
 1011ae4:	103ffd1e 	bne	r2,zero,1011adc <strlen+0xc>
 1011ae8:	1905c83a 	sub	r2,r3,r4
 1011aec:	f800283a 	ret

01011af0 <print_repeat>:
 1011af0:	defffb04 	addi	sp,sp,-20
 1011af4:	dc800315 	stw	r18,12(sp)
 1011af8:	dc400215 	stw	r17,8(sp)
 1011afc:	dc000115 	stw	r16,4(sp)
 1011b00:	dfc00415 	stw	ra,16(sp)
 1011b04:	2025883a 	mov	r18,r4
 1011b08:	2823883a 	mov	r17,r5
 1011b0c:	3821883a 	mov	r16,r7
 1011b10:	d9800005 	stb	r6,0(sp)
 1011b14:	9009883a 	mov	r4,r18
 1011b18:	880b883a 	mov	r5,r17
 1011b1c:	d80d883a 	mov	r6,sp
 1011b20:	01c00044 	movi	r7,1
 1011b24:	04000b0e 	bge	zero,r16,1011b54 <print_repeat+0x64>
 1011b28:	88c00117 	ldw	r3,4(r17)
 1011b2c:	843fffc4 	addi	r16,r16,-1
 1011b30:	183ee83a 	callr	r3
 1011b34:	103ff726 	beq	r2,zero,1011b14 <print_repeat+0x24>
 1011b38:	00bfffc4 	movi	r2,-1
 1011b3c:	dfc00417 	ldw	ra,16(sp)
 1011b40:	dc800317 	ldw	r18,12(sp)
 1011b44:	dc400217 	ldw	r17,8(sp)
 1011b48:	dc000117 	ldw	r16,4(sp)
 1011b4c:	dec00504 	addi	sp,sp,20
 1011b50:	f800283a 	ret
 1011b54:	0005883a 	mov	r2,zero
 1011b58:	dfc00417 	ldw	ra,16(sp)
 1011b5c:	dc800317 	ldw	r18,12(sp)
 1011b60:	dc400217 	ldw	r17,8(sp)
 1011b64:	dc000117 	ldw	r16,4(sp)
 1011b68:	dec00504 	addi	sp,sp,20
 1011b6c:	f800283a 	ret

01011b70 <___vfprintf_internal_r>:
 1011b70:	deffe304 	addi	sp,sp,-116
 1011b74:	df001b15 	stw	fp,108(sp)
 1011b78:	ddc01a15 	stw	r23,104(sp)
 1011b7c:	dd001715 	stw	r20,92(sp)
 1011b80:	dc801515 	stw	r18,84(sp)
 1011b84:	dc001315 	stw	r16,76(sp)
 1011b88:	dfc01c15 	stw	ra,112(sp)
 1011b8c:	dd801915 	stw	r22,100(sp)
 1011b90:	dd401815 	stw	r21,96(sp)
 1011b94:	dcc01615 	stw	r19,88(sp)
 1011b98:	dc401415 	stw	r17,80(sp)
 1011b9c:	d9001015 	stw	r4,64(sp)
 1011ba0:	2829883a 	mov	r20,r5
 1011ba4:	d9c01115 	stw	r7,68(sp)
 1011ba8:	3025883a 	mov	r18,r6
 1011bac:	0021883a 	mov	r16,zero
 1011bb0:	d8000f15 	stw	zero,60(sp)
 1011bb4:	d8000e15 	stw	zero,56(sp)
 1011bb8:	0039883a 	mov	fp,zero
 1011bbc:	d8000915 	stw	zero,36(sp)
 1011bc0:	d8000d15 	stw	zero,52(sp)
 1011bc4:	d8000c15 	stw	zero,48(sp)
 1011bc8:	d8000b15 	stw	zero,44(sp)
 1011bcc:	002f883a 	mov	r23,zero
 1011bd0:	91400003 	ldbu	r5,0(r18)
 1011bd4:	01c00044 	movi	r7,1
 1011bd8:	94800044 	addi	r18,r18,1
 1011bdc:	29003fcc 	andi	r4,r5,255
 1011be0:	2100201c 	xori	r4,r4,128
 1011be4:	213fe004 	addi	r4,r4,-128
 1011be8:	20001526 	beq	r4,zero,1011c40 <___vfprintf_internal_r+0xd0>
 1011bec:	81c03526 	beq	r16,r7,1011cc4 <___vfprintf_internal_r+0x154>
 1011bf0:	3c002016 	blt	r7,r16,1011c74 <___vfprintf_internal_r+0x104>
 1011bf4:	803ff61e 	bne	r16,zero,1011bd0 <___vfprintf_internal_r+0x60>
 1011bf8:	00800944 	movi	r2,37
 1011bfc:	2081501e 	bne	r4,r2,1012140 <___vfprintf_internal_r+0x5d0>
 1011c00:	073fffc4 	movi	fp,-1
 1011c04:	00800284 	movi	r2,10
 1011c08:	d9c00c15 	stw	r7,48(sp)
 1011c0c:	d8000f15 	stw	zero,60(sp)
 1011c10:	d8000e15 	stw	zero,56(sp)
 1011c14:	df000915 	stw	fp,36(sp)
 1011c18:	d8800d15 	stw	r2,52(sp)
 1011c1c:	d8000b15 	stw	zero,44(sp)
 1011c20:	91400003 	ldbu	r5,0(r18)
 1011c24:	3821883a 	mov	r16,r7
 1011c28:	94800044 	addi	r18,r18,1
 1011c2c:	29003fcc 	andi	r4,r5,255
 1011c30:	2100201c 	xori	r4,r4,128
 1011c34:	213fe004 	addi	r4,r4,-128
 1011c38:	01c00044 	movi	r7,1
 1011c3c:	203feb1e 	bne	r4,zero,1011bec <___vfprintf_internal_r+0x7c>
 1011c40:	b805883a 	mov	r2,r23
 1011c44:	dfc01c17 	ldw	ra,112(sp)
 1011c48:	df001b17 	ldw	fp,108(sp)
 1011c4c:	ddc01a17 	ldw	r23,104(sp)
 1011c50:	dd801917 	ldw	r22,100(sp)
 1011c54:	dd401817 	ldw	r21,96(sp)
 1011c58:	dd001717 	ldw	r20,92(sp)
 1011c5c:	dcc01617 	ldw	r19,88(sp)
 1011c60:	dc801517 	ldw	r18,84(sp)
 1011c64:	dc401417 	ldw	r17,80(sp)
 1011c68:	dc001317 	ldw	r16,76(sp)
 1011c6c:	dec01d04 	addi	sp,sp,116
 1011c70:	f800283a 	ret
 1011c74:	00800084 	movi	r2,2
 1011c78:	80801726 	beq	r16,r2,1011cd8 <___vfprintf_internal_r+0x168>
 1011c7c:	008000c4 	movi	r2,3
 1011c80:	80bfd31e 	bne	r16,r2,1011bd0 <___vfprintf_internal_r+0x60>
 1011c84:	2c7ff404 	addi	r17,r5,-48
 1011c88:	88c03fcc 	andi	r3,r17,255
 1011c8c:	00800244 	movi	r2,9
 1011c90:	10c02136 	bltu	r2,r3,1011d18 <___vfprintf_internal_r+0x1a8>
 1011c94:	d8c00917 	ldw	r3,36(sp)
 1011c98:	18012716 	blt	r3,zero,1012138 <___vfprintf_internal_r+0x5c8>
 1011c9c:	d9000917 	ldw	r4,36(sp)
 1011ca0:	01400284 	movi	r5,10
 1011ca4:	101195c0 	call	101195c <__mulsi3>
 1011ca8:	1007883a 	mov	r3,r2
 1011cac:	88803fcc 	andi	r2,r17,255
 1011cb0:	1080201c 	xori	r2,r2,128
 1011cb4:	10bfe004 	addi	r2,r2,-128
 1011cb8:	1887883a 	add	r3,r3,r2
 1011cbc:	d8c00915 	stw	r3,36(sp)
 1011cc0:	003fc306 	br	1011bd0 <___vfprintf_internal_r+0x60>
 1011cc4:	00800c04 	movi	r2,48
 1011cc8:	2080b326 	beq	r4,r2,1011f98 <___vfprintf_internal_r+0x428>
 1011ccc:	00800944 	movi	r2,37
 1011cd0:	20812726 	beq	r4,r2,1012170 <___vfprintf_internal_r+0x600>
 1011cd4:	04000084 	movi	r16,2
 1011cd8:	2c7ff404 	addi	r17,r5,-48
 1011cdc:	88c03fcc 	andi	r3,r17,255
 1011ce0:	00800244 	movi	r2,9
 1011ce4:	10c00a36 	bltu	r2,r3,1011d10 <___vfprintf_internal_r+0x1a0>
 1011ce8:	e000b416 	blt	fp,zero,1011fbc <___vfprintf_internal_r+0x44c>
 1011cec:	e009883a 	mov	r4,fp
 1011cf0:	01400284 	movi	r5,10
 1011cf4:	101195c0 	call	101195c <__mulsi3>
 1011cf8:	1007883a 	mov	r3,r2
 1011cfc:	88803fcc 	andi	r2,r17,255
 1011d00:	1080201c 	xori	r2,r2,128
 1011d04:	10bfe004 	addi	r2,r2,-128
 1011d08:	18b9883a 	add	fp,r3,r2
 1011d0c:	003fb006 	br	1011bd0 <___vfprintf_internal_r+0x60>
 1011d10:	00800b84 	movi	r2,46
 1011d14:	2080a326 	beq	r4,r2,1011fa4 <___vfprintf_internal_r+0x434>
 1011d18:	00801b04 	movi	r2,108
 1011d1c:	2080a326 	beq	r4,r2,1011fac <___vfprintf_internal_r+0x43c>
 1011d20:	d8c00917 	ldw	r3,36(sp)
 1011d24:	1800a716 	blt	r3,zero,1011fc4 <___vfprintf_internal_r+0x454>
 1011d28:	d8000f15 	stw	zero,60(sp)
 1011d2c:	28bfea04 	addi	r2,r5,-88
 1011d30:	10803fcc 	andi	r2,r2,255
 1011d34:	00c00804 	movi	r3,32
 1011d38:	18802836 	bltu	r3,r2,1011ddc <___vfprintf_internal_r+0x26c>
 1011d3c:	1085883a 	add	r2,r2,r2
 1011d40:	1085883a 	add	r2,r2,r2
 1011d44:	00c04074 	movhi	r3,257
 1011d48:	18c75604 	addi	r3,r3,7512
 1011d4c:	10c5883a 	add	r2,r2,r3
 1011d50:	11000017 	ldw	r4,0(r2)
 1011d54:	2000683a 	jmp	r4
 1011d58:	01011de4 	muli	r4,zero,1143
 1011d5c:	01011ddc 	xori	r4,zero,1143
 1011d60:	01011ddc 	xori	r4,zero,1143
 1011d64:	01011ddc 	xori	r4,zero,1143
 1011d68:	01011ddc 	xori	r4,zero,1143
 1011d6c:	01011ddc 	xori	r4,zero,1143
 1011d70:	01011ddc 	xori	r4,zero,1143
 1011d74:	01011ddc 	xori	r4,zero,1143
 1011d78:	01011ddc 	xori	r4,zero,1143
 1011d7c:	01011ddc 	xori	r4,zero,1143
 1011d80:	01011ddc 	xori	r4,zero,1143
 1011d84:	01012010 	cmplti	r4,zero,1152
 1011d88:	01011df8 	rdprs	r4,zero,1143
 1011d8c:	01011ddc 	xori	r4,zero,1143
 1011d90:	01011ddc 	xori	r4,zero,1143
 1011d94:	01011ddc 	xori	r4,zero,1143
 1011d98:	01011ddc 	xori	r4,zero,1143
 1011d9c:	01011df8 	rdprs	r4,zero,1143
 1011da0:	01011ddc 	xori	r4,zero,1143
 1011da4:	01011ddc 	xori	r4,zero,1143
 1011da8:	01011ddc 	xori	r4,zero,1143
 1011dac:	01011ddc 	xori	r4,zero,1143
 1011db0:	01011ddc 	xori	r4,zero,1143
 1011db4:	01012078 	rdprs	r4,zero,1153
 1011db8:	01011ddc 	xori	r4,zero,1143
 1011dbc:	01011ddc 	xori	r4,zero,1143
 1011dc0:	01011ddc 	xori	r4,zero,1143
 1011dc4:	01012088 	cmpgei	r4,zero,1154
 1011dc8:	01011ddc 	xori	r4,zero,1143
 1011dcc:	01011f5c 	xori	r4,zero,1149
 1011dd0:	01011ddc 	xori	r4,zero,1143
 1011dd4:	01011ddc 	xori	r4,zero,1143
 1011dd8:	01011f54 	movui	r4,1149
 1011ddc:	0021883a 	mov	r16,zero
 1011de0:	003f7b06 	br	1011bd0 <___vfprintf_internal_r+0x60>
 1011de4:	00c00404 	movi	r3,16
 1011de8:	00800044 	movi	r2,1
 1011dec:	d8c00d15 	stw	r3,52(sp)
 1011df0:	d8000c15 	stw	zero,48(sp)
 1011df4:	d8800b15 	stw	r2,44(sp)
 1011df8:	d8c00e17 	ldw	r3,56(sp)
 1011dfc:	1805003a 	cmpeq	r2,r3,zero
 1011e00:	10005a1e 	bne	r2,zero,1011f6c <___vfprintf_internal_r+0x3fc>
 1011e04:	d8800c17 	ldw	r2,48(sp)
 1011e08:	1000781e 	bne	r2,zero,1011fec <___vfprintf_internal_r+0x47c>
 1011e0c:	d8801117 	ldw	r2,68(sp)
 1011e10:	d8000a15 	stw	zero,40(sp)
 1011e14:	14400017 	ldw	r17,0(r2)
 1011e18:	11c00104 	addi	r7,r2,4
 1011e1c:	d9c01115 	stw	r7,68(sp)
 1011e20:	88005a26 	beq	r17,zero,1011f8c <___vfprintf_internal_r+0x41c>
 1011e24:	d8c00b17 	ldw	r3,44(sp)
 1011e28:	dcc00104 	addi	r19,sp,4
 1011e2c:	05800244 	movi	r22,9
 1011e30:	182b003a 	cmpeq	r21,r3,zero
 1011e34:	dcc01215 	stw	r19,72(sp)
 1011e38:	00000506 	br	1011e50 <___vfprintf_internal_r+0x2e0>
 1011e3c:	21000c04 	addi	r4,r4,48
 1011e40:	99000005 	stb	r4,0(r19)
 1011e44:	9cc00044 	addi	r19,r19,1
 1011e48:	80000f26 	beq	r16,zero,1011e88 <___vfprintf_internal_r+0x318>
 1011e4c:	8023883a 	mov	r17,r16
 1011e50:	d9400d17 	ldw	r5,52(sp)
 1011e54:	8809883a 	mov	r4,r17
 1011e58:	10124a00 	call	10124a0 <__udivsi3>
 1011e5c:	d9000d17 	ldw	r4,52(sp)
 1011e60:	100b883a 	mov	r5,r2
 1011e64:	1021883a 	mov	r16,r2
 1011e68:	101195c0 	call	101195c <__mulsi3>
 1011e6c:	8889c83a 	sub	r4,r17,r2
 1011e70:	b13ff20e 	bge	r22,r4,1011e3c <___vfprintf_internal_r+0x2cc>
 1011e74:	a8009f1e 	bne	r21,zero,10120f4 <___vfprintf_internal_r+0x584>
 1011e78:	21000dc4 	addi	r4,r4,55
 1011e7c:	99000005 	stb	r4,0(r19)
 1011e80:	9cc00044 	addi	r19,r19,1
 1011e84:	803ff11e 	bne	r16,zero,1011e4c <___vfprintf_internal_r+0x2dc>
 1011e88:	d8801217 	ldw	r2,72(sp)
 1011e8c:	98a3c83a 	sub	r17,r19,r2
 1011e90:	d8c00917 	ldw	r3,36(sp)
 1011e94:	1c4bc83a 	sub	r5,r3,r17
 1011e98:	0140130e 	bge	zero,r5,1011ee8 <___vfprintf_internal_r+0x378>
 1011e9c:	d8c00104 	addi	r3,sp,4
 1011ea0:	18800804 	addi	r2,r3,32
 1011ea4:	9880102e 	bgeu	r19,r2,1011ee8 <___vfprintf_internal_r+0x378>
 1011ea8:	00800c04 	movi	r2,48
 1011eac:	28ffffc4 	addi	r3,r5,-1
 1011eb0:	98800005 	stb	r2,0(r19)
 1011eb4:	99000044 	addi	r4,r19,1
 1011eb8:	00c0080e 	bge	zero,r3,1011edc <___vfprintf_internal_r+0x36c>
 1011ebc:	d8c00104 	addi	r3,sp,4
 1011ec0:	18800804 	addi	r2,r3,32
 1011ec4:	2080052e 	bgeu	r4,r2,1011edc <___vfprintf_internal_r+0x36c>
 1011ec8:	00800c04 	movi	r2,48
 1011ecc:	20800005 	stb	r2,0(r4)
 1011ed0:	21000044 	addi	r4,r4,1
 1011ed4:	9945883a 	add	r2,r19,r5
 1011ed8:	20bff81e 	bne	r4,r2,1011ebc <___vfprintf_internal_r+0x34c>
 1011edc:	d8801217 	ldw	r2,72(sp)
 1011ee0:	2027883a 	mov	r19,r4
 1011ee4:	20a3c83a 	sub	r17,r4,r2
 1011ee8:	d8c00a17 	ldw	r3,40(sp)
 1011eec:	1c45883a 	add	r2,r3,r17
 1011ef0:	e0a1c83a 	sub	r16,fp,r2
 1011ef4:	d8800f17 	ldw	r2,60(sp)
 1011ef8:	10008026 	beq	r2,zero,10120fc <___vfprintf_internal_r+0x58c>
 1011efc:	1805003a 	cmpeq	r2,r3,zero
 1011f00:	1000ae26 	beq	r2,zero,10121bc <___vfprintf_internal_r+0x64c>
 1011f04:	0400a516 	blt	zero,r16,101219c <___vfprintf_internal_r+0x62c>
 1011f08:	b805883a 	mov	r2,r23
 1011f0c:	0440950e 	bge	zero,r17,1012164 <___vfprintf_internal_r+0x5f4>
 1011f10:	102f883a 	mov	r23,r2
 1011f14:	1461883a 	add	r16,r2,r17
 1011f18:	00000206 	br	1011f24 <___vfprintf_internal_r+0x3b4>
 1011f1c:	bdc00044 	addi	r23,r23,1
 1011f20:	85ffae26 	beq	r16,r23,1011ddc <___vfprintf_internal_r+0x26c>
 1011f24:	9cffffc4 	addi	r19,r19,-1
 1011f28:	98800003 	ldbu	r2,0(r19)
 1011f2c:	a0c00117 	ldw	r3,4(r20)
 1011f30:	d9001017 	ldw	r4,64(sp)
 1011f34:	d8800005 	stb	r2,0(sp)
 1011f38:	a00b883a 	mov	r5,r20
 1011f3c:	d80d883a 	mov	r6,sp
 1011f40:	01c00044 	movi	r7,1
 1011f44:	183ee83a 	callr	r3
 1011f48:	103ff426 	beq	r2,zero,1011f1c <___vfprintf_internal_r+0x3ac>
 1011f4c:	05ffffc4 	movi	r23,-1
 1011f50:	003f3b06 	br	1011c40 <___vfprintf_internal_r+0xd0>
 1011f54:	00c00404 	movi	r3,16
 1011f58:	d8c00d15 	stw	r3,52(sp)
 1011f5c:	d8000c15 	stw	zero,48(sp)
 1011f60:	d8c00e17 	ldw	r3,56(sp)
 1011f64:	1805003a 	cmpeq	r2,r3,zero
 1011f68:	103fa626 	beq	r2,zero,1011e04 <___vfprintf_internal_r+0x294>
 1011f6c:	d8c00c17 	ldw	r3,48(sp)
 1011f70:	1800171e 	bne	r3,zero,1011fd0 <___vfprintf_internal_r+0x460>
 1011f74:	d8c01117 	ldw	r3,68(sp)
 1011f78:	d8000a15 	stw	zero,40(sp)
 1011f7c:	1c400017 	ldw	r17,0(r3)
 1011f80:	19c00104 	addi	r7,r3,4
 1011f84:	d9c01115 	stw	r7,68(sp)
 1011f88:	883fa61e 	bne	r17,zero,1011e24 <___vfprintf_internal_r+0x2b4>
 1011f8c:	dcc00104 	addi	r19,sp,4
 1011f90:	dcc01215 	stw	r19,72(sp)
 1011f94:	003fbe06 	br	1011e90 <___vfprintf_internal_r+0x320>
 1011f98:	04000084 	movi	r16,2
 1011f9c:	d9c00f15 	stw	r7,60(sp)
 1011fa0:	003f0b06 	br	1011bd0 <___vfprintf_internal_r+0x60>
 1011fa4:	040000c4 	movi	r16,3
 1011fa8:	003f0906 	br	1011bd0 <___vfprintf_internal_r+0x60>
 1011fac:	00800044 	movi	r2,1
 1011fb0:	040000c4 	movi	r16,3
 1011fb4:	d8800e15 	stw	r2,56(sp)
 1011fb8:	003f0506 	br	1011bd0 <___vfprintf_internal_r+0x60>
 1011fbc:	0007883a 	mov	r3,zero
 1011fc0:	003f4e06 	br	1011cfc <___vfprintf_internal_r+0x18c>
 1011fc4:	00800044 	movi	r2,1
 1011fc8:	d8800915 	stw	r2,36(sp)
 1011fcc:	003f5706 	br	1011d2c <___vfprintf_internal_r+0x1bc>
 1011fd0:	d8801117 	ldw	r2,68(sp)
 1011fd4:	14400017 	ldw	r17,0(r2)
 1011fd8:	10800104 	addi	r2,r2,4
 1011fdc:	d8801115 	stw	r2,68(sp)
 1011fe0:	88000716 	blt	r17,zero,1012000 <___vfprintf_internal_r+0x490>
 1011fe4:	d8000a15 	stw	zero,40(sp)
 1011fe8:	003f8d06 	br	1011e20 <___vfprintf_internal_r+0x2b0>
 1011fec:	d8c01117 	ldw	r3,68(sp)
 1011ff0:	1c400017 	ldw	r17,0(r3)
 1011ff4:	18c00104 	addi	r3,r3,4
 1011ff8:	d8c01115 	stw	r3,68(sp)
 1011ffc:	883ff90e 	bge	r17,zero,1011fe4 <___vfprintf_internal_r+0x474>
 1012000:	00800044 	movi	r2,1
 1012004:	0463c83a 	sub	r17,zero,r17
 1012008:	d8800a15 	stw	r2,40(sp)
 101200c:	003f8406 	br	1011e20 <___vfprintf_internal_r+0x2b0>
 1012010:	04000044 	movi	r16,1
 1012014:	8700080e 	bge	r16,fp,1012038 <___vfprintf_internal_r+0x4c8>
 1012018:	d9001017 	ldw	r4,64(sp)
 101201c:	a00b883a 	mov	r5,r20
 1012020:	01800804 	movi	r6,32
 1012024:	e1ffffc4 	addi	r7,fp,-1
 1012028:	1011af00 	call	1011af0 <print_repeat>
 101202c:	103fc71e 	bne	r2,zero,1011f4c <___vfprintf_internal_r+0x3dc>
 1012030:	e5c5883a 	add	r2,fp,r23
 1012034:	15ffffc4 	addi	r23,r2,-1
 1012038:	d8c01117 	ldw	r3,68(sp)
 101203c:	d9001017 	ldw	r4,64(sp)
 1012040:	800f883a 	mov	r7,r16
 1012044:	18800017 	ldw	r2,0(r3)
 1012048:	a0c00117 	ldw	r3,4(r20)
 101204c:	a00b883a 	mov	r5,r20
 1012050:	d8800005 	stb	r2,0(sp)
 1012054:	d80d883a 	mov	r6,sp
 1012058:	183ee83a 	callr	r3
 101205c:	103fbb1e 	bne	r2,zero,1011f4c <___vfprintf_internal_r+0x3dc>
 1012060:	d8801117 	ldw	r2,68(sp)
 1012064:	bdc00044 	addi	r23,r23,1
 1012068:	0021883a 	mov	r16,zero
 101206c:	10800104 	addi	r2,r2,4
 1012070:	d8801115 	stw	r2,68(sp)
 1012074:	003ed606 	br	1011bd0 <___vfprintf_internal_r+0x60>
 1012078:	00800204 	movi	r2,8
 101207c:	d8800d15 	stw	r2,52(sp)
 1012080:	d8000c15 	stw	zero,48(sp)
 1012084:	003fb606 	br	1011f60 <___vfprintf_internal_r+0x3f0>
 1012088:	d8c01117 	ldw	r3,68(sp)
 101208c:	1cc00017 	ldw	r19,0(r3)
 1012090:	9809883a 	mov	r4,r19
 1012094:	1011ad00 	call	1011ad0 <strlen>
 1012098:	e0a1c83a 	sub	r16,fp,r2
 101209c:	1023883a 	mov	r17,r2
 10120a0:	0400070e 	bge	zero,r16,10120c0 <___vfprintf_internal_r+0x550>
 10120a4:	d9001017 	ldw	r4,64(sp)
 10120a8:	a00b883a 	mov	r5,r20
 10120ac:	01800804 	movi	r6,32
 10120b0:	800f883a 	mov	r7,r16
 10120b4:	1011af00 	call	1011af0 <print_repeat>
 10120b8:	103fa41e 	bne	r2,zero,1011f4c <___vfprintf_internal_r+0x3dc>
 10120bc:	bc2f883a 	add	r23,r23,r16
 10120c0:	a0c00117 	ldw	r3,4(r20)
 10120c4:	d9001017 	ldw	r4,64(sp)
 10120c8:	980d883a 	mov	r6,r19
 10120cc:	a00b883a 	mov	r5,r20
 10120d0:	880f883a 	mov	r7,r17
 10120d4:	183ee83a 	callr	r3
 10120d8:	103f9c1e 	bne	r2,zero,1011f4c <___vfprintf_internal_r+0x3dc>
 10120dc:	d8801117 	ldw	r2,68(sp)
 10120e0:	bc6f883a 	add	r23,r23,r17
 10120e4:	0021883a 	mov	r16,zero
 10120e8:	10800104 	addi	r2,r2,4
 10120ec:	d8801115 	stw	r2,68(sp)
 10120f0:	003eb706 	br	1011bd0 <___vfprintf_internal_r+0x60>
 10120f4:	210015c4 	addi	r4,r4,87
 10120f8:	003f5106 	br	1011e40 <___vfprintf_internal_r+0x2d0>
 10120fc:	04003b16 	blt	zero,r16,10121ec <___vfprintf_internal_r+0x67c>
 1012100:	d8c00a17 	ldw	r3,40(sp)
 1012104:	1805003a 	cmpeq	r2,r3,zero
 1012108:	103f7f1e 	bne	r2,zero,1011f08 <___vfprintf_internal_r+0x398>
 101210c:	a0c00117 	ldw	r3,4(r20)
 1012110:	d9001017 	ldw	r4,64(sp)
 1012114:	00800b44 	movi	r2,45
 1012118:	d8800005 	stb	r2,0(sp)
 101211c:	a00b883a 	mov	r5,r20
 1012120:	d80d883a 	mov	r6,sp
 1012124:	01c00044 	movi	r7,1
 1012128:	183ee83a 	callr	r3
 101212c:	103f871e 	bne	r2,zero,1011f4c <___vfprintf_internal_r+0x3dc>
 1012130:	b8800044 	addi	r2,r23,1
 1012134:	003f7506 	br	1011f0c <___vfprintf_internal_r+0x39c>
 1012138:	0007883a 	mov	r3,zero
 101213c:	003edb06 	br	1011cac <___vfprintf_internal_r+0x13c>
 1012140:	a0c00117 	ldw	r3,4(r20)
 1012144:	d9001017 	ldw	r4,64(sp)
 1012148:	d9400005 	stb	r5,0(sp)
 101214c:	d80d883a 	mov	r6,sp
 1012150:	a00b883a 	mov	r5,r20
 1012154:	183ee83a 	callr	r3
 1012158:	103f7c1e 	bne	r2,zero,1011f4c <___vfprintf_internal_r+0x3dc>
 101215c:	bdc00044 	addi	r23,r23,1
 1012160:	003e9b06 	br	1011bd0 <___vfprintf_internal_r+0x60>
 1012164:	102f883a 	mov	r23,r2
 1012168:	0021883a 	mov	r16,zero
 101216c:	003e9806 	br	1011bd0 <___vfprintf_internal_r+0x60>
 1012170:	a0c00117 	ldw	r3,4(r20)
 1012174:	d9000005 	stb	r4,0(sp)
 1012178:	d9001017 	ldw	r4,64(sp)
 101217c:	a00b883a 	mov	r5,r20
 1012180:	d80d883a 	mov	r6,sp
 1012184:	800f883a 	mov	r7,r16
 1012188:	183ee83a 	callr	r3
 101218c:	103f6f1e 	bne	r2,zero,1011f4c <___vfprintf_internal_r+0x3dc>
 1012190:	bc2f883a 	add	r23,r23,r16
 1012194:	0021883a 	mov	r16,zero
 1012198:	003e8d06 	br	1011bd0 <___vfprintf_internal_r+0x60>
 101219c:	d9001017 	ldw	r4,64(sp)
 10121a0:	a00b883a 	mov	r5,r20
 10121a4:	01800c04 	movi	r6,48
 10121a8:	800f883a 	mov	r7,r16
 10121ac:	1011af00 	call	1011af0 <print_repeat>
 10121b0:	103f661e 	bne	r2,zero,1011f4c <___vfprintf_internal_r+0x3dc>
 10121b4:	bc05883a 	add	r2,r23,r16
 10121b8:	003f5406 	br	1011f0c <___vfprintf_internal_r+0x39c>
 10121bc:	a0c00117 	ldw	r3,4(r20)
 10121c0:	d9001017 	ldw	r4,64(sp)
 10121c4:	00800b44 	movi	r2,45
 10121c8:	d8800005 	stb	r2,0(sp)
 10121cc:	a00b883a 	mov	r5,r20
 10121d0:	d80d883a 	mov	r6,sp
 10121d4:	01c00044 	movi	r7,1
 10121d8:	183ee83a 	callr	r3
 10121dc:	103f5b1e 	bne	r2,zero,1011f4c <___vfprintf_internal_r+0x3dc>
 10121e0:	bdc00044 	addi	r23,r23,1
 10121e4:	043f480e 	bge	zero,r16,1011f08 <___vfprintf_internal_r+0x398>
 10121e8:	003fec06 	br	101219c <___vfprintf_internal_r+0x62c>
 10121ec:	d9001017 	ldw	r4,64(sp)
 10121f0:	a00b883a 	mov	r5,r20
 10121f4:	01800804 	movi	r6,32
 10121f8:	800f883a 	mov	r7,r16
 10121fc:	1011af00 	call	1011af0 <print_repeat>
 1012200:	103f521e 	bne	r2,zero,1011f4c <___vfprintf_internal_r+0x3dc>
 1012204:	bc2f883a 	add	r23,r23,r16
 1012208:	003fbd06 	br	1012100 <___vfprintf_internal_r+0x590>

0101220c <__vfprintf_internal>:
 101220c:	00804074 	movhi	r2,257
 1012210:	108af204 	addi	r2,r2,11208
 1012214:	2013883a 	mov	r9,r4
 1012218:	11000017 	ldw	r4,0(r2)
 101221c:	2805883a 	mov	r2,r5
 1012220:	300f883a 	mov	r7,r6
 1012224:	480b883a 	mov	r5,r9
 1012228:	100d883a 	mov	r6,r2
 101222c:	1011b701 	jmpi	1011b70 <___vfprintf_internal_r>

01012230 <__sfvwrite_small_dev>:
 1012230:	2880000b 	ldhu	r2,0(r5)
 1012234:	defffa04 	addi	sp,sp,-24
 1012238:	dcc00315 	stw	r19,12(sp)
 101223c:	1080020c 	andi	r2,r2,8
 1012240:	dc800215 	stw	r18,8(sp)
 1012244:	dc400115 	stw	r17,4(sp)
 1012248:	dfc00515 	stw	ra,20(sp)
 101224c:	dd000415 	stw	r20,16(sp)
 1012250:	dc000015 	stw	r16,0(sp)
 1012254:	2825883a 	mov	r18,r5
 1012258:	2027883a 	mov	r19,r4
 101225c:	3023883a 	mov	r17,r6
 1012260:	10002026 	beq	r2,zero,10122e4 <__sfvwrite_small_dev+0xb4>
 1012264:	2940008f 	ldh	r5,2(r5)
 1012268:	28000f16 	blt	r5,zero,10122a8 <__sfvwrite_small_dev+0x78>
 101226c:	01c01b0e 	bge	zero,r7,10122dc <__sfvwrite_small_dev+0xac>
 1012270:	3821883a 	mov	r16,r7
 1012274:	05010004 	movi	r20,1024
 1012278:	00000206 	br	1012284 <__sfvwrite_small_dev+0x54>
 101227c:	0400170e 	bge	zero,r16,10122dc <__sfvwrite_small_dev+0xac>
 1012280:	9140008f 	ldh	r5,2(r18)
 1012284:	880d883a 	mov	r6,r17
 1012288:	9809883a 	mov	r4,r19
 101228c:	800f883a 	mov	r7,r16
 1012290:	a400010e 	bge	r20,r16,1012298 <__sfvwrite_small_dev+0x68>
 1012294:	01c10004 	movi	r7,1024
 1012298:	10122ec0 	call	10122ec <_write_r>
 101229c:	88a3883a 	add	r17,r17,r2
 10122a0:	80a1c83a 	sub	r16,r16,r2
 10122a4:	00bff516 	blt	zero,r2,101227c <__sfvwrite_small_dev+0x4c>
 10122a8:	9080000b 	ldhu	r2,0(r18)
 10122ac:	00ffffc4 	movi	r3,-1
 10122b0:	10801014 	ori	r2,r2,64
 10122b4:	9080000d 	sth	r2,0(r18)
 10122b8:	1805883a 	mov	r2,r3
 10122bc:	dfc00517 	ldw	ra,20(sp)
 10122c0:	dd000417 	ldw	r20,16(sp)
 10122c4:	dcc00317 	ldw	r19,12(sp)
 10122c8:	dc800217 	ldw	r18,8(sp)
 10122cc:	dc400117 	ldw	r17,4(sp)
 10122d0:	dc000017 	ldw	r16,0(sp)
 10122d4:	dec00604 	addi	sp,sp,24
 10122d8:	f800283a 	ret
 10122dc:	0007883a 	mov	r3,zero
 10122e0:	003ff506 	br	10122b8 <__sfvwrite_small_dev+0x88>
 10122e4:	00ffffc4 	movi	r3,-1
 10122e8:	003ff306 	br	10122b8 <__sfvwrite_small_dev+0x88>

010122ec <_write_r>:
 10122ec:	defffd04 	addi	sp,sp,-12
 10122f0:	dc000015 	stw	r16,0(sp)
 10122f4:	04004074 	movhi	r16,257
 10122f8:	840b3804 	addi	r16,r16,11488
 10122fc:	dc400115 	stw	r17,4(sp)
 1012300:	80000015 	stw	zero,0(r16)
 1012304:	2023883a 	mov	r17,r4
 1012308:	2809883a 	mov	r4,r5
 101230c:	300b883a 	mov	r5,r6
 1012310:	380d883a 	mov	r6,r7
 1012314:	dfc00215 	stw	ra,8(sp)
 1012318:	10125dc0 	call	10125dc <write>
 101231c:	1007883a 	mov	r3,r2
 1012320:	00bfffc4 	movi	r2,-1
 1012324:	18800626 	beq	r3,r2,1012340 <_write_r+0x54>
 1012328:	1805883a 	mov	r2,r3
 101232c:	dfc00217 	ldw	ra,8(sp)
 1012330:	dc400117 	ldw	r17,4(sp)
 1012334:	dc000017 	ldw	r16,0(sp)
 1012338:	dec00304 	addi	sp,sp,12
 101233c:	f800283a 	ret
 1012340:	80800017 	ldw	r2,0(r16)
 1012344:	103ff826 	beq	r2,zero,1012328 <_write_r+0x3c>
 1012348:	88800015 	stw	r2,0(r17)
 101234c:	1805883a 	mov	r2,r3
 1012350:	dfc00217 	ldw	ra,8(sp)
 1012354:	dc400117 	ldw	r17,4(sp)
 1012358:	dc000017 	ldw	r16,0(sp)
 101235c:	dec00304 	addi	sp,sp,12
 1012360:	f800283a 	ret

01012364 <udivmodsi4>:
 1012364:	29001b2e 	bgeu	r5,r4,10123d4 <udivmodsi4+0x70>
 1012368:	28001a16 	blt	r5,zero,10123d4 <udivmodsi4+0x70>
 101236c:	00800044 	movi	r2,1
 1012370:	0007883a 	mov	r3,zero
 1012374:	01c007c4 	movi	r7,31
 1012378:	00000306 	br	1012388 <udivmodsi4+0x24>
 101237c:	19c01326 	beq	r3,r7,10123cc <udivmodsi4+0x68>
 1012380:	18c00044 	addi	r3,r3,1
 1012384:	28000416 	blt	r5,zero,1012398 <udivmodsi4+0x34>
 1012388:	294b883a 	add	r5,r5,r5
 101238c:	1085883a 	add	r2,r2,r2
 1012390:	293ffa36 	bltu	r5,r4,101237c <udivmodsi4+0x18>
 1012394:	10000d26 	beq	r2,zero,10123cc <udivmodsi4+0x68>
 1012398:	0007883a 	mov	r3,zero
 101239c:	21400236 	bltu	r4,r5,10123a8 <udivmodsi4+0x44>
 10123a0:	2149c83a 	sub	r4,r4,r5
 10123a4:	1886b03a 	or	r3,r3,r2
 10123a8:	1004d07a 	srli	r2,r2,1
 10123ac:	280ad07a 	srli	r5,r5,1
 10123b0:	103ffa1e 	bne	r2,zero,101239c <udivmodsi4+0x38>
 10123b4:	30000226 	beq	r6,zero,10123c0 <udivmodsi4+0x5c>
 10123b8:	2005883a 	mov	r2,r4
 10123bc:	f800283a 	ret
 10123c0:	1809883a 	mov	r4,r3
 10123c4:	2005883a 	mov	r2,r4
 10123c8:	f800283a 	ret
 10123cc:	0007883a 	mov	r3,zero
 10123d0:	003ff806 	br	10123b4 <udivmodsi4+0x50>
 10123d4:	00800044 	movi	r2,1
 10123d8:	0007883a 	mov	r3,zero
 10123dc:	003fef06 	br	101239c <udivmodsi4+0x38>

010123e0 <__divsi3>:
 10123e0:	defffe04 	addi	sp,sp,-8
 10123e4:	dc000015 	stw	r16,0(sp)
 10123e8:	dfc00115 	stw	ra,4(sp)
 10123ec:	0021883a 	mov	r16,zero
 10123f0:	20000c16 	blt	r4,zero,1012424 <__divsi3+0x44>
 10123f4:	000d883a 	mov	r6,zero
 10123f8:	28000e16 	blt	r5,zero,1012434 <__divsi3+0x54>
 10123fc:	10123640 	call	1012364 <udivmodsi4>
 1012400:	1007883a 	mov	r3,r2
 1012404:	8005003a 	cmpeq	r2,r16,zero
 1012408:	1000011e 	bne	r2,zero,1012410 <__divsi3+0x30>
 101240c:	00c7c83a 	sub	r3,zero,r3
 1012410:	1805883a 	mov	r2,r3
 1012414:	dfc00117 	ldw	ra,4(sp)
 1012418:	dc000017 	ldw	r16,0(sp)
 101241c:	dec00204 	addi	sp,sp,8
 1012420:	f800283a 	ret
 1012424:	0109c83a 	sub	r4,zero,r4
 1012428:	04000044 	movi	r16,1
 101242c:	000d883a 	mov	r6,zero
 1012430:	283ff20e 	bge	r5,zero,10123fc <__divsi3+0x1c>
 1012434:	014bc83a 	sub	r5,zero,r5
 1012438:	8021003a 	cmpeq	r16,r16,zero
 101243c:	003fef06 	br	10123fc <__divsi3+0x1c>

01012440 <__modsi3>:
 1012440:	deffff04 	addi	sp,sp,-4
 1012444:	dfc00015 	stw	ra,0(sp)
 1012448:	01800044 	movi	r6,1
 101244c:	2807883a 	mov	r3,r5
 1012450:	20000416 	blt	r4,zero,1012464 <__modsi3+0x24>
 1012454:	28000c16 	blt	r5,zero,1012488 <__modsi3+0x48>
 1012458:	dfc00017 	ldw	ra,0(sp)
 101245c:	dec00104 	addi	sp,sp,4
 1012460:	10123641 	jmpi	1012364 <udivmodsi4>
 1012464:	0109c83a 	sub	r4,zero,r4
 1012468:	28000b16 	blt	r5,zero,1012498 <__modsi3+0x58>
 101246c:	180b883a 	mov	r5,r3
 1012470:	01800044 	movi	r6,1
 1012474:	10123640 	call	1012364 <udivmodsi4>
 1012478:	0085c83a 	sub	r2,zero,r2
 101247c:	dfc00017 	ldw	ra,0(sp)
 1012480:	dec00104 	addi	sp,sp,4
 1012484:	f800283a 	ret
 1012488:	014bc83a 	sub	r5,zero,r5
 101248c:	dfc00017 	ldw	ra,0(sp)
 1012490:	dec00104 	addi	sp,sp,4
 1012494:	10123641 	jmpi	1012364 <udivmodsi4>
 1012498:	0147c83a 	sub	r3,zero,r5
 101249c:	003ff306 	br	101246c <__modsi3+0x2c>

010124a0 <__udivsi3>:
 10124a0:	000d883a 	mov	r6,zero
 10124a4:	10123641 	jmpi	1012364 <udivmodsi4>

010124a8 <__umodsi3>:
 10124a8:	01800044 	movi	r6,1
 10124ac:	10123641 	jmpi	1012364 <udivmodsi4>

010124b0 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 10124b0:	2900051e 	bne	r5,r4,10124c8 <alt_load_section+0x18>
 10124b4:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
 10124b8:	20800017 	ldw	r2,0(r4)
 10124bc:	21000104 	addi	r4,r4,4
 10124c0:	28800015 	stw	r2,0(r5)
 10124c4:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 10124c8:	29bffb1e 	bne	r5,r6,10124b8 <alt_load_section+0x8>
 10124cc:	f800283a 	ret

010124d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 10124d0:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 10124d4:	01004074 	movhi	r4,257
 10124d8:	210af904 	addi	r4,r4,11236
 10124dc:	01404074 	movhi	r5,257
 10124e0:	294aba04 	addi	r5,r5,10984
 10124e4:	01804074 	movhi	r6,257
 10124e8:	318af904 	addi	r6,r6,11236
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 10124ec:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 10124f0:	10124b00 	call	10124b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 10124f4:	01002034 	movhi	r4,128
 10124f8:	21000804 	addi	r4,r4,32
 10124fc:	01402034 	movhi	r5,128
 1012500:	29400804 	addi	r5,r5,32
 1012504:	01802034 	movhi	r6,128
 1012508:	31805004 	addi	r6,r6,320
 101250c:	10124b00 	call	10124b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1012510:	01004074 	movhi	r4,257
 1012514:	210a6104 	addi	r4,r4,10628
 1012518:	01404074 	movhi	r5,257
 101251c:	294a6104 	addi	r5,r5,10628
 1012520:	01804074 	movhi	r6,257
 1012524:	318aba04 	addi	r6,r6,10984
 1012528:	10124b00 	call	10124b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 101252c:	101274c0 	call	101274c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 1012530:	dfc00017 	ldw	ra,0(sp)
 1012534:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 1012538:	10127501 	jmpi	1012750 <alt_icache_flush_all>

0101253c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 101253c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1012540:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1012544:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1012548:	101266c0 	call	101266c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 101254c:	10126540 	call	1012654 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1012550:	d1204717 	ldw	r4,-32484(gp)
 1012554:	d1604817 	ldw	r5,-32480(gp)
 1012558:	d1a04917 	ldw	r6,-32476(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 101255c:	dfc00017 	ldw	ra,0(sp)
 1012560:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1012564:	10101fc1 	jmpi	10101fc <main>

01012568 <times>:
{
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 1012568:	00804074 	movhi	r2,257
 101256c:	108b3d04 	addi	r2,r2,11508
 1012570:	10c00017 	ldw	r3,0(r2)
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 1012574:	deffff04 	addi	sp,sp,-4
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1012578:	00804074 	movhi	r2,257
 101257c:	108b3e04 	addi	r2,r2,11512
 1012580:	dfc00015 	stw	ra,0(sp)
 1012584:	11400017 	ldw	r5,0(r2)
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 1012588:	18000c1e 	bne	r3,zero,10125bc <times+0x54>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 101258c:	00804074 	movhi	r2,257
 1012590:	108af504 	addi	r2,r2,11220
 1012594:	10800017 	ldw	r2,0(r2)
 1012598:	00c04074 	movhi	r3,257
 101259c:	18cb3804 	addi	r3,r3,11488
 10125a0:	10000226 	beq	r2,zero,10125ac <times+0x44>
 10125a4:	103ee83a 	callr	r2
 10125a8:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = ENOSYS;
 10125ac:	00801604 	movi	r2,88
 10125b0:	000b883a 	mov	r5,zero
 10125b4:	18800015 	stw	r2,0(r3)
 10125b8:	00000406 	br	10125cc <times+0x64>
  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;
 10125bc:	20000315 	stw	zero,12(r4)
    return 0;
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 10125c0:	20000015 	stw	zero,0(r4)
  buf->tms_stime  = ticks;
 10125c4:	21400115 	stw	r5,4(r4)
  buf->tms_cutime = 0;
 10125c8:	20000215 	stw	zero,8(r4)
  buf->tms_cstime = 0;

  return ticks;
}
 10125cc:	2805883a 	mov	r2,r5
 10125d0:	dfc00017 	ldw	ra,0(sp)
 10125d4:	dec00104 	addi	sp,sp,4
 10125d8:	f800283a 	ret

010125dc <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 10125dc:	deffff04 	addi	sp,sp,-4
 10125e0:	2007883a 	mov	r3,r4
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 10125e4:	00800044 	movi	r2,1
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 10125e8:	dfc00015 	stw	ra,0(sp)
#endif

    switch (file) {
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
 10125ec:	000f883a 	mov	r7,zero
 10125f0:	01004074 	movhi	r4,257
 10125f4:	210af404 	addi	r4,r4,11216
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 10125f8:	18800526 	beq	r3,r2,1012610 <write+0x34>
 10125fc:	00800084 	movi	r2,2
 1012600:	1880061e 	bne	r3,r2,101261c <write+0x40>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 1012604:	01004074 	movhi	r4,257
 1012608:	210af404 	addi	r4,r4,11216
 101260c:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
 1012610:	dfc00017 	ldw	ra,0(sp)
 1012614:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 1012618:	101268c1 	jmpi	101268c <altera_avalon_jtag_uart_write>
 101261c:	00804074 	movhi	r2,257
 1012620:	108af504 	addi	r2,r2,11220
 1012624:	10800017 	ldw	r2,0(r2)
 1012628:	00c04074 	movhi	r3,257
 101262c:	18cb3804 	addi	r3,r3,11488
 1012630:	10000226 	beq	r2,zero,101263c <write+0x60>
 1012634:	103ee83a 	callr	r2
 1012638:	1007883a 	mov	r3,r2
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 101263c:	00801444 	movi	r2,81
 1012640:	18800015 	stw	r2,0(r3)
        return -1;
    }
}
 1012644:	00bfffc4 	movi	r2,-1
 1012648:	dfc00017 	ldw	ra,0(sp)
 101264c:	dec00104 	addi	sp,sp,4
 1012650:	f800283a 	ret

01012654 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 1012654:	010040b4 	movhi	r4,258
 1012658:	21040004 	addi	r4,r4,4096
 101265c:	000b883a 	mov	r5,zero
 1012660:	01800044 	movi	r6,1
 1012664:	01c0fa04 	movi	r7,1000
 1012668:	10126c01 	jmpi	10126c0 <alt_avalon_timer_sc_init>

0101266c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 101266c:	deffff04 	addi	sp,sp,-4
 1012670:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 1012674:	10129440 	call	1012944 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1012678:	00800044 	movi	r2,1
 101267c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1012680:	dfc00017 	ldw	ra,0(sp)
 1012684:	dec00104 	addi	sp,sp,4
 1012688:	f800283a 	ret

0101268c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 101268c:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
 1012690:	298f883a 	add	r7,r5,r6
 1012694:	20c00104 	addi	r3,r4,4
 1012698:	00000606 	br	10126b4 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 101269c:	18800037 	ldwio	r2,0(r3)
 10126a0:	10bfffec 	andhi	r2,r2,65535
 10126a4:	10000326 	beq	r2,zero,10126b4 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 10126a8:	28800007 	ldb	r2,0(r5)
 10126ac:	29400044 	addi	r5,r5,1
 10126b0:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 10126b4:	29fff936 	bltu	r5,r7,101269c <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
 10126b8:	3005883a 	mov	r2,r6
 10126bc:	f800283a 	ret

010126c0 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 10126c0:	02004074 	movhi	r8,257
 10126c4:	420b3d04 	addi	r8,r8,11508
 10126c8:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 10126cc:	defffe04 	addi	sp,sp,-8
 10126d0:	3807883a 	mov	r3,r7
 10126d4:	dfc00115 	stw	ra,4(sp)
 10126d8:	200f883a 	mov	r7,r4
 10126dc:	1000011e 	bne	r2,zero,10126e4 <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
 10126e0:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 10126e4:	008001c4 	movi	r2,7
 10126e8:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 10126ec:	2809883a 	mov	r4,r5
 10126f0:	300b883a 	mov	r5,r6
 10126f4:	01804074 	movhi	r6,257
 10126f8:	3189c404 	addi	r6,r6,10000
 10126fc:	d8000015 	stw	zero,0(sp)
 1012700:	10127f40 	call	10127f4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1012704:	dfc00117 	ldw	ra,4(sp)
 1012708:	dec00204 	addi	sp,sp,8
 101270c:	f800283a 	ret

01012710 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1012710:	defffe04 	addi	sp,sp,-8
 1012714:	dfc00115 	stw	ra,4(sp)
 1012718:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 101271c:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1012720:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012724:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012728:	00bfff84 	movi	r2,-2
 101272c:	8084703a 	and	r2,r16,r2
 1012730:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
 1012734:	10128980 	call	1012898 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012738:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
 101273c:	dfc00117 	ldw	ra,4(sp)
 1012740:	dc000017 	ldw	r16,0(sp)
 1012744:	dec00204 	addi	sp,sp,8
 1012748:	f800283a 	ret

0101274c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 101274c:	f800283a 	ret

01012750 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1012750:	0009883a 	mov	r4,zero
 1012754:	01420004 	movi	r5,2048
 1012758:	101294c1 	jmpi	101294c <alt_icache_flush>

0101275c <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 101275c:	000530fa 	rdctl	r2,ienable
 1012760:	00c00044 	movi	r3,1
 1012764:	1946983a 	sll	r3,r3,r5
 1012768:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
 101276c:	1004c03a 	cmpne	r2,r2,zero
 1012770:	f800283a 	ret

01012774 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012774:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012778:	00bfff84 	movi	r2,-2
 101277c:	3084703a 	and	r2,r6,r2
 1012780:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 1012784:	01004074 	movhi	r4,257
 1012788:	210b3c04 	addi	r4,r4,11504
 101278c:	00c00044 	movi	r3,1
 1012790:	20800017 	ldw	r2,0(r4)
 1012794:	1946983a 	sll	r3,r3,r5
 1012798:	10c4b03a 	or	r2,r2,r3
 101279c:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10127a0:	20800017 	ldw	r2,0(r4)
 10127a4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10127a8:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 10127ac:	0005883a 	mov	r2,zero
 10127b0:	f800283a 	ret

010127b4 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10127b4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10127b8:	00bfff84 	movi	r2,-2
 10127bc:	3084703a 	and	r2,r6,r2
 10127c0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 10127c4:	01004074 	movhi	r4,257
 10127c8:	210b3c04 	addi	r4,r4,11504
 10127cc:	00ffff84 	movi	r3,-2
 10127d0:	20800017 	ldw	r2,0(r4)
 10127d4:	1946183a 	rol	r3,r3,r5
 10127d8:	10c4703a 	and	r2,r2,r3
 10127dc:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10127e0:	20800017 	ldw	r2,0(r4)
 10127e4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10127e8:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 10127ec:	0005883a 	mov	r2,zero
 10127f0:	f800283a 	ret

010127f4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 10127f4:	10127f81 	jmpi	10127f8 <alt_iic_isr_register>

010127f8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 10127f8:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 10127fc:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1012800:	dfc00115 	stw	ra,4(sp)
 1012804:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1012808:	00fffa84 	movi	r3,-22
 101280c:	11401016 	blt	r2,r5,1012850 <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012810:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012814:	00bfff84 	movi	r2,-2
 1012818:	8084703a 	and	r2,r16,r2
 101281c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 1012820:	280490fa 	slli	r2,r5,3
 1012824:	00c04074 	movhi	r3,257
 1012828:	18cb3f04 	addi	r3,r3,11516
 101282c:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = isr_context;
 1012830:	11c00115 	stw	r7,4(r2)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 1012834:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1012838:	30000226 	beq	r6,zero,1012844 <alt_iic_isr_register+0x4c>
 101283c:	10127740 	call	1012774 <alt_ic_irq_enable>
 1012840:	00000106 	br	1012848 <alt_iic_isr_register+0x50>
 1012844:	10127b40 	call	10127b4 <alt_ic_irq_disable>
 1012848:	1007883a 	mov	r3,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101284c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 1012850:	1805883a 	mov	r2,r3
 1012854:	dfc00117 	ldw	ra,4(sp)
 1012858:	dc000017 	ldw	r16,0(sp)
 101285c:	dec00204 	addi	sp,sp,8
 1012860:	f800283a 	ret

01012864 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012864:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012868:	00bfff84 	movi	r2,-2
 101286c:	2884703a 	and	r2,r5,r2
 1012870:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1012874:	20c00017 	ldw	r3,0(r4)
 1012878:	20800117 	ldw	r2,4(r4)
 101287c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1012880:	20800117 	ldw	r2,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1012884:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
 1012888:	10c00015 	stw	r3,0(r2)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
 101288c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012890:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
 1012894:	f800283a 	ret

01012898 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1012898:	defffd04 	addi	sp,sp,-12

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 101289c:	d0a04c17 	ldw	r2,-32464(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10128a0:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 10128a4:	d4200517 	ldw	r16,-32748(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10128a8:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10128ac:	dfc00215 	stw	ra,8(sp)
 10128b0:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10128b4:	d0a04c15 	stw	r2,-32464(gp)
 10128b8:	00001b06 	br	1012928 <alt_tick+0x90>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10128bc:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
 10128c0:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10128c4:	10000326 	beq	r2,zero,10128d4 <alt_tick+0x3c>
 10128c8:	d0a04c17 	ldw	r2,-32464(gp)
 10128cc:	1000011e 	bne	r2,zero,10128d4 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
 10128d0:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 10128d4:	d0e04c17 	ldw	r3,-32464(gp)
 10128d8:	80800217 	ldw	r2,8(r16)
 10128dc:	18801136 	bltu	r3,r2,1012924 <alt_tick+0x8c>
 10128e0:	80800403 	ldbu	r2,16(r16)
 10128e4:	10000f1e 	bne	r2,zero,1012924 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
 10128e8:	81000517 	ldw	r4,20(r16)
 10128ec:	80800317 	ldw	r2,12(r16)
 10128f0:	103ee83a 	callr	r2
 10128f4:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 10128f8:	1000031e 	bne	r2,zero,1012908 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
 10128fc:	8009883a 	mov	r4,r16
 1012900:	10128640 	call	1012864 <alt_alarm_stop>
 1012904:	00000706 	br	1012924 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
 1012908:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 101290c:	d0e04c17 	ldw	r3,-32464(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 1012910:	1105883a 	add	r2,r2,r4
 1012914:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1012918:	10c0022e 	bgeu	r2,r3,1012924 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
 101291c:	00800044 	movi	r2,1
 1012920:	80800405 	stb	r2,16(r16)
 1012924:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1012928:	d0a00504 	addi	r2,gp,-32748
 101292c:	80bfe31e 	bne	r16,r2,10128bc <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1012930:	dfc00217 	ldw	ra,8(sp)
 1012934:	dc400117 	ldw	r17,4(sp)
 1012938:	dc000017 	ldw	r16,0(sp)
 101293c:	dec00304 	addi	sp,sp,12
 1012940:	f800283a 	ret

01012944 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 1012944:	000170fa 	wrctl	ienable,zero
}
 1012948:	f800283a 	ret

0101294c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 101294c:	00820004 	movi	r2,2048
 1012950:	2007883a 	mov	r3,r4
 1012954:	1140012e 	bgeu	r2,r5,101295c <alt_icache_flush+0x10>
 1012958:	100b883a 	mov	r5,r2
 101295c:	194b883a 	add	r5,r3,r5
 1012960:	00000206 	br	101296c <alt_icache_flush+0x20>

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1012964:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1012968:	18c00804 	addi	r3,r3,32
 101296c:	197ffd36 	bltu	r3,r5,1012964 <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1012970:	208007cc 	andi	r2,r4,31
 1012974:	10000126 	beq	r2,zero,101297c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1012978:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 101297c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1012980:	f800283a 	ret
